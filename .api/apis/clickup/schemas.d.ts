declare const AddDependency: {
    readonly body: {
        readonly title: "AddDependencyrequest";
        readonly type: "object";
        readonly properties: {
            readonly depends_on: {
                readonly type: "string";
                readonly examples: readonly ["9hw"];
            };
            readonly depedency_of: {
                readonly type: "string";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hv"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "This is the task which is waiting on or blocking another task.";
                };
            };
            readonly required: readonly ["task_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n\\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const AddGuestToFolder: {
    readonly body: {
        readonly title: "AddGuestToFolderrequest";
        readonly required: readonly ["permission_level"];
        readonly type: "object";
        readonly properties: {
            readonly permission_level: {
                readonly description: "Can be `read` (view only), `comment`, `edit`, or `create` (full).";
                readonly type: "string";
                readonly examples: readonly ["read"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly folder_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [1057];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly guest_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [403];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["folder_id", "guest_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly include_shared: {
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Exclude details of items shared with the guest by setting this parameter to `false`. By default this parameter is set to `true`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "AddGuestToFolderresponse";
            readonly required: readonly ["guest"];
            readonly type: "object";
            readonly properties: {
                readonly guest: {
                    readonly title: "Guest5";
                    readonly required: readonly ["user", "invited_by", "can_see_time_spent", "can_see_time_estimated", "can_edit_tags", "shared"];
                    readonly type: "object";
                    readonly properties: {
                        readonly user: {
                            readonly title: "User7";
                            readonly required: readonly ["id", "username", "email", "color", "profilePicture", "initials", "role", "last_active", "date_joined", "date_invited"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly username: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly profilePicture: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly role: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly last_active: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_joined: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_invited: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly invited_by: {
                            readonly title: "InvitedBy";
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly username: {
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly profilePicture: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly can_see_time_spent: {
                            readonly type: "boolean";
                        };
                        readonly can_see_time_estimated: {
                            readonly type: "boolean";
                        };
                        readonly can_edit_tags: {
                            readonly type: "boolean";
                        };
                        readonly shared: {
                            readonly title: "Shared5";
                            readonly required: readonly ["tasks", "lists", "folders"];
                            readonly type: "object";
                            readonly properties: {
                                readonly tasks: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly lists: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly folders: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly title: "Folder4";
                                        readonly required: readonly ["id", "name", "orderindex", "override_statuses", "hidden", "task_count", "archived", "statuses", "lists", "permission_level"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly orderindex: {
                                                readonly type: "integer";
                                                readonly contentEncoding: "int32";
                                            };
                                            readonly override_statuses: {
                                                readonly type: "boolean";
                                            };
                                            readonly hidden: {
                                                readonly type: "boolean";
                                            };
                                            readonly task_count: {
                                                readonly type: "string";
                                            };
                                            readonly archived: {
                                                readonly type: "boolean";
                                            };
                                            readonly statuses: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly title: "Status";
                                                    readonly required: readonly ["status", "color", "orderindex", "type"];
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly status: {
                                                            readonly type: "string";
                                                        };
                                                        readonly color: {
                                                            readonly type: "string";
                                                        };
                                                        readonly orderindex: {
                                                            readonly type: "integer";
                                                            readonly contentEncoding: "int32";
                                                        };
                                                        readonly type: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly description: "";
                                            };
                                            readonly lists: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                                readonly description: "";
                                            };
                                            readonly permission_level: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly description: "";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const AddGuestToList: {
    readonly body: {
        readonly title: "AddGuestToListrequest";
        readonly required: readonly ["permission_level"];
        readonly type: "object";
        readonly properties: {
            readonly permission_level: {
                readonly description: "Can be `read` (view only), `comment`, `edit`, or `create` (full).";
                readonly type: "string";
                readonly examples: readonly ["read"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly list_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [1427];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly guest_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [403];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["list_id", "guest_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly include_shared: {
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Exclude details of items shared with the guest by setting this parameter to `false`. By default this parameter is set to `true`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "AddGuestToListresponse";
            readonly required: readonly ["guest"];
            readonly type: "object";
            readonly properties: {
                readonly guest: {
                    readonly title: "Guest3";
                    readonly required: readonly ["user", "invited_by", "can_see_time_spent", "can_see_time_estimated", "can_edit_tags", "shared"];
                    readonly type: "object";
                    readonly properties: {
                        readonly user: {
                            readonly title: "User7";
                            readonly required: readonly ["id", "username", "email", "color", "profilePicture", "initials", "role", "last_active", "date_joined", "date_invited"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly username: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly profilePicture: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly role: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly last_active: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_joined: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_invited: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly invited_by: {
                            readonly title: "InvitedBy";
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly username: {
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly profilePicture: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly can_see_time_spent: {
                            readonly type: "boolean";
                        };
                        readonly can_see_time_estimated: {
                            readonly type: "boolean";
                        };
                        readonly can_edit_tags: {
                            readonly type: "boolean";
                        };
                        readonly shared: {
                            readonly title: "Shared3";
                            readonly required: readonly ["tasks", "lists", "folders"];
                            readonly type: "object";
                            readonly properties: {
                                readonly tasks: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly lists: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly title: "List3";
                                        readonly required: readonly ["id", "name", "orderindex", "status", "priority", "assignee", "task_count", "due_date", "start_date", "archived", "override_statuses", "statuses", "permission_level"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly orderindex: {
                                                readonly type: "integer";
                                                readonly contentEncoding: "int32";
                                            };
                                            readonly status: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly priority: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly assignee: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly task_count: {
                                                readonly type: "string";
                                            };
                                            readonly due_date: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly start_date: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly archived: {
                                                readonly type: "boolean";
                                            };
                                            readonly override_statuses: {
                                                readonly type: "boolean";
                                            };
                                            readonly statuses: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly title: "Status";
                                                    readonly required: readonly ["status", "color", "orderindex", "type"];
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly status: {
                                                            readonly type: "string";
                                                        };
                                                        readonly color: {
                                                            readonly type: "string";
                                                        };
                                                        readonly orderindex: {
                                                            readonly type: "integer";
                                                            readonly contentEncoding: "int32";
                                                        };
                                                        readonly type: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly description: "";
                                            };
                                            readonly permission_level: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly description: "";
                                };
                                readonly folders: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const AddGuestToTask: {
    readonly body: {
        readonly title: "AddGuestToTaskrequest";
        readonly required: readonly ["permission_level"];
        readonly type: "object";
        readonly properties: {
            readonly permission_level: {
                readonly description: "Can be `read` (view only), `comment`, `edit`, or `create` (full).";
                readonly type: "string";
                readonly examples: readonly ["read"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["c04"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly guest_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [403];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id", "guest_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly include_shared: {
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Exclude details of items shared with the guest by setting this parameter to `false`. By default this parameter is set to `true`.";
                };
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "AddGuestToTaskresponse";
            readonly required: readonly ["guest"];
            readonly type: "object";
            readonly properties: {
                readonly guest: {
                    readonly title: "Guest1";
                    readonly required: readonly ["user", "invited_by", "can_see_time_spent", "can_see_time_estimated", "can_edit_tags", "shared"];
                    readonly type: "object";
                    readonly properties: {
                        readonly user: {
                            readonly title: "User7";
                            readonly required: readonly ["id", "username", "email", "color", "profilePicture", "initials", "role", "last_active", "date_joined", "date_invited"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly username: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly profilePicture: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly role: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly last_active: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_joined: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_invited: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly invited_by: {
                            readonly title: "InvitedBy";
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly username: {
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly profilePicture: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly can_see_time_spent: {
                            readonly type: "boolean";
                        };
                        readonly can_see_time_estimated: {
                            readonly type: "boolean";
                        };
                        readonly can_edit_tags: {
                            readonly type: "boolean";
                        };
                        readonly shared: {
                            readonly title: "Shared1";
                            readonly required: readonly ["tasks", "lists", "folders"];
                            readonly type: "object";
                            readonly properties: {
                                readonly tasks: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly title: "Task2";
                                        readonly required: readonly ["id", "name", "status", "orderindex", "date_created", "date_updated", "date_closed", "archived", "creator", "assignees", "checklists", "tags", "parent", "priority", "due_date", "start_date", "points", "time_estimate", "custom_fields", "dependencies", "team_id", "url", "permission_level", "list", "folder", "space"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly status: {
                                                readonly title: "Status";
                                                readonly required: readonly ["status", "color", "orderindex", "type"];
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly status: {
                                                        readonly type: "string";
                                                    };
                                                    readonly color: {
                                                        readonly type: "string";
                                                    };
                                                    readonly orderindex: {
                                                        readonly type: "integer";
                                                        readonly contentEncoding: "int32";
                                                    };
                                                    readonly type: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                            readonly orderindex: {
                                                readonly type: "string";
                                            };
                                            readonly date_created: {
                                                readonly type: "string";
                                            };
                                            readonly date_updated: {
                                                readonly type: "string";
                                            };
                                            readonly date_closed: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly archived: {
                                                readonly type: "boolean";
                                            };
                                            readonly creator: {
                                                readonly title: "Creator";
                                                readonly required: readonly ["id", "username", "color", "profilePicture"];
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "integer";
                                                        readonly contentEncoding: "int32";
                                                    };
                                                    readonly username: {
                                                        readonly type: "string";
                                                    };
                                                    readonly color: {
                                                        readonly type: "string";
                                                    };
                                                    readonly profilePicture: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                            readonly assignees: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                                readonly description: "";
                                            };
                                            readonly checklists: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                                readonly description: "";
                                            };
                                            readonly tags: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                                readonly description: "";
                                            };
                                            readonly parent: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly priority: {
                                                readonly title: "Priority";
                                                readonly required: readonly ["id", "priority", "color", "orderindex"];
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly priority: {
                                                        readonly type: "string";
                                                    };
                                                    readonly color: {
                                                        readonly type: "string";
                                                    };
                                                    readonly orderindex: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                            readonly due_date: {
                                                readonly type: "string";
                                            };
                                            readonly start_date: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly points: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly time_estimate: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly custom_fields: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                                readonly description: "";
                                            };
                                            readonly dependencies: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                                readonly description: "";
                                            };
                                            readonly team_id: {
                                                readonly type: "string";
                                            };
                                            readonly url: {
                                                readonly type: "string";
                                            };
                                            readonly permission_level: {
                                                readonly type: "string";
                                            };
                                            readonly list: {
                                                readonly title: "List2";
                                                readonly required: readonly ["id", "name", "access"];
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                    };
                                                    readonly access: {
                                                        readonly type: "boolean";
                                                    };
                                                };
                                            };
                                            readonly folder: {
                                                readonly title: "Folder3";
                                                readonly required: readonly ["id", "name", "hidden", "access"];
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                    };
                                                    readonly hidden: {
                                                        readonly type: "boolean";
                                                    };
                                                    readonly access: {
                                                        readonly type: "boolean";
                                                    };
                                                };
                                            };
                                            readonly space: {
                                                readonly title: "Space";
                                                readonly required: readonly ["id"];
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly description: "";
                                };
                                readonly lists: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly folders: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const AddTagToTask: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["abc"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly tag_name: {
                    readonly type: "string";
                    readonly examples: readonly ["name"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id", "tag_name"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const AddTaskLink: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hv"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly links_to: {
                    readonly type: "string";
                    readonly examples: readonly ["9hz"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id", "links_to"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "AddTaskLinkresponse";
            readonly required: readonly ["task"];
            readonly type: "object";
            readonly properties: {
                readonly task: {
                    readonly title: "Task";
                    readonly required: readonly ["id", "name", "status", "orderindex", "date_created", "date_updated", "date_closed", "creator", "assignees", "checklists", "tags", "parent", "priority", "due_date", "start_date", "time_estimate", "time_spent", "list", "folder", "space", "linked_tasks", "url"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly status: {
                            readonly title: "Status";
                            readonly required: readonly ["status", "color", "orderindex", "type"];
                            readonly type: "object";
                            readonly properties: {
                                readonly status: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly orderindex: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly type: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly orderindex: {
                            readonly type: "string";
                        };
                        readonly date_created: {
                            readonly type: "string";
                        };
                        readonly date_updated: {
                            readonly type: "string";
                        };
                        readonly date_closed: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly creator: {
                            readonly title: "Creator";
                            readonly required: readonly ["id", "username", "color", "profilePicture"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly username: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly profilePicture: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly assignees: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly checklists: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly tags: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly parent: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly priority: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly due_date: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly start_date: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly time_estimate: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly time_spent: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly list: {
                            readonly title: "List";
                            readonly required: readonly ["id"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly folder: {
                            readonly title: "Folder";
                            readonly required: readonly ["id"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly space: {
                            readonly title: "Space";
                            readonly required: readonly ["id"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly linked_tasks: {
                            readonly type: "array";
                            readonly items: {
                                readonly title: "LinkedTask";
                                readonly required: readonly ["task_id", "link_id", "date_created", "userid"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly task_id: {
                                        readonly type: "string";
                                    };
                                    readonly link_id: {
                                        readonly type: "string";
                                    };
                                    readonly date_created: {
                                        readonly type: "string";
                                    };
                                    readonly userid: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly description: "";
                        };
                        readonly url: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const AddTaskToList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly list_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hz"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["list_id", "task_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const Addtagsfromtimeentries: {
    readonly body: {
        readonly title: "Addtagsfromtimeentriesrequest";
        readonly required: readonly ["time_entry_ids", "tags"];
        readonly type: "object";
        readonly properties: {
            readonly time_entry_ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly examples: readonly ["timer_id"];
                };
                readonly description: "";
            };
            readonly tags: {
                readonly type: "array";
                readonly items: {
                    readonly title: "Tags6";
                    readonly required: readonly ["name", "tag_fg", "tag_bg"];
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly examples: readonly ["name of tag"];
                        };
                        readonly tag_fg: {
                            readonly type: "string";
                            readonly examples: readonly ["#FFFFFF"];
                        };
                        readonly tag_bg: {
                            readonly type: "string";
                            readonly examples: readonly ["#BF55EC"];
                        };
                    };
                };
                readonly description: "";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const Changetagnamesfromtimeentries: {
    readonly body: {
        readonly title: "Changetagnamesfromtimeentriesrequest";
        readonly required: readonly ["name", "new_name", "tag_bg", "tag_fg"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["old tag name"];
            };
            readonly new_name: {
                readonly type: "string";
                readonly examples: readonly ["new tag name"];
            };
            readonly tag_bg: {
                readonly type: "string";
                readonly examples: readonly ["#000000"];
            };
            readonly tag_fg: {
                readonly type: "string";
                readonly examples: readonly ["#000000"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateChatViewComment: {
    readonly body: {
        readonly title: "CreateChatViewCommentrequest";
        readonly required: readonly ["comment_text", "notify_all"];
        readonly type: "object";
        readonly properties: {
            readonly comment_text: {
                readonly type: "string";
                readonly examples: readonly ["View comment content"];
            };
            readonly notify_all: {
                readonly description: "If `notify_all` is true, notifications will be sent to everyone including the creator of the comment.";
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly view_id: {
                    readonly type: "string";
                    readonly examples: readonly ["3c"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "105 (string)";
                };
            };
            readonly required: readonly ["view_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateChatViewCommentresponse";
            readonly required: readonly ["id", "hist_id", "date"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly hist_id: {
                    readonly type: "string";
                };
                readonly date: {
                    readonly type: "integer";
                    readonly contentEncoding: "int64";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateChecklist: {
    readonly body: {
        readonly title: "CreateChecklistrequest";
        readonly required: readonly ["name"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["Checklist"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hz"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateChecklistresponse";
            readonly required: readonly ["checklist"];
            readonly type: "object";
            readonly properties: {
                readonly checklist: {
                    readonly title: "Checklist";
                    readonly required: readonly ["id", "task_id", "name", "orderindex", "resolved", "unresolved", "items"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly task_id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly orderindex: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly resolved: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly unresolved: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly items: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateChecklistItem: {
    readonly body: {
        readonly title: "CreateChecklistItemrequest";
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["Checklist Item"];
            };
            readonly assignee: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [183];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly checklist_id: {
                    readonly type: "string";
                    readonly examples: readonly ["b955c4dc"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "b8a8-48d8-a0c6-b4200788a683 (uuid)";
                };
            };
            readonly required: readonly ["checklist_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateChecklistItemresponse";
            readonly required: readonly ["checklist"];
            readonly type: "object";
            readonly properties: {
                readonly checklist: {
                    readonly title: "Checklist1";
                    readonly required: readonly ["id", "task_id", "name", "date_created", "orderindex", "resolved", "unresolved", "items"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly task_id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly date_created: {
                            readonly type: "string";
                        };
                        readonly orderindex: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly resolved: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly unresolved: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly items: {
                            readonly type: "array";
                            readonly items: {
                                readonly title: "Item";
                                readonly required: readonly ["id", "name", "orderindex", "assignee", "resolved", "parent", "date_created", "children"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly orderindex: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly assignee: {
                                        readonly title: "Assignee";
                                        readonly required: readonly ["id", "username", "email", "color", "initials", "profilePicture"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "integer";
                                                readonly contentEncoding: "int32";
                                            };
                                            readonly username: {
                                                readonly type: "string";
                                            };
                                            readonly email: {
                                                readonly type: "string";
                                            };
                                            readonly color: {
                                                readonly type: "string";
                                            };
                                            readonly initials: {
                                                readonly type: "string";
                                            };
                                            readonly profilePicture: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly resolved: {
                                        readonly type: "boolean";
                                    };
                                    readonly parent: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly date_created: {
                                        readonly type: "string";
                                    };
                                    readonly children: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "";
                                    };
                                };
                            };
                            readonly description: "";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateDoc: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "The name of the new Doc.";
            };
            readonly parent: {
                readonly description: "The parent of the new Doc.";
                readonly type: "object";
                readonly required: readonly ["id", "type"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly type: {
                        readonly type: "number";
                        readonly description: "The parent Doc type. Use `4` for Space, `5` for Folder, `6` for List, `7` for Everything, and `12` for Workspace.";
                    };
                };
            };
            readonly visibility: {
                readonly type: "string";
                readonly description: "The visibility of the new Doc. For example, `PUBLIC` or `PRIVATE`.";
            };
            readonly create_page: {
                readonly type: "boolean";
                readonly description: "Create a new page when creating the Doc.";
                readonly default: true;
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly workspaceId: {
                    readonly type: "number";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the Workspace.";
                };
            };
            readonly required: readonly ["workspaceId"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly date_created: {
                    readonly type: "number";
                };
                readonly date_updated: {
                    readonly type: "number";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly type: {
                    readonly type: "number";
                    readonly enum: readonly [];
                };
                readonly parent: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly type: {
                            readonly type: "number";
                            readonly description: "The parent Doc type. Use `4` for Space, `5` for Folder, `6` for List, `7` for Everything, and `12` for Workspace.";
                        };
                    };
                    readonly required: readonly ["id", "type"];
                };
                readonly public: {
                    readonly type: "boolean";
                };
                readonly workspace_id: {
                    readonly type: "number";
                };
                readonly archived: {
                    readonly type: "boolean";
                };
                readonly archived_by: {
                    readonly type: "number";
                };
                readonly creator: {
                    readonly type: "number";
                };
                readonly date_archived: {
                    readonly type: "number";
                };
                readonly date_deleted: {
                    readonly type: "number";
                };
                readonly deleted: {
                    readonly type: "boolean";
                };
                readonly deleted_by: {
                    readonly type: "number";
                };
                readonly page_defaults: {
                    readonly type: "object";
                    readonly properties: {
                        readonly font: {
                            readonly type: "string";
                        };
                        readonly font_size: {
                            readonly type: "number";
                        };
                        readonly line_height: {
                            readonly type: "number";
                        };
                        readonly page_width: {
                            readonly type: "number";
                        };
                        readonly paragraph_spacing: {
                            readonly type: "number";
                        };
                        readonly show_author_header: {
                            readonly type: "boolean";
                        };
                        readonly show_contributor_header: {
                            readonly type: "boolean";
                        };
                        readonly show_cover_header: {
                            readonly type: "boolean";
                        };
                        readonly show_date_header: {
                            readonly type: "boolean";
                        };
                        readonly show_page_outline: {
                            readonly type: "boolean";
                        };
                        readonly show_sub_pages: {
                            readonly type: "boolean";
                        };
                        readonly sub_page_size: {
                            readonly type: "string";
                        };
                        readonly show_sub_title_header: {
                            readonly type: "boolean";
                        };
                        readonly show_title_icon_header: {
                            readonly type: "boolean";
                        };
                        readonly show_relationships: {
                            readonly type: "boolean";
                        };
                        readonly show_relationships_compact: {
                            readonly type: "boolean";
                        };
                        readonly show_sub_pages_author: {
                            readonly type: "boolean";
                        };
                        readonly show_sub_pages_thumbnail: {
                            readonly type: "boolean";
                        };
                        readonly show_sub_pages_compact: {
                            readonly type: "boolean";
                        };
                        readonly sub_pages_style: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly required: readonly ["id", "date_created", "name", "type", "parent", "public", "workspace_id", "creator"];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateFolder: {
    readonly body: {
        readonly title: "CreateFolderrequest";
        readonly required: readonly ["name"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["New Folder Name"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly space_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [789];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["space_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateFolderresponse";
            readonly required: readonly ["id", "name", "orderindex", "override_statuses", "hidden", "space", "task_count"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly orderindex: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                };
                readonly override_statuses: {
                    readonly type: "boolean";
                };
                readonly hidden: {
                    readonly type: "boolean";
                };
                readonly space: {
                    readonly title: "Space2";
                    readonly required: readonly ["id", "name", "access"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly task_count: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateFolderFromTemplate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Name of the new Folder";
            };
            readonly options: {
                readonly type: "object";
                readonly description: "Options for creating the Folder";
                readonly properties: {
                    readonly return_immediately: {
                        readonly type: "boolean";
                        readonly description: "Flag if newly created Folder should be returned without waiting all nested assets to be applied";
                    };
                    readonly content: {
                        readonly type: "string";
                        readonly description: "List description";
                    };
                    readonly time_estimate: {
                        readonly type: "boolean";
                        readonly description: "Include time (hours, minutes and seconds)";
                    };
                    readonly automation: {
                        readonly type: "boolean";
                        readonly description: "Import automation options";
                    };
                    readonly include_views: {
                        readonly type: "boolean";
                        readonly description: "Import views";
                    };
                    readonly old_due_date: {
                        readonly type: "boolean";
                        readonly description: "Import tasks due dates";
                    };
                    readonly old_start_date: {
                        readonly type: "boolean";
                        readonly description: "Import tasks start dates";
                    };
                    readonly old_followers: {
                        readonly type: "boolean";
                        readonly description: "Import tasks watchers";
                    };
                    readonly comment_attachments: {
                        readonly type: "boolean";
                        readonly description: "Import tasks comment attachments";
                    };
                    readonly recur_settings: {
                        readonly type: "boolean";
                        readonly description: "Import tasks recurring settings";
                    };
                    readonly old_tags: {
                        readonly type: "boolean";
                        readonly description: "Import tasks tags";
                    };
                    readonly old_statuses: {
                        readonly type: "boolean";
                        readonly description: "Import tasks status settings";
                    };
                    readonly subtasks: {
                        readonly type: "boolean";
                        readonly description: "Import tasks subtasks";
                    };
                    readonly custom_type: {
                        readonly type: "boolean";
                        readonly description: "Import tasks types";
                    };
                    readonly old_assignees: {
                        readonly type: "boolean";
                        readonly description: "Import tasks assignees";
                    };
                    readonly attachments: {
                        readonly type: "boolean";
                        readonly description: "Import tasks attachments";
                    };
                    readonly comment: {
                        readonly type: "boolean";
                        readonly description: "Import tasks comments";
                    };
                    readonly old_status: {
                        readonly type: "boolean";
                        readonly description: "Import tasks current statuses";
                    };
                    readonly external_dependencies: {
                        readonly type: "boolean";
                        readonly description: "Import tasks external dependencies";
                    };
                    readonly internal_dependencies: {
                        readonly type: "boolean";
                        readonly description: "Import tasks internal dependencies";
                    };
                    readonly priority: {
                        readonly type: "boolean";
                        readonly description: "Import tasks priority";
                    };
                    readonly custom_fields: {
                        readonly type: "boolean";
                        readonly description: "Import tasks Custom Fields";
                    };
                    readonly old_checklists: {
                        readonly type: "boolean";
                        readonly description: "Import tasks checklists";
                    };
                    readonly relationships: {
                        readonly type: "boolean";
                        readonly description: "Import tasks relationships";
                    };
                    readonly old_subtask_assignees: {
                        readonly type: "boolean";
                        readonly description: "Import tasks subtasks and assignees combination";
                    };
                    readonly start_date: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly description: "Project start date for remapping dates";
                    };
                    readonly due_date: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly description: "Project due date for remapping dates";
                    };
                    readonly remap_start_date: {
                        readonly type: "boolean";
                        readonly description: "Remap start dates";
                    };
                    readonly skip_weekends: {
                        readonly type: "boolean";
                        readonly description: "Skip weekends when remapping dates";
                    };
                    readonly archived: {
                        readonly type: "integer";
                        readonly enum: readonly [1, 2, any];
                        readonly description: "Include archived tasks (1 or 2 or null)";
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly space_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "ID of the Space where the Folder will be created";
                };
                readonly template_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "ID of the Folder template to use.";
                };
            };
            readonly required: readonly ["space_id", "template_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                    readonly description: "ID of the created Folder";
                    readonly examples: readonly [90114316773];
                };
                readonly folder: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier of the Folder";
                            readonly examples: readonly [90114316773];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the Folder";
                            readonly examples: readonly ["Projects"];
                        };
                        readonly orderindex: {
                            readonly type: "integer";
                            readonly description: "Order index of the Folder";
                        };
                        readonly override_statuses: {
                            readonly type: "boolean";
                            readonly description: "Whether the Folder overrides default statuses";
                            readonly examples: readonly [true];
                        };
                        readonly hidden: {
                            readonly type: "boolean";
                            readonly description: "Whether the Folder is hidden";
                        };
                        readonly space: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "ID of the Space containing the Folder";
                                    readonly examples: readonly [90114316773];
                                };
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "Name of the Space";
                                    readonly examples: readonly ["Client Facing"];
                                };
                                readonly access: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the user has access to the Space";
                                    readonly examples: readonly [true];
                                };
                            };
                        };
                        readonly task_count: {
                            readonly type: "string";
                            readonly description: "Number of tasks in the Folder";
                            readonly examples: readonly ["0"];
                        };
                        readonly archived: {
                            readonly type: "boolean";
                            readonly description: "Whether the Folder is archived";
                        };
                        readonly statuses: {
                            readonly type: "array";
                            readonly description: "List of statuses available in the Folder";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Unique identifier of the status";
                                        readonly examples: readonly [90114316773];
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                        readonly description: "Name of the status";
                                        readonly examples: readonly ["complete"];
                                    };
                                    readonly orderindex: {
                                        readonly type: "integer";
                                        readonly description: "Order index of the status";
                                        readonly examples: readonly [2];
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                        readonly description: "Color code for the status";
                                        readonly examples: readonly ["#008844"];
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "Type of the status (closed, custom, open)";
                                        readonly examples: readonly ["closed"];
                                    };
                                };
                            };
                        };
                        readonly lists: {
                            readonly type: "array";
                            readonly description: "Lists contained in the Folder";
                            readonly items: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                            };
                        };
                        readonly permission_level: {
                            readonly type: "string";
                            readonly description: "Permission level for the current user";
                            readonly examples: readonly ["create"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "string";
                    readonly examples: readonly ["Name is required"];
                };
                readonly ECODE: {
                    readonly type: "string";
                    readonly examples: readonly ["OAUTH_119"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateFolderListFromTemplate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Name of the new List";
            };
            readonly options: {
                readonly options: {
                    readonly type: "object";
                    readonly description: "Options for creating the List";
                    readonly properties: {
                        readonly return_immediately: {
                            readonly type: "boolean";
                            readonly description: "Flag if newly created List should be returned without waiting for all nested assets to be applied";
                        };
                        readonly content: {
                            readonly type: "string";
                            readonly description: "List description";
                        };
                        readonly time_estimate: {
                            readonly type: "number";
                            readonly description: "Include time (hours, minutes and seconds)";
                        };
                        readonly automation: {
                            readonly type: "boolean";
                            readonly description: "Import automation settings";
                        };
                        readonly include_views: {
                            readonly type: "boolean";
                            readonly description: "Import views";
                        };
                        readonly old_due_date: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' due dates";
                        };
                        readonly old_start_date: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' start dates";
                        };
                        readonly old_followers: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' watchers";
                        };
                        readonly comment_attachments: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' comment attachments";
                        };
                        readonly recur_settings: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' recurring settings";
                        };
                        readonly old_tags: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' tags";
                        };
                        readonly old_statuses: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' status settings";
                        };
                        readonly subtasks: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' subtasks";
                        };
                        readonly custom_type: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' task types";
                        };
                        readonly old_assignees: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' assignees";
                        };
                        readonly attachments: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' attachments";
                        };
                        readonly comment: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' comments";
                        };
                        readonly old_status: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' current statuses";
                        };
                        readonly external_dependencies: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' external dependencies";
                        };
                        readonly internal_dependencies: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' internal dependencies";
                        };
                        readonly priority: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' priorities";
                        };
                        readonly custom_fields: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' Custom Fields";
                        };
                        readonly old_checklists: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' checklists";
                        };
                        readonly relationships: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' relationships";
                        };
                        readonly old_subtask_assignees: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' subtask assignees";
                        };
                        readonly start_date: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "Project start date for remapping dates";
                        };
                        readonly due_date: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "Project due date for remapping dates";
                        };
                        readonly remap_start_date: {
                            readonly type: "boolean";
                            readonly description: "Remap start dates";
                        };
                        readonly skip_weekends: {
                            readonly type: "boolean";
                            readonly description: "Skip weekends when remapping dates";
                        };
                        readonly archived: {
                            readonly type: "integer";
                            readonly enum: readonly [1, 2, any];
                            readonly description: "Include archived tasks";
                        };
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly folder_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "ID of the Folder where the List will be created";
                };
                readonly template_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "ID of the template to use";
                };
            };
            readonly required: readonly ["folder_id", "template_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Response object returned when a new List is created from a template in a Folder or Space.";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier of the newly created List";
                    readonly examples: readonly ["901107394085"];
                };
                readonly list: {
                    readonly type: "object";
                    readonly description: "Detailed information about the created List";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier of the List (matches parent id)";
                            readonly examples: readonly ["901107394085"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Display name of the List";
                            readonly examples: readonly ["API Folder in Space"];
                        };
                        readonly deleted: {
                            readonly type: "boolean";
                            readonly description: "Indicates if the List has been marked as deleted";
                            readonly examples: readonly [true];
                        };
                        readonly orderindex: {
                            readonly type: "integer";
                            readonly description: "Position of the List relative to other Lists in the same container";
                            readonly examples: readonly [0];
                        };
                        readonly priority: {
                            readonly type: readonly ["string", "null"];
                            readonly description: "Priority level of the List, if applicable";
                        };
                        readonly assignee: {
                            readonly type: readonly ["string", "null"];
                            readonly description: "Default assignee for the List, if applicable";
                        };
                        readonly due_date: {
                            readonly type: readonly ["string", "null"];
                            readonly format: "date-time";
                            readonly description: "Default due date for tasks in the List";
                        };
                        readonly start_date: {
                            readonly type: readonly ["string", "null"];
                            readonly format: "date-time";
                            readonly description: "Default start date for tasks in the List";
                        };
                        readonly folder: {
                            readonly type: "object";
                            readonly description: "Information about the parent Folder containing this List, if applicable";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "Unique identifier of the parent Folder";
                                    readonly examples: readonly ["90114317916"];
                                };
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "Display name of the parent Folder";
                                    readonly examples: readonly ["hidden"];
                                };
                                readonly hidden: {
                                    readonly type: "boolean";
                                    readonly description: "Indicates if the Folder is hidden from standard views";
                                    readonly examples: readonly [true];
                                };
                                readonly access: {
                                    readonly type: "boolean";
                                    readonly description: "Indicates if the current user has access to this Folder";
                                    readonly examples: readonly [true];
                                };
                            };
                        };
                        readonly space: {
                            readonly type: "object";
                            readonly description: "Information about the Workspace Space containing this List";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "Unique identifier of the Space";
                                    readonly examples: readonly ["90112667046"];
                                };
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "Display name of the Space";
                                    readonly examples: readonly ["API Test Space"];
                                };
                                readonly access: {
                                    readonly type: "boolean";
                                    readonly description: "Indicates if the current user has access to this Space";
                                    readonly examples: readonly [true];
                                };
                            };
                        };
                        readonly inbound_address: {
                            readonly type: "string";
                            readonly description: "Email address that can be used to create tasks in this List via email";
                            readonly examples: readonly ["abc-list@tasks.clickup.com"];
                        };
                        readonly archived: {
                            readonly type: "boolean";
                            readonly description: "Indicates if the List is archived";
                            readonly examples: readonly [false];
                        };
                        readonly override_statuses: {
                            readonly type: "boolean";
                            readonly description: "Indicates if this List uses custom statuses instead of Space default statuses";
                            readonly examples: readonly [true];
                        };
                        readonly statuses: {
                            readonly type: "array";
                            readonly description: "List of available statuses for tasks in this List";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "Status configuration object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Unique identifier for the status";
                                        readonly examples: readonly ["sc901107394085_DCnaeiSB"];
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                        readonly description: "Display name of the status";
                                        readonly examples: readonly ["to do"];
                                    };
                                    readonly orderindex: {
                                        readonly type: "integer";
                                        readonly description: "Position of this status in the status list";
                                        readonly examples: readonly [0];
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                        readonly description: "Color code associated with this status";
                                        readonly examples: readonly ["#87909e"];
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "Category of the status (e.g., open, closed, in progress)";
                                        readonly examples: readonly ["open"];
                                    };
                                    readonly status_group: {
                                        readonly type: "string";
                                        readonly description: "TODO - Identifier for grouping related statuses";
                                        readonly examples: readonly ["subcat_901107394085"];
                                    };
                                };
                            };
                        };
                        readonly permission_level: {
                            readonly type: "string";
                            readonly description: "Access level the current user has for this List (e.g., create, edit, view)";
                            readonly examples: readonly ["create"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "string";
                    readonly examples: readonly ["Name is required"];
                };
                readonly ECODE: {
                    readonly type: "string";
                    readonly examples: readonly ["OAUTH_117"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateFolderView: {
    readonly body: {
        readonly title: "CreateFolderViewrequest";
        readonly required: readonly ["name", "type", "grouping", "divide", "sorting", "filters", "columns", "team_sidebar", "settings"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["New Folder View Name"];
            };
            readonly type: {
                readonly type: "string";
                readonly description: "The type of view to create. Options include: `list`, `board`, `calendar`, `table`, `timeline`, `workload`, `activity`, `map`, `conversation`, or `gantt`.";
                readonly examples: readonly ["list"];
            };
            readonly grouping: {
                readonly title: "Grouping";
                readonly required: readonly ["field", "dir", "collapsed", "ignore"];
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                        readonly description: "Set the field to group by.\\\n \\\nOptions include: `none`, `status`, `priority`, `assignee`, `tag`, or `dueDate`.";
                        readonly examples: readonly ["status"];
                    };
                    readonly dir: {
                        readonly description: "Set a group sort order using `1` or `-1`.\\\n \\\nFor example, use `1`show tasks with urgent priority at the top of your view, and tasks with no priority at the bottom.\\\n \\\nUse `-1` to reverse the order to show tasks with no priority at the top of your view.";
                        readonly type: "integer";
                        readonly contentEncoding: "int32";
                        readonly examples: readonly [1];
                    };
                    readonly collapsed: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "";
                    };
                    readonly ignore: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly divide: {
                readonly title: "Divide";
                readonly required: readonly ["collapsed"];
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "null";
                    };
                    readonly dir: {
                        readonly type: "null";
                    };
                    readonly collapsed: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly sorting: {
                readonly title: "Sorting";
                readonly required: readonly ["fields"];
                readonly type: "object";
                readonly properties: {
                    readonly fields: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "Include an array of fields to sort by.\\\n \\\n You can sort by the same fields available when [filtering a view](doc:filter-views).";
                    };
                };
            };
            readonly filters: {
                readonly title: "Filters";
                readonly required: readonly ["op", "fields", "search", "show_closed"];
                readonly type: "object";
                readonly properties: {
                    readonly op: {
                        readonly type: "string";
                        readonly description: "The available operator (`op``) values are `AND`` and `OR``.";
                        readonly examples: readonly ["AND"];
                    };
                    readonly fields: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "View the list of [fields available](doc:filter-views) to filter by.";
                    };
                    readonly search: {
                        readonly type: "string";
                    };
                    readonly show_closed: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly columns: {
                readonly title: "Columns";
                readonly description: "Custom Fields added to a view at the Everything level will be added to all tasks in your Workspace. Once Custom Fields are added to one of these views, you cannot move it to another level of the Hierarchy.";
                readonly required: readonly ["fields"];
                readonly type: "object";
                readonly properties: {
                    readonly fields: {
                        readonly description: "Custom Fields require the `_cf` prefix and must be formatted as a JSON object.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly team_sidebar: {
                readonly title: "TeamSidebar";
                readonly required: readonly ["assignees", "assigned_comments", "unassigned_tasks"];
                readonly type: "object";
                readonly properties: {
                    readonly assignees: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "";
                    };
                    readonly assigned_comments: {
                        readonly type: "boolean";
                    };
                    readonly unassigned_tasks: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly settings: {
                readonly title: "Settings";
                readonly required: readonly ["show_task_locations", "show_subtasks", "show_subtask_parent_names", "show_closed_subtasks", "show_assignees", "show_images", "collapse_empty_columns", "me_comments", "me_subtasks", "me_checklists"];
                readonly type: "object";
                readonly properties: {
                    readonly show_task_locations: {
                        readonly type: "boolean";
                    };
                    readonly show_subtasks: {
                        readonly description: "Acceptable values are `1`, `2`, or `3`, which show subtasks separate, expanded, or collapsed.";
                        readonly type: "integer";
                        readonly contentEncoding: "int32";
                        readonly examples: readonly [3];
                    };
                    readonly show_subtask_parent_names: {
                        readonly type: "boolean";
                    };
                    readonly show_closed_subtasks: {
                        readonly type: "boolean";
                    };
                    readonly show_assignees: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly show_images: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly collapse_empty_columns: {
                        readonly type: readonly ["string", "null"];
                    };
                    readonly me_comments: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly me_subtasks: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly me_checklists: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly folder_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [457];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["folder_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateFolderViewresponse";
            readonly required: readonly ["view"];
            readonly type: "object";
            readonly properties: {
                readonly view: {
                    readonly title: "View";
                    readonly required: readonly ["id", "name", "type", "parent", "grouping", "divide", "sorting", "filters", "columns", "team_sidebar", "settings"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                        readonly parent: {
                            readonly title: "Parent";
                            readonly description: "The parent parameter specifies where the view is located in the ClickUp Hierarchy. Both `id` and `type` are required. \\\n \\\nThe `id` is the id of the Workspace, Space, Folder, or List where the view is located. \\\n \\\nThe `type` value indciates the level of the Hierarchy where the view is located.";
                            readonly required: readonly ["id", "type"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "The id of the Workspace, Space, Folder, or List where the view is located.";
                                };
                                readonly type: {
                                    readonly type: "integer";
                                    readonly description: "The level of the Hierarchy where the view is created. \\\n \\\nOptions include: \\\n \\\nWorkspace (Everything Level): `7` \\\n \\\nSpace: `4` \\\n \\\nFolder: `5` \\\n \\\nList: `6`";
                                    readonly contentEncoding: "int32";
                                };
                            };
                        };
                        readonly grouping: {
                            readonly title: "Grouping";
                            readonly required: readonly ["field", "dir", "collapsed", "ignore"];
                            readonly type: "object";
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly description: "Set the field to group by.\\\n \\\nOptions include: `none`, `status`, `priority`, `assignee`, `tag`, or `dueDate`.";
                                };
                                readonly dir: {
                                    readonly description: "Set a group sort order using `1` or `-1`.\\\n \\\nFor example, use `1`show tasks with urgent priority at the top of your view, and tasks with no priority at the bottom.\\\n \\\nUse `-1` to reverse the order to show tasks with no priority at the top of your view.";
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly collapsed: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly ignore: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly divide: {
                            readonly title: "Divide";
                            readonly required: readonly ["collapsed"];
                            readonly type: "object";
                            readonly properties: {
                                readonly field: {
                                    readonly type: "null";
                                };
                                readonly dir: {
                                    readonly type: "null";
                                };
                                readonly collapsed: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly sorting: {
                            readonly title: "Sorting";
                            readonly required: readonly ["fields"];
                            readonly type: "object";
                            readonly properties: {
                                readonly fields: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "Include an array of fields to sort by.\\\n \\\n You can sort by the same fields available when [filtering a view](doc:filter-views).";
                                };
                            };
                        };
                        readonly filters: {
                            readonly title: "Filters";
                            readonly required: readonly ["op", "fields", "search", "show_closed"];
                            readonly type: "object";
                            readonly properties: {
                                readonly op: {
                                    readonly type: "string";
                                    readonly description: "The available operator (`op``) values are `AND`` and `OR``.";
                                };
                                readonly fields: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "View the list of [fields available](doc:filter-views) to filter by.";
                                };
                                readonly search: {
                                    readonly type: "string";
                                };
                                readonly show_closed: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly columns: {
                            readonly title: "Columns";
                            readonly description: "Custom Fields added to a view at the Everything level will be added to all tasks in your Workspace. Once Custom Fields are added to one of these views, you cannot move it to another level of the Hierarchy.";
                            readonly required: readonly ["fields"];
                            readonly type: "object";
                            readonly properties: {
                                readonly fields: {
                                    readonly description: "Custom Fields require the `_cf` prefix and must be formatted as a JSON object.";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly team_sidebar: {
                            readonly title: "TeamSidebar";
                            readonly required: readonly ["assignees", "assigned_comments", "unassigned_tasks"];
                            readonly type: "object";
                            readonly properties: {
                                readonly assignees: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly assigned_comments: {
                                    readonly type: "boolean";
                                };
                                readonly unassigned_tasks: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly settings: {
                            readonly title: "Settings";
                            readonly required: readonly ["show_task_locations", "show_subtasks", "show_subtask_parent_names", "show_closed_subtasks", "show_assignees", "show_images", "collapse_empty_columns", "me_comments", "me_subtasks", "me_checklists"];
                            readonly type: "object";
                            readonly properties: {
                                readonly show_task_locations: {
                                    readonly type: "boolean";
                                };
                                readonly show_subtasks: {
                                    readonly description: "Acceptable values are `1`, `2`, or `3`, which show subtasks separate, expanded, or collapsed.";
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly show_subtask_parent_names: {
                                    readonly type: "boolean";
                                };
                                readonly show_closed_subtasks: {
                                    readonly type: "boolean";
                                };
                                readonly show_assignees: {
                                    readonly type: "boolean";
                                };
                                readonly show_images: {
                                    readonly type: "boolean";
                                };
                                readonly collapse_empty_columns: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly me_comments: {
                                    readonly type: "boolean";
                                };
                                readonly me_subtasks: {
                                    readonly type: "boolean";
                                };
                                readonly me_checklists: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateFolderlessList: {
    readonly body: {
        readonly title: "CreateFolderlessListrequest";
        readonly required: readonly ["name"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["New List Name"];
            };
            readonly content: {
                readonly type: "string";
                readonly examples: readonly ["New List Content"];
            };
            readonly due_date: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
                readonly examples: readonly [1567780450202];
            };
            readonly due_date_time: {
                readonly type: "boolean";
            };
            readonly priority: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [1];
            };
            readonly assignee: {
                readonly description: "Include a `user_id` to add a List owner.";
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [183];
            };
            readonly status: {
                readonly description: "**Status** refers to the List color rather than the task Statuses available in the List.";
                readonly type: "string";
                readonly examples: readonly ["red"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly space_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [789];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["space_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateFolderlessListresponse";
            readonly required: readonly ["id", "name", "orderindex", "content", "status", "priority", "assignee", "task_count", "due_date", "due_date_time", "start_date", "start_date_time", "folder", "space", "statuses", "inbound_address"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly orderindex: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                };
                readonly content: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly title: "Status5";
                    readonly required: readonly ["status", "color", "hide_label"];
                    readonly type: "object";
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly hide_label: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly priority: {
                    readonly title: "Priority1";
                    readonly required: readonly ["priority", "color"];
                    readonly type: "object";
                    readonly properties: {
                        readonly priority: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                    };
                };
                readonly assignee: {
                    readonly title: "Assignee3";
                    readonly required: readonly ["id", "color", "username", "initials", "profilePicture"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly username: {
                            readonly type: "string";
                        };
                        readonly initials: {
                            readonly type: "string";
                        };
                        readonly profilePicture: {
                            readonly type: "string";
                        };
                    };
                };
                readonly task_count: {
                    readonly type: readonly ["string", "null"];
                };
                readonly due_date: {
                    readonly type: "string";
                };
                readonly due_date_time: {
                    readonly type: "boolean";
                };
                readonly start_date: {
                    readonly type: readonly ["string", "null"];
                };
                readonly start_date_time: {
                    readonly type: readonly ["string", "null"];
                };
                readonly folder: {
                    readonly title: "Folder3";
                    readonly required: readonly ["id", "name", "hidden", "access"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly hidden: {
                            readonly type: "boolean";
                        };
                        readonly access: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly space: {
                    readonly title: "Space2";
                    readonly required: readonly ["id", "name", "access"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly statuses: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Status";
                        readonly required: readonly ["status", "color", "orderindex", "type"];
                        readonly type: "object";
                        readonly properties: {
                            readonly status: {
                                readonly type: "string";
                            };
                            readonly color: {
                                readonly type: "string";
                            };
                            readonly orderindex: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
                readonly inbound_address: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateGoal: {
    readonly body: {
        readonly title: "CreateGoalrequest";
        readonly required: readonly ["name", "due_date", "description", "multiple_owners", "owners", "color"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["Goal Name"];
            };
            readonly due_date: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
                readonly examples: readonly [1568036964079];
            };
            readonly description: {
                readonly type: "string";
                readonly examples: readonly ["Goal Description"];
            };
            readonly multiple_owners: {
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly owners: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly examples: readonly [183];
                };
                readonly description: "Array of user IDs.";
            };
            readonly color: {
                readonly type: "string";
                readonly examples: readonly ["#32a852"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateGoalresponse";
            readonly required: readonly ["goal"];
            readonly type: "object";
            readonly properties: {
                readonly goal: {
                    readonly title: "Goal";
                    readonly required: readonly ["id", "name", "team_id", "date_created", "start_date", "due_date", "description", "private", "archived", "creator", "color", "pretty_id", "multiple_owners", "folder_id", "members", "owners", "key_results", "percent_completed", "history", "pretty_url"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly team_id: {
                            readonly type: "string";
                        };
                        readonly date_created: {
                            readonly type: "string";
                        };
                        readonly start_date: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly due_date: {
                            readonly type: "string";
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly private: {
                            readonly type: "boolean";
                        };
                        readonly archived: {
                            readonly type: "boolean";
                        };
                        readonly creator: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly pretty_id: {
                            readonly type: "string";
                        };
                        readonly multiple_owners: {
                            readonly type: "boolean";
                        };
                        readonly folder_id: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly members: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly owners: {
                            readonly type: "array";
                            readonly items: {
                                readonly title: "Owner";
                                readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly description: "";
                        };
                        readonly key_results: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly percent_completed: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly history: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly pretty_url: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateKeyResult: {
    readonly body: {
        readonly title: "CreateKeyResultrequest";
        readonly required: readonly ["name", "owners", "type", "steps_start", "steps_end", "unit", "task_ids", "list_ids"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["New Key Result Name"];
            };
            readonly owners: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly examples: readonly [183];
                };
                readonly description: "";
            };
            readonly type: {
                readonly description: "Target (key result) types include: `number`, `currency`, `boolean`, `percentage`, or `automatic`.";
                readonly type: "string";
                readonly examples: readonly ["number"];
            };
            readonly steps_start: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
            };
            readonly steps_end: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [10];
            };
            readonly unit: {
                readonly type: "string";
                readonly examples: readonly ["km"];
            };
            readonly task_ids: {
                readonly description: "Enter an array of task IDs to link this target with one or more tasks.";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly list_ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
                readonly description: "Enter an array of List IDs to link this target with one or more Lists.";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly goal_id: {
                    readonly type: "string";
                    readonly examples: readonly ["e53a033c"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "900e-462d-a849-4a216b06d930 (uuid)";
                };
            };
            readonly required: readonly ["goal_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateKeyResultresponse";
            readonly required: readonly ["key_result"];
            readonly type: "object";
            readonly properties: {
                readonly key_result: {
                    readonly title: "KeyResult";
                    readonly required: readonly ["id", "goal_id", "name", "type", "unit", "creator", "date_created", "goal_pretty_id", "percent_completed", "completed", "task_ids", "subcategory_ids", "owners", "last_action"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly goal_id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                        readonly unit: {
                            readonly type: "string";
                        };
                        readonly creator: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly date_created: {
                            readonly type: "string";
                        };
                        readonly goal_pretty_id: {
                            readonly type: "string";
                        };
                        readonly percent_completed: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly completed: {
                            readonly type: "boolean";
                        };
                        readonly task_ids: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly subcategory_ids: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly owners: {
                            readonly type: "array";
                            readonly items: {
                                readonly title: "Owner";
                                readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly description: "";
                        };
                        readonly last_action: {
                            readonly title: "LastAction";
                            readonly required: readonly ["id", "key_result_id", "userid", "date_modified", "steps_taken", "note", "steps_before", "steps_current"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly key_result_id: {
                                    readonly type: "string";
                                };
                                readonly userid: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly date_modified: {
                                    readonly type: "string";
                                };
                                readonly steps_taken: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly note: {
                                    readonly type: "string";
                                };
                                readonly steps_before: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly steps_current: {
                                    readonly type: readonly ["string", "null"];
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateList: {
    readonly body: {
        readonly title: "CreateListrequest";
        readonly required: readonly ["name"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["New List Name"];
            };
            readonly content: {
                readonly type: "string";
                readonly examples: readonly ["New List Content"];
            };
            readonly due_date: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
                readonly examples: readonly [1567780450202];
            };
            readonly due_date_time: {
                readonly type: "boolean";
            };
            readonly priority: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [1];
            };
            readonly assignee: {
                readonly description: "Include a `user_id` to assign this List.";
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [183];
            };
            readonly status: {
                readonly description: "**Status** refers to the List color rather than the task Statuses available in the List.";
                readonly type: "string";
                readonly examples: readonly ["red"];
            };
            readonly include_markdown_description: {
                readonly description: "To return List descriptions in Markdown format, use `?include_markdown_description=true`.";
                readonly type: "boolean";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly folder_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [456];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["folder_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateListresponse";
            readonly required: readonly ["id", "name", "orderindex", "content", "status", "priority", "assignee", "task_count", "due_date", "due_date_time", "start_date", "start_date_time", "folder", "space", "statuses", "inbound_address"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly orderindex: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                };
                readonly content: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly title: "Status5";
                    readonly required: readonly ["status", "color", "hide_label"];
                    readonly type: "object";
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly hide_label: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly priority: {
                    readonly title: "Priority1";
                    readonly required: readonly ["priority", "color"];
                    readonly type: "object";
                    readonly properties: {
                        readonly priority: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                    };
                };
                readonly assignee: {
                    readonly title: "Assignee3";
                    readonly required: readonly ["id", "color", "username", "initials", "profilePicture"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly username: {
                            readonly type: "string";
                        };
                        readonly initials: {
                            readonly type: "string";
                        };
                        readonly profilePicture: {
                            readonly type: "string";
                        };
                    };
                };
                readonly task_count: {
                    readonly type: readonly ["string", "null"];
                };
                readonly due_date: {
                    readonly type: "string";
                };
                readonly due_date_time: {
                    readonly type: "boolean";
                };
                readonly start_date: {
                    readonly type: readonly ["string", "null"];
                };
                readonly start_date_time: {
                    readonly type: readonly ["string", "null"];
                };
                readonly folder: {
                    readonly title: "Folder3";
                    readonly required: readonly ["id", "name", "hidden", "access"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly hidden: {
                            readonly type: "boolean";
                        };
                        readonly access: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly space: {
                    readonly title: "Space2";
                    readonly required: readonly ["id", "name", "access"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly statuses: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Status";
                        readonly required: readonly ["status", "color", "orderindex", "type"];
                        readonly type: "object";
                        readonly properties: {
                            readonly status: {
                                readonly type: "string";
                            };
                            readonly color: {
                                readonly type: "string";
                            };
                            readonly orderindex: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
                readonly inbound_address: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateListComment: {
    readonly body: {
        readonly title: "CreateListCommentrequest";
        readonly required: readonly ["comment_text", "assignee", "notify_all"];
        readonly type: "object";
        readonly properties: {
            readonly comment_text: {
                readonly type: "string";
                readonly examples: readonly ["List comment content"];
            };
            readonly assignee: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [183];
            };
            readonly notify_all: {
                readonly description: "If `notify_all` is true, notifications will be sent to everyone including the creator of the comment.";
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly list_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [124];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["list_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateListCommentresponse";
            readonly required: readonly ["id", "hist_id", "date"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly hist_id: {
                    readonly type: "string";
                };
                readonly date: {
                    readonly type: "integer";
                    readonly contentEncoding: "int64";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateListView: {
    readonly body: {
        readonly title: "CreateListViewrequest";
        readonly required: readonly ["name", "type", "grouping", "divide", "sorting", "filters", "columns", "team_sidebar", "settings"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["New List View Name"];
            };
            readonly type: {
                readonly type: "string";
                readonly description: "The type of view to create. Options include: `list`, `board`, `calendar`, `table`, `timeline`, `workload`, `activity`, `map`, `conversation`, or `gantt`.";
                readonly examples: readonly ["list"];
            };
            readonly grouping: {
                readonly title: "Grouping";
                readonly required: readonly ["field", "dir", "collapsed", "ignore"];
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                        readonly description: "Set the field to group by.\\\n \\\nOptions include: `none`, `status`, `priority`, `assignee`, `tag`, or `dueDate`.";
                        readonly examples: readonly ["status"];
                    };
                    readonly dir: {
                        readonly description: "Set a group sort order using `1` or `-1`.\\\n \\\nFor example, use `1`show tasks with urgent priority at the top of your view, and tasks with no priority at the bottom.\\\n \\\nUse `-1` to reverse the order to show tasks with no priority at the top of your view.";
                        readonly type: "integer";
                        readonly contentEncoding: "int32";
                        readonly examples: readonly [1];
                    };
                    readonly collapsed: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "";
                    };
                    readonly ignore: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly divide: {
                readonly title: "Divide";
                readonly required: readonly ["collapsed"];
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "null";
                    };
                    readonly dir: {
                        readonly type: "null";
                    };
                    readonly collapsed: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly sorting: {
                readonly title: "Sorting";
                readonly required: readonly ["fields"];
                readonly type: "object";
                readonly properties: {
                    readonly fields: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "Include an array of fields to sort by.\\\n \\\n You can sort by the same fields available when [filtering a view](doc:filter-views).";
                    };
                };
            };
            readonly filters: {
                readonly title: "Filters";
                readonly required: readonly ["op", "fields", "search", "show_closed"];
                readonly type: "object";
                readonly properties: {
                    readonly op: {
                        readonly type: "string";
                        readonly description: "The available operator (`op``) values are `AND`` and `OR``.";
                        readonly examples: readonly ["AND"];
                    };
                    readonly fields: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "View the list of [fields available](doc:filter-views) to filter by.";
                    };
                    readonly search: {
                        readonly type: "string";
                    };
                    readonly show_closed: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly columns: {
                readonly title: "Columns";
                readonly description: "Custom Fields added to a view at the Everything level will be added to all tasks in your Workspace. Once Custom Fields are added to one of these views, you cannot move it to another level of the Hierarchy.";
                readonly required: readonly ["fields"];
                readonly type: "object";
                readonly properties: {
                    readonly fields: {
                        readonly description: "Custom Fields require the `_cf` prefix and must be formatted as a JSON object.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly team_sidebar: {
                readonly title: "TeamSidebar";
                readonly required: readonly ["assignees", "assigned_comments", "unassigned_tasks"];
                readonly type: "object";
                readonly properties: {
                    readonly assignees: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "";
                    };
                    readonly assigned_comments: {
                        readonly type: "boolean";
                    };
                    readonly unassigned_tasks: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly settings: {
                readonly title: "Settings";
                readonly required: readonly ["show_task_locations", "show_subtasks", "show_subtask_parent_names", "show_closed_subtasks", "show_assignees", "show_images", "collapse_empty_columns", "me_comments", "me_subtasks", "me_checklists"];
                readonly type: "object";
                readonly properties: {
                    readonly show_task_locations: {
                        readonly type: "boolean";
                    };
                    readonly show_subtasks: {
                        readonly description: "Acceptable values are `1`, `2`, or `3`, which show subtasks separate, expanded, or collapsed.";
                        readonly type: "integer";
                        readonly contentEncoding: "int32";
                        readonly examples: readonly [3];
                    };
                    readonly show_subtask_parent_names: {
                        readonly type: "boolean";
                    };
                    readonly show_closed_subtasks: {
                        readonly type: "boolean";
                    };
                    readonly show_assignees: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly show_images: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly collapse_empty_columns: {
                        readonly type: readonly ["string", "null"];
                    };
                    readonly me_comments: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly me_subtasks: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly me_checklists: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly list_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [124];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["list_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateListViewresponse";
            readonly required: readonly ["view"];
            readonly type: "object";
            readonly properties: {
                readonly view: {
                    readonly title: "View";
                    readonly required: readonly ["id", "name", "type", "parent", "grouping", "divide", "sorting", "filters", "columns", "team_sidebar", "settings"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                        readonly parent: {
                            readonly title: "Parent";
                            readonly description: "The parent parameter specifies where the view is located in the ClickUp Hierarchy. Both `id` and `type` are required. \\\n \\\nThe `id` is the id of the Workspace, Space, Folder, or List where the view is located. \\\n \\\nThe `type` value indciates the level of the Hierarchy where the view is located.";
                            readonly required: readonly ["id", "type"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "The id of the Workspace, Space, Folder, or List where the view is located.";
                                };
                                readonly type: {
                                    readonly type: "integer";
                                    readonly description: "The level of the Hierarchy where the view is created. \\\n \\\nOptions include: \\\n \\\nWorkspace (Everything Level): `7` \\\n \\\nSpace: `4` \\\n \\\nFolder: `5` \\\n \\\nList: `6`";
                                    readonly contentEncoding: "int32";
                                };
                            };
                        };
                        readonly grouping: {
                            readonly title: "Grouping";
                            readonly required: readonly ["field", "dir", "collapsed", "ignore"];
                            readonly type: "object";
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly description: "Set the field to group by.\\\n \\\nOptions include: `none`, `status`, `priority`, `assignee`, `tag`, or `dueDate`.";
                                };
                                readonly dir: {
                                    readonly description: "Set a group sort order using `1` or `-1`.\\\n \\\nFor example, use `1`show tasks with urgent priority at the top of your view, and tasks with no priority at the bottom.\\\n \\\nUse `-1` to reverse the order to show tasks with no priority at the top of your view.";
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly collapsed: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly ignore: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly divide: {
                            readonly title: "Divide";
                            readonly required: readonly ["collapsed"];
                            readonly type: "object";
                            readonly properties: {
                                readonly field: {
                                    readonly type: "null";
                                };
                                readonly dir: {
                                    readonly type: "null";
                                };
                                readonly collapsed: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly sorting: {
                            readonly title: "Sorting";
                            readonly required: readonly ["fields"];
                            readonly type: "object";
                            readonly properties: {
                                readonly fields: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "Include an array of fields to sort by.\\\n \\\n You can sort by the same fields available when [filtering a view](doc:filter-views).";
                                };
                            };
                        };
                        readonly filters: {
                            readonly title: "Filters";
                            readonly required: readonly ["op", "fields", "search", "show_closed"];
                            readonly type: "object";
                            readonly properties: {
                                readonly op: {
                                    readonly type: "string";
                                    readonly description: "The available operator (`op``) values are `AND`` and `OR``.";
                                };
                                readonly fields: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "View the list of [fields available](doc:filter-views) to filter by.";
                                };
                                readonly search: {
                                    readonly type: "string";
                                };
                                readonly show_closed: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly columns: {
                            readonly title: "Columns";
                            readonly description: "Custom Fields added to a view at the Everything level will be added to all tasks in your Workspace. Once Custom Fields are added to one of these views, you cannot move it to another level of the Hierarchy.";
                            readonly required: readonly ["fields"];
                            readonly type: "object";
                            readonly properties: {
                                readonly fields: {
                                    readonly description: "Custom Fields require the `_cf` prefix and must be formatted as a JSON object.";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly team_sidebar: {
                            readonly title: "TeamSidebar";
                            readonly required: readonly ["assignees", "assigned_comments", "unassigned_tasks"];
                            readonly type: "object";
                            readonly properties: {
                                readonly assignees: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly assigned_comments: {
                                    readonly type: "boolean";
                                };
                                readonly unassigned_tasks: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly settings: {
                            readonly title: "Settings";
                            readonly required: readonly ["show_task_locations", "show_subtasks", "show_subtask_parent_names", "show_closed_subtasks", "show_assignees", "show_images", "collapse_empty_columns", "me_comments", "me_subtasks", "me_checklists"];
                            readonly type: "object";
                            readonly properties: {
                                readonly show_task_locations: {
                                    readonly type: "boolean";
                                };
                                readonly show_subtasks: {
                                    readonly description: "Acceptable values are `1`, `2`, or `3`, which show subtasks separate, expanded, or collapsed.";
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly show_subtask_parent_names: {
                                    readonly type: "boolean";
                                };
                                readonly show_closed_subtasks: {
                                    readonly type: "boolean";
                                };
                                readonly show_assignees: {
                                    readonly type: "boolean";
                                };
                                readonly show_images: {
                                    readonly type: "boolean";
                                };
                                readonly collapse_empty_columns: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly me_comments: {
                                    readonly type: "boolean";
                                };
                                readonly me_subtasks: {
                                    readonly type: "boolean";
                                };
                                readonly me_checklists: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreatePage: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly parent_page_id: {
                readonly type: "string";
                readonly description: "The ID of the parent page. If this is a root page in the Doc, `parent_page_id` will not be returned.";
                readonly default: any;
            };
            readonly name: {
                readonly type: "string";
                readonly description: "The name of the new page.";
            };
            readonly sub_title: {
                readonly type: "string";
                readonly description: "The subtitle of the new page.";
                readonly default: any;
            };
            readonly content: {
                readonly type: "string";
                readonly description: "The content of the new page.";
            };
            readonly content_format: {
                readonly type: "string";
                readonly description: "The format the page content is in. For example, `text/md` for markdown or `text/plain` for plain.";
                readonly default: "text/md";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly workspaceId: {
                    readonly type: "number";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the Workspace.";
                };
                readonly docId: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the Doc.";
                };
            };
            readonly required: readonly ["workspaceId", "docId"];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly doc_id: {
                    readonly type: "string";
                };
                readonly parent_page_id: {
                    readonly type: "string";
                };
                readonly workspace_id: {
                    readonly type: "number";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly pages: {
                    readonly type: "array";
                    readonly description: "More nested documents with the same object structure.";
                    readonly items: {};
                };
                readonly sub_title: {
                    readonly type: "string";
                };
                readonly date_created: {
                    readonly type: "number";
                };
                readonly date_updated: {
                    readonly type: "number";
                };
                readonly content: {
                    readonly type: "string";
                };
                readonly avatar: {
                    readonly type: "object";
                    readonly properties: {
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly value: {
                            readonly type: "string";
                        };
                        readonly source: {
                            readonly type: "string";
                        };
                    };
                };
                readonly creator_id: {
                    readonly type: "number";
                };
                readonly deleted: {
                    readonly type: "boolean";
                };
                readonly deleted_by: {
                    readonly type: "number";
                };
                readonly date_deleted: {
                    readonly type: "number";
                };
                readonly date_edited: {
                    readonly type: "number";
                };
                readonly edited_by: {
                    readonly type: "number";
                };
                readonly archived: {
                    readonly type: "boolean";
                };
                readonly archived_by: {
                    readonly type: "number";
                };
                readonly date_archived: {
                    readonly type: "number";
                };
                readonly authors: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "number";
                    };
                };
                readonly contributors: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "number";
                    };
                };
                readonly cover: {
                    readonly type: "object";
                    readonly properties: {
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly image_url: {
                            readonly type: "string";
                        };
                        readonly position: {
                            readonly type: "object";
                            readonly properties: {
                                readonly x: {
                                    readonly type: "number";
                                };
                                readonly y: {
                                    readonly type: "number";
                                };
                            };
                            readonly required: readonly ["x", "y"];
                        };
                    };
                };
                readonly protected: {
                    readonly type: "boolean";
                };
                readonly protected_by: {
                    readonly type: "number";
                };
                readonly protected_note: {
                    readonly type: "string";
                };
                readonly presentation_details: {
                    readonly type: "object";
                    readonly properties: {
                        readonly font: {
                            readonly type: "string";
                        };
                        readonly font_size: {
                            readonly type: "number";
                        };
                        readonly line_height: {
                            readonly type: "number";
                        };
                        readonly page_width: {
                            readonly type: "number";
                        };
                        readonly paragraph_spacing: {
                            readonly type: "number";
                        };
                        readonly show_author_header: {
                            readonly type: "boolean";
                        };
                        readonly show_contributor_header: {
                            readonly type: "boolean";
                        };
                        readonly show_cover_header: {
                            readonly type: "boolean";
                        };
                        readonly show_date_header: {
                            readonly type: "boolean";
                        };
                        readonly show_page_outline: {
                            readonly type: "boolean";
                        };
                        readonly show_sub_pages: {
                            readonly type: "boolean";
                        };
                        readonly sub_page_size: {
                            readonly type: "string";
                        };
                        readonly show_sub_title_header: {
                            readonly type: "boolean";
                        };
                        readonly show_title_icon_header: {
                            readonly type: "boolean";
                        };
                        readonly show_relationships: {
                            readonly type: "boolean";
                        };
                        readonly show_relationships_compact: {
                            readonly type: "boolean";
                        };
                        readonly show_sub_pages_author: {
                            readonly type: "boolean";
                        };
                        readonly show_sub_pages_thumbnail: {
                            readonly type: "boolean";
                        };
                        readonly show_sub_pages_compact: {
                            readonly type: "boolean";
                        };
                        readonly sub_pages_style: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly required: readonly ["id", "doc_id", "workspace_id", "name", "date_created", "content", "creator_id", "authors"];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateSpace: {
    readonly body: {
        readonly title: "CreateSpacerequest";
        readonly required: readonly ["name", "multiple_assignees", "features"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["New Space Name"];
            };
            readonly multiple_assignees: {
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly features: {
                readonly title: "Features";
                readonly required: readonly ["due_dates", "time_tracking", "tags", "time_estimates", "checklists", "custom_fields", "remap_dependencies", "dependency_warning", "portfolios"];
                readonly type: "object";
                readonly properties: {
                    readonly due_dates: {
                        readonly title: "DueDates";
                        readonly required: readonly ["enabled", "start_date", "remap_due_dates", "remap_closed_due_date"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                                readonly examples: readonly [true];
                            };
                            readonly start_date: {
                                readonly type: "boolean";
                            };
                            readonly remap_due_dates: {
                                readonly type: "boolean";
                                readonly examples: readonly [true];
                            };
                            readonly remap_closed_due_date: {
                                readonly type: "boolean";
                            };
                        };
                    };
                    readonly time_tracking: {
                        readonly title: "TimeTracking";
                        readonly required: readonly ["enabled"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                            };
                        };
                    };
                    readonly tags: {
                        readonly title: "Tags";
                        readonly required: readonly ["enabled"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                                readonly examples: readonly [true];
                            };
                        };
                    };
                    readonly time_estimates: {
                        readonly title: "TimeEstimates";
                        readonly required: readonly ["enabled"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                                readonly examples: readonly [true];
                            };
                        };
                    };
                    readonly checklists: {
                        readonly title: "Checklists";
                        readonly required: readonly ["enabled"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                                readonly examples: readonly [true];
                            };
                        };
                    };
                    readonly custom_fields: {
                        readonly title: "CustomFields";
                        readonly required: readonly ["enabled"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                                readonly examples: readonly [true];
                            };
                        };
                    };
                    readonly remap_dependencies: {
                        readonly title: "RemapDependencies";
                        readonly required: readonly ["enabled"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                                readonly examples: readonly [true];
                            };
                        };
                    };
                    readonly dependency_warning: {
                        readonly title: "DependencyWarning";
                        readonly required: readonly ["enabled"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                                readonly examples: readonly [true];
                            };
                        };
                    };
                    readonly portfolios: {
                        readonly title: "Portfolios";
                        readonly required: readonly ["enabled"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                                readonly examples: readonly [true];
                            };
                        };
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateSpaceresponse";
            readonly required: readonly ["id", "name", "private", "statuses", "multiple_assignees", "features", "archived"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly private: {
                    readonly type: "boolean";
                };
                readonly statuses: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Status15";
                        readonly required: readonly ["id", "status", "type", "orderindex", "color"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly orderindex: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly color: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
                readonly multiple_assignees: {
                    readonly type: "boolean";
                };
                readonly features: {
                    readonly title: "Features1";
                    readonly required: readonly ["due_dates", "sprints", "points", "custom_items", "tags", "time_estimates", "checklists", "zoom", "milestones", "custom_fields", "remap_dependencies", "dependency_warning", "multiple_assignees", "portfolios", "emails"];
                    readonly type: "object";
                    readonly properties: {
                        readonly due_dates: {
                            readonly title: "DueDates";
                            readonly required: readonly ["enabled", "start_date", "remap_due_dates", "remap_closed_due_date"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                                readonly start_date: {
                                    readonly type: "boolean";
                                };
                                readonly remap_due_dates: {
                                    readonly type: "boolean";
                                };
                                readonly remap_closed_due_date: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly sprints: {
                            readonly title: "Sprints";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly points: {
                            readonly title: "Points";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly custom_items: {
                            readonly title: "CustomItems";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly tags: {
                            readonly title: "Tags";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly time_estimates: {
                            readonly title: "TimeEstimates";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly checklists: {
                            readonly title: "Checklists";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly zoom: {
                            readonly title: "Zoom";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly milestones: {
                            readonly title: "Milestones";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly custom_fields: {
                            readonly title: "CustomFields";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly remap_dependencies: {
                            readonly title: "RemapDependencies";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly dependency_warning: {
                            readonly title: "DependencyWarning";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly multiple_assignees: {
                            readonly title: "MultipleAssignees";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly portfolios: {
                            readonly title: "Portfolios";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly emails: {
                            readonly title: "Emails";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                    };
                };
                readonly archived: {
                    readonly type: "boolean";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateSpaceListFromTemplate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["name"];
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Name of the new List";
            };
            readonly options: {
                readonly options: {
                    readonly type: "object";
                    readonly description: "Options for creating the List";
                    readonly properties: {
                        readonly return_immediately: {
                            readonly type: "boolean";
                            readonly description: "Flag if newly created List should be returned without waiting for all nested assets to be applied";
                        };
                        readonly content: {
                            readonly type: "string";
                            readonly description: "List description";
                        };
                        readonly time_estimate: {
                            readonly type: "number";
                            readonly description: "Include time (hours, minutes and seconds)";
                        };
                        readonly automation: {
                            readonly type: "boolean";
                            readonly description: "Import automation settings";
                        };
                        readonly include_views: {
                            readonly type: "boolean";
                            readonly description: "Import views";
                        };
                        readonly old_due_date: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' due dates";
                        };
                        readonly old_start_date: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' start dates";
                        };
                        readonly old_followers: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' watchers";
                        };
                        readonly comment_attachments: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' comment attachments";
                        };
                        readonly recur_settings: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' recurring settings";
                        };
                        readonly old_tags: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' tags";
                        };
                        readonly old_statuses: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' status settings";
                        };
                        readonly subtasks: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' subtasks";
                        };
                        readonly custom_type: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' task types";
                        };
                        readonly old_assignees: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' assignees";
                        };
                        readonly attachments: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' attachments";
                        };
                        readonly comment: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' comments";
                        };
                        readonly old_status: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' current statuses";
                        };
                        readonly external_dependencies: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' external dependencies";
                        };
                        readonly internal_dependencies: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' internal dependencies";
                        };
                        readonly priority: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' priorities";
                        };
                        readonly custom_fields: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' Custom Fields";
                        };
                        readonly old_checklists: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' checklists";
                        };
                        readonly relationships: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' relationships";
                        };
                        readonly old_subtask_assignees: {
                            readonly type: "boolean";
                            readonly description: "Import tasks' subtask assignees";
                        };
                        readonly start_date: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "Project start date for remapping dates";
                        };
                        readonly due_date: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "Project due date for remapping dates";
                        };
                        readonly remap_start_date: {
                            readonly type: "boolean";
                            readonly description: "Remap start dates";
                        };
                        readonly skip_weekends: {
                            readonly type: "boolean";
                            readonly description: "Skip weekends when remapping dates";
                        };
                        readonly archived: {
                            readonly type: "integer";
                            readonly enum: readonly [1, 2, any];
                            readonly description: "Include archived tasks";
                        };
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly space_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "ID of the Space where the List will be created";
                };
                readonly template_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "ID of the template to use";
                };
            };
            readonly required: readonly ["space_id", "template_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly description: "Response object returned when a new List is created from a template in a Folder or Space.";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier of the newly created List";
                    readonly examples: readonly ["901107394085"];
                };
                readonly list: {
                    readonly type: "object";
                    readonly description: "Detailed information about the created List";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique identifier of the List (matches parent id)";
                            readonly examples: readonly ["901107394085"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Display name of the List";
                            readonly examples: readonly ["API Folder in Space"];
                        };
                        readonly deleted: {
                            readonly type: "boolean";
                            readonly description: "Indicates if the List has been marked as deleted";
                            readonly examples: readonly [true];
                        };
                        readonly orderindex: {
                            readonly type: "integer";
                            readonly description: "Position of the List relative to other Lists in the same container";
                            readonly examples: readonly [0];
                        };
                        readonly priority: {
                            readonly type: readonly ["string", "null"];
                            readonly description: "Priority level of the List, if applicable";
                        };
                        readonly assignee: {
                            readonly type: readonly ["string", "null"];
                            readonly description: "Default assignee for the List, if applicable";
                        };
                        readonly due_date: {
                            readonly type: readonly ["string", "null"];
                            readonly format: "date-time";
                            readonly description: "Default due date for tasks in the List";
                        };
                        readonly start_date: {
                            readonly type: readonly ["string", "null"];
                            readonly format: "date-time";
                            readonly description: "Default start date for tasks in the List";
                        };
                        readonly folder: {
                            readonly type: "object";
                            readonly description: "Information about the parent Folder containing this List, if applicable";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "Unique identifier of the parent Folder";
                                    readonly examples: readonly ["90114317916"];
                                };
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "Display name of the parent Folder";
                                    readonly examples: readonly ["hidden"];
                                };
                                readonly hidden: {
                                    readonly type: "boolean";
                                    readonly description: "Indicates if the Folder is hidden from standard views";
                                    readonly examples: readonly [true];
                                };
                                readonly access: {
                                    readonly type: "boolean";
                                    readonly description: "Indicates if the current user has access to this Folder";
                                    readonly examples: readonly [true];
                                };
                            };
                        };
                        readonly space: {
                            readonly type: "object";
                            readonly description: "Information about the Workspace Space containing this List";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "Unique identifier of the Space";
                                    readonly examples: readonly ["90112667046"];
                                };
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "Display name of the Space";
                                    readonly examples: readonly ["API Test Space"];
                                };
                                readonly access: {
                                    readonly type: "boolean";
                                    readonly description: "Indicates if the current user has access to this Space";
                                    readonly examples: readonly [true];
                                };
                            };
                        };
                        readonly inbound_address: {
                            readonly type: "string";
                            readonly description: "Email address that can be used to create tasks in this List via email";
                            readonly examples: readonly ["abc-list@tasks.clickup.com"];
                        };
                        readonly archived: {
                            readonly type: "boolean";
                            readonly description: "Indicates if the List is archived";
                            readonly examples: readonly [false];
                        };
                        readonly override_statuses: {
                            readonly type: "boolean";
                            readonly description: "Indicates if this List uses custom statuses instead of Space default statuses";
                            readonly examples: readonly [true];
                        };
                        readonly statuses: {
                            readonly type: "array";
                            readonly description: "List of available statuses for tasks in this List";
                            readonly items: {
                                readonly type: "object";
                                readonly description: "Status configuration object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Unique identifier for the status";
                                        readonly examples: readonly ["sc901107394085_DCnaeiSB"];
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                        readonly description: "Display name of the status";
                                        readonly examples: readonly ["to do"];
                                    };
                                    readonly orderindex: {
                                        readonly type: "integer";
                                        readonly description: "Position of this status in the status list";
                                        readonly examples: readonly [0];
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                        readonly description: "Color code associated with this status";
                                        readonly examples: readonly ["#87909e"];
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "Category of the status (e.g., open, closed, in progress)";
                                        readonly examples: readonly ["open"];
                                    };
                                    readonly status_group: {
                                        readonly type: "string";
                                        readonly description: "TODO - Identifier for grouping related statuses";
                                        readonly examples: readonly ["subcat_901107394085"];
                                    };
                                };
                            };
                        };
                        readonly permission_level: {
                            readonly type: "string";
                            readonly description: "Access level the current user has for this List (e.g., create, edit, view)";
                            readonly examples: readonly ["create"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
        readonly "400": {
            readonly type: "object";
            readonly properties: {
                readonly error: {
                    readonly type: "string";
                    readonly examples: readonly ["Name is required"];
                };
                readonly ECODE: {
                    readonly type: "string";
                    readonly examples: readonly ["OAUTH_117"];
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateSpaceTag: {
    readonly body: {
        readonly title: "CreateSpaceTagrequest";
        readonly required: readonly ["tag"];
        readonly type: "object";
        readonly properties: {
            readonly tag: {
                readonly title: "Tag";
                readonly required: readonly ["name", "tag_fg", "tag_bg"];
                readonly type: "object";
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                        readonly examples: readonly ["Tag Name"];
                    };
                    readonly tag_fg: {
                        readonly type: "string";
                        readonly examples: readonly ["#000000"];
                    };
                    readonly tag_bg: {
                        readonly type: "string";
                        readonly examples: readonly ["#000000"];
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly space_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [512];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["space_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateSpaceView: {
    readonly body: {
        readonly title: "CreateSpaceViewrequest";
        readonly required: readonly ["name", "type", "grouping", "divide", "sorting", "filters", "columns", "team_sidebar", "settings"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["New Space View Name"];
            };
            readonly type: {
                readonly type: "string";
                readonly description: "The type of view to create. Options include: `list`, `board`, `calendar`, `table`, `timeline`, `workload`, `activity`, `map`, `conversation`, or `gantt`.";
                readonly examples: readonly ["list"];
            };
            readonly grouping: {
                readonly title: "Grouping";
                readonly required: readonly ["field", "dir", "collapsed", "ignore"];
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                        readonly description: "Set the field to group by.\\\n \\\nOptions include: `none`, `status`, `priority`, `assignee`, `tag`, or `dueDate`.";
                        readonly examples: readonly ["status"];
                    };
                    readonly dir: {
                        readonly description: "Set a group sort order using `1` or `-1`.\\\n \\\nFor example, use `1`show tasks with urgent priority at the top of your view, and tasks with no priority at the bottom.\\\n \\\nUse `-1` to reverse the order to show tasks with no priority at the top of your view.";
                        readonly type: "integer";
                        readonly contentEncoding: "int32";
                        readonly examples: readonly [1];
                    };
                    readonly collapsed: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "";
                    };
                    readonly ignore: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly divide: {
                readonly title: "Divide";
                readonly required: readonly ["collapsed"];
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "null";
                    };
                    readonly dir: {
                        readonly type: "null";
                    };
                    readonly collapsed: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly sorting: {
                readonly title: "Sorting";
                readonly required: readonly ["fields"];
                readonly type: "object";
                readonly properties: {
                    readonly fields: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "Include an array of fields to sort by.\\\n \\\n You can sort by the same fields available when [filtering a view](doc:filter-views).";
                    };
                };
            };
            readonly filters: {
                readonly title: "Filters";
                readonly required: readonly ["op", "fields", "search", "show_closed"];
                readonly type: "object";
                readonly properties: {
                    readonly op: {
                        readonly type: "string";
                        readonly description: "The available operator (`op``) values are `AND`` and `OR``.";
                        readonly examples: readonly ["AND"];
                    };
                    readonly fields: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "View the list of [fields available](doc:filter-views) to filter by.";
                    };
                    readonly search: {
                        readonly type: "string";
                    };
                    readonly show_closed: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly columns: {
                readonly title: "Columns";
                readonly description: "Custom Fields added to a view at the Everything level will be added to all tasks in your Workspace. Once Custom Fields are added to one of these views, you cannot move it to another level of the Hierarchy.";
                readonly required: readonly ["fields"];
                readonly type: "object";
                readonly properties: {
                    readonly fields: {
                        readonly description: "Custom Fields require the `_cf` prefix and must be formatted as a JSON object.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly team_sidebar: {
                readonly title: "TeamSidebar";
                readonly required: readonly ["assignees", "assigned_comments", "unassigned_tasks"];
                readonly type: "object";
                readonly properties: {
                    readonly assignees: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "";
                    };
                    readonly assigned_comments: {
                        readonly type: "boolean";
                    };
                    readonly unassigned_tasks: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly settings: {
                readonly title: "Settings";
                readonly required: readonly ["show_task_locations", "show_subtasks", "show_subtask_parent_names", "show_closed_subtasks", "show_assignees", "show_images", "collapse_empty_columns", "me_comments", "me_subtasks", "me_checklists"];
                readonly type: "object";
                readonly properties: {
                    readonly show_task_locations: {
                        readonly type: "boolean";
                    };
                    readonly show_subtasks: {
                        readonly description: "Acceptable values are `1`, `2`, or `3`, which show subtasks separate, expanded, or collapsed.";
                        readonly type: "integer";
                        readonly contentEncoding: "int32";
                        readonly examples: readonly [3];
                    };
                    readonly show_subtask_parent_names: {
                        readonly type: "boolean";
                    };
                    readonly show_closed_subtasks: {
                        readonly type: "boolean";
                    };
                    readonly show_assignees: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly show_images: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly collapse_empty_columns: {
                        readonly type: readonly ["string", "null"];
                    };
                    readonly me_comments: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly me_subtasks: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly me_checklists: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly space_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [790];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["space_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateSpaceViewresponse";
            readonly required: readonly ["view"];
            readonly type: "object";
            readonly properties: {
                readonly view: {
                    readonly title: "View";
                    readonly required: readonly ["id", "name", "type", "parent", "grouping", "divide", "sorting", "filters", "columns", "team_sidebar", "settings"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                        readonly parent: {
                            readonly title: "Parent";
                            readonly description: "The parent parameter specifies where the view is located in the ClickUp Hierarchy. Both `id` and `type` are required. \\\n \\\nThe `id` is the id of the Workspace, Space, Folder, or List where the view is located. \\\n \\\nThe `type` value indciates the level of the Hierarchy where the view is located.";
                            readonly required: readonly ["id", "type"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "The id of the Workspace, Space, Folder, or List where the view is located.";
                                };
                                readonly type: {
                                    readonly type: "integer";
                                    readonly description: "The level of the Hierarchy where the view is created. \\\n \\\nOptions include: \\\n \\\nWorkspace (Everything Level): `7` \\\n \\\nSpace: `4` \\\n \\\nFolder: `5` \\\n \\\nList: `6`";
                                    readonly contentEncoding: "int32";
                                };
                            };
                        };
                        readonly grouping: {
                            readonly title: "Grouping";
                            readonly required: readonly ["field", "dir", "collapsed", "ignore"];
                            readonly type: "object";
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly description: "Set the field to group by.\\\n \\\nOptions include: `none`, `status`, `priority`, `assignee`, `tag`, or `dueDate`.";
                                };
                                readonly dir: {
                                    readonly description: "Set a group sort order using `1` or `-1`.\\\n \\\nFor example, use `1`show tasks with urgent priority at the top of your view, and tasks with no priority at the bottom.\\\n \\\nUse `-1` to reverse the order to show tasks with no priority at the top of your view.";
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly collapsed: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly ignore: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly divide: {
                            readonly title: "Divide";
                            readonly required: readonly ["collapsed"];
                            readonly type: "object";
                            readonly properties: {
                                readonly field: {
                                    readonly type: "null";
                                };
                                readonly dir: {
                                    readonly type: "null";
                                };
                                readonly collapsed: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly sorting: {
                            readonly title: "Sorting";
                            readonly required: readonly ["fields"];
                            readonly type: "object";
                            readonly properties: {
                                readonly fields: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "Include an array of fields to sort by.\\\n \\\n You can sort by the same fields available when [filtering a view](doc:filter-views).";
                                };
                            };
                        };
                        readonly filters: {
                            readonly title: "Filters";
                            readonly required: readonly ["op", "fields", "search", "show_closed"];
                            readonly type: "object";
                            readonly properties: {
                                readonly op: {
                                    readonly type: "string";
                                    readonly description: "The available operator (`op``) values are `AND`` and `OR``.";
                                };
                                readonly fields: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "View the list of [fields available](doc:filter-views) to filter by.";
                                };
                                readonly search: {
                                    readonly type: "string";
                                };
                                readonly show_closed: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly columns: {
                            readonly title: "Columns";
                            readonly description: "Custom Fields added to a view at the Everything level will be added to all tasks in your Workspace. Once Custom Fields are added to one of these views, you cannot move it to another level of the Hierarchy.";
                            readonly required: readonly ["fields"];
                            readonly type: "object";
                            readonly properties: {
                                readonly fields: {
                                    readonly description: "Custom Fields require the `_cf` prefix and must be formatted as a JSON object.";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly team_sidebar: {
                            readonly title: "TeamSidebar";
                            readonly required: readonly ["assignees", "assigned_comments", "unassigned_tasks"];
                            readonly type: "object";
                            readonly properties: {
                                readonly assignees: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly assigned_comments: {
                                    readonly type: "boolean";
                                };
                                readonly unassigned_tasks: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly settings: {
                            readonly title: "Settings";
                            readonly required: readonly ["show_task_locations", "show_subtasks", "show_subtask_parent_names", "show_closed_subtasks", "show_assignees", "show_images", "collapse_empty_columns", "me_comments", "me_subtasks", "me_checklists"];
                            readonly type: "object";
                            readonly properties: {
                                readonly show_task_locations: {
                                    readonly type: "boolean";
                                };
                                readonly show_subtasks: {
                                    readonly description: "Acceptable values are `1`, `2`, or `3`, which show subtasks separate, expanded, or collapsed.";
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly show_subtask_parent_names: {
                                    readonly type: "boolean";
                                };
                                readonly show_closed_subtasks: {
                                    readonly type: "boolean";
                                };
                                readonly show_assignees: {
                                    readonly type: "boolean";
                                };
                                readonly show_images: {
                                    readonly type: "boolean";
                                };
                                readonly collapse_empty_columns: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly me_comments: {
                                    readonly type: "boolean";
                                };
                                readonly me_subtasks: {
                                    readonly type: "boolean";
                                };
                                readonly me_checklists: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateTask: {
    readonly body: {
        readonly title: "CreateTaskrequest";
        readonly required: readonly ["name"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["New Task Name"];
            };
            readonly description: {
                readonly type: "string";
                readonly examples: readonly ["New Task Description"];
            };
            readonly assignees: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly examples: readonly [183];
                };
                readonly description: "";
            };
            readonly archived: {
                readonly type: "boolean";
            };
            readonly group_assignees: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly examples: readonly ["dd01f92f-48ca-446d-88a1-0beb0e8f5f14"];
                };
                readonly description: "";
            };
            readonly tags: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly examples: readonly ["tag name 1"];
                };
                readonly description: "";
            };
            readonly status: {
                readonly type: "string";
                readonly examples: readonly ["Open"];
            };
            readonly priority: {
                readonly type: readonly ["integer", "null"];
                readonly contentEncoding: "int32";
                readonly examples: readonly [3];
            };
            readonly due_date: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
                readonly examples: readonly [1508369194377];
            };
            readonly due_date_time: {
                readonly type: "boolean";
            };
            readonly time_estimate: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [8640000];
            };
            readonly start_date: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
                readonly examples: readonly [1567780450202];
            };
            readonly start_date_time: {
                readonly type: "boolean";
            };
            readonly points: {
                readonly type: "number";
                readonly description: "Add Sprint Points to the task.";
                readonly examples: readonly [3];
            };
            readonly notify_all: {
                readonly type: "boolean";
                readonly description: "If `notify_all` is true, notifications will be sent to everyone including the creator of the comment.";
                readonly examples: readonly [true];
            };
            readonly parent: {
                readonly description: "You can create a subtask by including an existing task ID.\\\n \\\nThe `parent` task ID you include can be a subtask, but must be in the same List specified in the path parameter.";
                readonly type: readonly ["string", "null"];
            };
            readonly markdown_content: {
                readonly type: "string";
                readonly description: "Markdown formatted description for the task. If both `markdown_content` and `description` are provided, `markdown_content` will be used instead of `description`.";
            };
            readonly links_to: {
                readonly description: "Include a task ID to create a linked dependency with your new task.";
                readonly type: readonly ["string", "null"];
            };
            readonly check_required_custom_fields: {
                readonly description: "When creating a task via API any required Custom Fields are ignored by default (`false`).\\\n \\\nYou can enforce required Custom Fields by including `check_required_custom_fields: true`.";
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly custom_fields: {
                readonly type: "array";
                readonly items: {
                    readonly title: "CustomFields6";
                    readonly required: readonly ["id", "value"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly examples: readonly ["0a52c486-5f05-403b-b4fd-c512ff05131c"];
                        };
                        readonly value: {
                            readonly oneOf: readonly [{
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            }, {
                                readonly type: "string";
                            }];
                            readonly examples: readonly ["This is a string of text added to a Custom Field."];
                        };
                    };
                };
                readonly description: "[Filter by Custom Fields.](doc:filtertasks)";
            };
            readonly custom_item_id: {
                readonly type: "number";
                readonly description: "The custom task type ID for this task. A value of `null` (default) creates a standard task type \"Task\".\\\n \\\nTo get a list of available custom task type IDs for your Workspace, use the [Get Custom Task Types endpoint](ref:getcustomitems).";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly list_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["list_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by its custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateTaskresponse.yaml";
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly custom_id: {
                    readonly type: readonly ["string", "null"];
                };
                readonly custom_item_id: {
                    readonly type: readonly ["number", "null"];
                    readonly description: "The custom task type ID for this task. A value of `null` (default) creates a standard task type \"Task\".\\\n \\\nTo get a list of available custom task type IDs for your Workspace, use the [Get Custom Task Types endpoint](ref:getcustomitems).";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly text_content: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly title: "Status";
                    readonly required: readonly ["status", "color", "orderindex", "type"];
                    readonly type: "object";
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly orderindex: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                    };
                };
                readonly orderindex: {
                    readonly type: "string";
                };
                readonly date_created: {
                    readonly type: "string";
                };
                readonly date_updated: {
                    readonly type: "string";
                };
                readonly date_closed: {
                    readonly type: readonly ["string", "null"];
                };
                readonly creator: {
                    readonly title: "Creator";
                    readonly required: readonly ["id", "username", "color", "profilePicture"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly username: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly profilePicture: {
                            readonly type: "string";
                        };
                    };
                };
                readonly assignees: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly description: "";
                };
                readonly archived: {
                    readonly type: "boolean";
                };
                readonly group_assignees: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly description: "";
                };
                readonly checklists: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly description: "";
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly description: "";
                };
                readonly parent: {
                    readonly type: readonly ["string", "null"];
                };
                readonly priority: {
                    readonly type: readonly ["string", "null"];
                };
                readonly due_date: {
                    readonly type: readonly ["string", "null"];
                };
                readonly start_date: {
                    readonly type: readonly ["string", "null"];
                };
                readonly points: {
                    readonly type: "number";
                };
                readonly time_estimate: {
                    readonly type: readonly ["string", "null"];
                };
                readonly time_spent: {
                    readonly type: readonly ["string", "null"];
                };
                readonly custom_fields: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "CustomFields8";
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly type_config: {
                                readonly title: "TypeConfig1";
                                readonly type: "object";
                                readonly properties: {
                                    readonly single_user: {
                                        readonly type: "boolean";
                                    };
                                    readonly include_groups: {
                                        readonly type: "boolean";
                                    };
                                    readonly include_guests: {
                                        readonly type: "boolean";
                                    };
                                    readonly include_team_members: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly date_created: {
                                readonly type: "string";
                            };
                            readonly hide_from_guests: {
                                readonly type: "boolean";
                            };
                            readonly value: {
                                readonly oneOf: readonly [{
                                    readonly title: "Value";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly username: {
                                            readonly type: "string";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                        readonly initials: {
                                            readonly type: "string";
                                        };
                                        readonly profilePicture: {
                                            readonly type: readonly ["string", "null"];
                                        };
                                    };
                                }, {
                                    readonly title: "Value1";
                                    readonly required: readonly ["id", "username", "email", "color", "initials", "profilePicture"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly username: {
                                            readonly type: "string";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                        readonly initials: {
                                            readonly type: "string";
                                        };
                                        readonly profilePicture: {
                                            readonly type: readonly ["string", "null"];
                                        };
                                    };
                                }, {
                                    readonly title: "Value2";
                                    readonly required: readonly ["value"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly value: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly examples: readonly ["This is a text CF"];
                                }];
                            };
                            readonly value_richtext: {
                                readonly type: "string";
                            };
                            readonly value_markdown: {
                                readonly type: "string";
                            };
                            readonly required: {
                                readonly type: "boolean";
                            };
                        };
                    };
                    readonly description: "";
                };
                readonly list: {
                    readonly title: "List";
                    readonly required: readonly ["id"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                    };
                };
                readonly folder: {
                    readonly title: "Folder";
                    readonly required: readonly ["id"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                    };
                };
                readonly space: {
                    readonly title: "Space";
                    readonly required: readonly ["id"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                    };
                };
                readonly url: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateTaskAttachment: {
    readonly body: {
        readonly properties: {
            readonly attachment: {
                readonly type: "array";
                readonly items: {};
            };
        };
        readonly type: "object";
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hv"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by its custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateTaskAttachmentresponse";
            readonly required: readonly ["id", "version", "date", "title", "extension", "thumbnail_small", "thumbnail_large", "url"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly version: {
                    readonly type: "string";
                };
                readonly date: {
                    readonly type: "integer";
                    readonly contentEncoding: "int64";
                };
                readonly title: {
                    readonly type: "string";
                };
                readonly extension: {
                    readonly type: "string";
                };
                readonly thumbnail_small: {
                    readonly type: "string";
                };
                readonly thumbnail_large: {
                    readonly type: "string";
                };
                readonly url: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateTaskComment: {
    readonly body: {
        readonly title: "CreateTaskCommentrequest";
        readonly required: readonly ["comment_text", "notify_all"];
        readonly type: "object";
        readonly properties: {
            readonly comment_text: {
                readonly type: "string";
                readonly examples: readonly ["Task comment content"];
            };
            readonly assignee: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [183];
            };
            readonly group_assignee: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly description: "";
                readonly examples: readonly ["dd01f92f-48ca-446d-88a1-0beb0e8f5f14"];
            };
            readonly notify_all: {
                readonly description: "If `notify_all` is true, notifications will be sent to everyone including the creator of the comment.";
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hz"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateTaskCommentresponse";
            readonly required: readonly ["id", "hist_id", "date"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly hist_id: {
                    readonly type: "string";
                };
                readonly date: {
                    readonly type: "integer";
                    readonly contentEncoding: "int64";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateTaskFromTemplate: {
    readonly body: {
        readonly title: "CreateTaskFromTemplaterequest";
        readonly required: readonly ["name"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["New task name"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly list_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [512];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly template_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hz"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["list_id", "template_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateTeamView: {
    readonly body: {
        readonly title: "CreateTeamViewrequest";
        readonly required: readonly ["name", "type", "grouping", "divide", "sorting", "filters", "columns", "team_sidebar", "settings"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["New Everything level View"];
            };
            readonly type: {
                readonly type: "string";
                readonly description: "The type of view to create. Options include: `list`, `board`, `calendar`, `table`, `timeline`, `workload`, `activity`, `map`, `conversation`, or `gantt`.";
                readonly examples: readonly ["list"];
            };
            readonly grouping: {
                readonly title: "Grouping";
                readonly required: readonly ["field", "dir", "collapsed", "ignore"];
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                        readonly description: "Set the field to group by.\\\n \\\nOptions include: `none`, `status`, `priority`, `assignee`, `tag`, or `dueDate`.";
                        readonly examples: readonly ["status"];
                    };
                    readonly dir: {
                        readonly description: "Set a group sort order using `1` or `-1`.\\\n \\\nFor example, use `1`show tasks with urgent priority at the top of your view, and tasks with no priority at the bottom.\\\n \\\nUse `-1` to reverse the order to show tasks with no priority at the top of your view.";
                        readonly type: "integer";
                        readonly contentEncoding: "int32";
                        readonly examples: readonly [1];
                    };
                    readonly collapsed: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "";
                    };
                    readonly ignore: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly divide: {
                readonly title: "Divide";
                readonly required: readonly ["collapsed"];
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "null";
                    };
                    readonly dir: {
                        readonly type: "null";
                    };
                    readonly collapsed: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly sorting: {
                readonly title: "Sorting";
                readonly required: readonly ["fields"];
                readonly type: "object";
                readonly properties: {
                    readonly fields: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "Include an array of fields to sort by.\\\n \\\n You can sort by the same fields available when [filtering a view](doc:filter-views).";
                    };
                };
            };
            readonly filters: {
                readonly title: "Filters";
                readonly required: readonly ["op", "fields", "search", "show_closed"];
                readonly type: "object";
                readonly properties: {
                    readonly op: {
                        readonly type: "string";
                        readonly description: "The available operator (`op``) values are `AND`` and `OR``.";
                        readonly examples: readonly ["AND"];
                    };
                    readonly fields: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "View the list of [fields available](doc:filter-views) to filter by.";
                    };
                    readonly search: {
                        readonly type: "string";
                    };
                    readonly show_closed: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly columns: {
                readonly title: "Columns";
                readonly description: "Custom Fields added to a view at the Everything level will be added to all tasks in your Workspace. Once Custom Fields are added to one of these views, you cannot move it to another level of the Hierarchy.";
                readonly required: readonly ["fields"];
                readonly type: "object";
                readonly properties: {
                    readonly fields: {
                        readonly description: "Custom Fields require the `_cf` prefix and must be formatted as a JSON object.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly team_sidebar: {
                readonly title: "TeamSidebar";
                readonly required: readonly ["assignees", "assigned_comments", "unassigned_tasks"];
                readonly type: "object";
                readonly properties: {
                    readonly assignees: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "";
                    };
                    readonly assigned_comments: {
                        readonly type: "boolean";
                    };
                    readonly unassigned_tasks: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly settings: {
                readonly title: "Settings";
                readonly required: readonly ["show_task_locations", "show_subtasks", "show_subtask_parent_names", "show_closed_subtasks", "show_assignees", "show_images", "collapse_empty_columns", "me_comments", "me_subtasks", "me_checklists"];
                readonly type: "object";
                readonly properties: {
                    readonly show_task_locations: {
                        readonly type: "boolean";
                    };
                    readonly show_subtasks: {
                        readonly description: "Acceptable values are `1`, `2`, or `3`, which show subtasks separate, expanded, or collapsed.";
                        readonly type: "integer";
                        readonly contentEncoding: "int32";
                        readonly examples: readonly [3];
                    };
                    readonly show_subtask_parent_names: {
                        readonly type: "boolean";
                    };
                    readonly show_closed_subtasks: {
                        readonly type: "boolean";
                    };
                    readonly show_assignees: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly show_images: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly collapse_empty_columns: {
                        readonly type: readonly ["string", "null"];
                    };
                    readonly me_comments: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly me_subtasks: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly me_checklists: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateTeamViewresponse";
            readonly required: readonly ["view"];
            readonly type: "object";
            readonly properties: {
                readonly view: {
                    readonly title: "View";
                    readonly required: readonly ["id", "name", "type", "parent", "grouping", "divide", "sorting", "filters", "columns", "team_sidebar", "settings"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                        readonly parent: {
                            readonly title: "Parent";
                            readonly description: "The parent parameter specifies where the view is located in the ClickUp Hierarchy. Both `id` and `type` are required. \\\n \\\nThe `id` is the id of the Workspace, Space, Folder, or List where the view is located. \\\n \\\nThe `type` value indciates the level of the Hierarchy where the view is located.";
                            readonly required: readonly ["id", "type"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "The id of the Workspace, Space, Folder, or List where the view is located.";
                                };
                                readonly type: {
                                    readonly type: "integer";
                                    readonly description: "The level of the Hierarchy where the view is created. \\\n \\\nOptions include: \\\n \\\nWorkspace (Everything Level): `7` \\\n \\\nSpace: `4` \\\n \\\nFolder: `5` \\\n \\\nList: `6`";
                                    readonly contentEncoding: "int32";
                                };
                            };
                        };
                        readonly grouping: {
                            readonly title: "Grouping";
                            readonly required: readonly ["field", "dir", "collapsed", "ignore"];
                            readonly type: "object";
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly description: "Set the field to group by.\\\n \\\nOptions include: `none`, `status`, `priority`, `assignee`, `tag`, or `dueDate`.";
                                };
                                readonly dir: {
                                    readonly description: "Set a group sort order using `1` or `-1`.\\\n \\\nFor example, use `1`show tasks with urgent priority at the top of your view, and tasks with no priority at the bottom.\\\n \\\nUse `-1` to reverse the order to show tasks with no priority at the top of your view.";
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly collapsed: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly ignore: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly divide: {
                            readonly title: "Divide";
                            readonly required: readonly ["collapsed"];
                            readonly type: "object";
                            readonly properties: {
                                readonly field: {
                                    readonly type: "null";
                                };
                                readonly dir: {
                                    readonly type: "null";
                                };
                                readonly collapsed: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly sorting: {
                            readonly title: "Sorting";
                            readonly required: readonly ["fields"];
                            readonly type: "object";
                            readonly properties: {
                                readonly fields: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "Include an array of fields to sort by.\\\n \\\n You can sort by the same fields available when [filtering a view](doc:filter-views).";
                                };
                            };
                        };
                        readonly filters: {
                            readonly title: "Filters";
                            readonly required: readonly ["op", "fields", "search", "show_closed"];
                            readonly type: "object";
                            readonly properties: {
                                readonly op: {
                                    readonly type: "string";
                                    readonly description: "The available operator (`op``) values are `AND`` and `OR``.";
                                };
                                readonly fields: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "View the list of [fields available](doc:filter-views) to filter by.";
                                };
                                readonly search: {
                                    readonly type: "string";
                                };
                                readonly show_closed: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly columns: {
                            readonly title: "Columns";
                            readonly description: "Custom Fields added to a view at the Everything level will be added to all tasks in your Workspace. Once Custom Fields are added to one of these views, you cannot move it to another level of the Hierarchy.";
                            readonly required: readonly ["fields"];
                            readonly type: "object";
                            readonly properties: {
                                readonly fields: {
                                    readonly description: "Custom Fields require the `_cf` prefix and must be formatted as a JSON object.";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly team_sidebar: {
                            readonly title: "TeamSidebar";
                            readonly required: readonly ["assignees", "assigned_comments", "unassigned_tasks"];
                            readonly type: "object";
                            readonly properties: {
                                readonly assignees: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly assigned_comments: {
                                    readonly type: "boolean";
                                };
                                readonly unassigned_tasks: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly settings: {
                            readonly title: "Settings";
                            readonly required: readonly ["show_task_locations", "show_subtasks", "show_subtask_parent_names", "show_closed_subtasks", "show_assignees", "show_images", "collapse_empty_columns", "me_comments", "me_subtasks", "me_checklists"];
                            readonly type: "object";
                            readonly properties: {
                                readonly show_task_locations: {
                                    readonly type: "boolean";
                                };
                                readonly show_subtasks: {
                                    readonly description: "Acceptable values are `1`, `2`, or `3`, which show subtasks separate, expanded, or collapsed.";
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly show_subtask_parent_names: {
                                    readonly type: "boolean";
                                };
                                readonly show_closed_subtasks: {
                                    readonly type: "boolean";
                                };
                                readonly show_assignees: {
                                    readonly type: "boolean";
                                };
                                readonly show_images: {
                                    readonly type: "boolean";
                                };
                                readonly collapse_empty_columns: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly me_comments: {
                                    readonly type: "boolean";
                                };
                                readonly me_subtasks: {
                                    readonly type: "boolean";
                                };
                                readonly me_checklists: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateThreadedComment: {
    readonly body: {
        readonly title: "CreateTaskCommentrequest";
        readonly required: readonly ["comment_text", "notify_all"];
        readonly type: "object";
        readonly properties: {
            readonly comment_text: {
                readonly type: "string";
                readonly examples: readonly ["Task comment content"];
            };
            readonly assignee: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [183];
            };
            readonly group_assignee: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly description: "";
                readonly examples: readonly ["d01f92f-48ca-446d-88a1-0beb0e8f5f14"];
            };
            readonly notify_all: {
                readonly description: "If `notify_all` is true, notifications will be sent to everyone including the creator of the comment.";
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly comment_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [456];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["comment_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateUserGroup: {
    readonly body: {
        readonly title: "CreateTeamrequest";
        readonly required: readonly ["name", "members"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["New User Group name"];
            };
            readonly handle: {
                readonly type: "string";
                readonly examples: readonly ["newusergroupname"];
            };
            readonly members: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly examples: readonly [123456];
                };
                readonly description: "";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateTeamresponse";
            readonly required: readonly ["id", "team_id", "userid", "name", "handle", "date_created", "initials", "members", "avatar"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly team_id: {
                    readonly type: "string";
                };
                readonly userid: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly handle: {
                    readonly type: "string";
                };
                readonly date_created: {
                    readonly type: "string";
                };
                readonly initials: {
                    readonly type: "string";
                };
                readonly members: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Members1";
                        readonly required: readonly ["id", "username", "email", "color", "initials", "profilePicture"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly username: {
                                readonly type: "string";
                            };
                            readonly email: {
                                readonly type: "string";
                            };
                            readonly color: {
                                readonly type: "string";
                            };
                            readonly initials: {
                                readonly type: "string";
                            };
                            readonly profilePicture: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
                readonly avatar: {
                    readonly title: "Avatar";
                    readonly required: readonly ["attachment_id", "color", "source", "icon"];
                    readonly type: "object";
                    readonly properties: {
                        readonly attachment_id: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly color: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly source: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly icon: {
                            readonly type: readonly ["string", "null"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateWebhook: {
    readonly body: {
        readonly title: "CreateWebhookrequest";
        readonly required: readonly ["endpoint", "events"];
        readonly type: "object";
        readonly properties: {
            readonly endpoint: {
                readonly type: "string";
                readonly examples: readonly ["https://yourdomain.com/webhook"];
            };
            readonly events: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly examples: readonly ["taskCreated"];
                };
            };
            readonly space_id: {
                readonly type: "integer";
                readonly examples: readonly [1234];
            };
            readonly folder_id: {
                readonly type: "integer";
                readonly examples: readonly [5678];
            };
            readonly list_id: {
                readonly type: "integer";
                readonly examples: readonly [9876];
            };
            readonly task_id: {
                readonly type: "string";
                readonly examples: readonly ["abc1234"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "CreateWebhookresponse";
            readonly required: readonly ["id", "webhook"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly webhook: {
                    readonly title: "Webhook";
                    readonly required: readonly ["id", "userid", "team_id", "endpoint", "client_id", "events", "task_id", "list_id", "folder_id", "space_id", "health", "secret"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly userid: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly team_id: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly endpoint: {
                            readonly type: "string";
                        };
                        readonly client_id: {
                            readonly type: "string";
                        };
                        readonly events: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly task_id: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly list_id: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly folder_id: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly space_id: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly health: {
                            readonly title: "Health";
                            readonly required: readonly ["status", "fail_count"];
                            readonly type: "object";
                            readonly properties: {
                                readonly status: {
                                    readonly type: "string";
                                };
                                readonly fail_count: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                            };
                        };
                        readonly secret: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const CreateWorkspaceAuditLog: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["applicability"];
        readonly properties: {
            readonly filter: {
                readonly description: "A filter containing the criteria to filter logs by.";
                readonly type: "object";
                readonly properties: {
                    readonly workspaceId: {
                        readonly type: "string";
                        readonly description: "The ID of the Workspace.";
                    };
                    readonly userId: {
                        readonly description: "The user ID. This can be a single user or multiple.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly userEmail: {
                        readonly description: "User emails. This can be a single email or multiple.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly eventType: {
                        readonly description: "Types of events to filter by. Options include `USER_LOGIN`, `USER_LOGOUT`, `CHANGE_2FA`, `CHANGE_PASSWORD`, `CHANGE_EMAIL`, `JOIN_WORKSPACE`, `LEAVE_WORKSPACE`, `REMOVE_FROM_WORKSPACE`, `RESET_PASSWORD`, `ROLE_CHANGE`, `SCIM_PROVISION`, `SCIM_DEPROVISION`, `SCIM_UPDATE`, `ADVANCED_SETTINGS_UPDATED`, `CHANGE_ROLE_PERMISSIONS`, `INVITE_TO_WORKSPACE`, `CHANGE_USER_ROLE`, `CHANGE_SSO_POLICY`, `CHANGE_2FA_POLICY`, `CUSTOM_ROLE_CREATED`, `CUSTOM_ROLE_UPDATED`, `CUSTOM_ROLE_DELETED`, `SCIM_GROUP_CREATED`, `SCIM_GROUP_UPDATED`, `SCIM_GROUP_DELETED`, `GROUP_CREATED`, `GROUP_DELETED`, `GROUP_EDITED`, `GROUP_MEMBER_ADDED`, `GROUP_MEMBER_REMOVED`, `SSO_CONFIG_UPDATED`, `TASK_CREATED`, `TASK_ARCHIVED`, `TASK_DELETED`, `TASK_RESTORED`, `TASK_UNARCHIVED`, `TASK_STATUS_CHANGED`, `TASK_PRIORITY_CHANGED`, `TASK_ASSIGNEES_CHANGED`, and `TASK_CUSTOM_FIELD_VALUES_CHANGED`.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly eventStatus: {
                        readonly type: "string";
                        readonly description: "Status of events you're filtering by. Options include `success`, `failed`, `started`, `completed`, `error`, `system_error`.";
                    };
                    readonly startTime: {
                        readonly type: "number";
                        readonly description: "The start time to begin paginating your logs.";
                    };
                    readonly endTime: {
                        readonly type: "number";
                        readonly description: "The end time to begin paginating your logs.";
                    };
                };
                readonly required: readonly ["workspaceId"];
            };
            readonly applicability: {
                readonly type: "string";
                readonly description: "Type of logs to filter by. Options include `auth-and-security` and `user-activity`. Most use cases will use `auth-and-security`.";
                readonly examples: readonly ["auth-and-security"];
            };
            readonly pagination: {
                readonly description: "The pagination request determines where logs should start and how many to return.";
                readonly type: "object";
                readonly properties: {
                    readonly pageRows: {
                        readonly type: "number";
                        readonly description: "The number of rows to return.";
                    };
                    readonly pageTimestamp: {
                        readonly type: "number";
                        readonly description: "The timestamp to index on. This should be the timestamp of the last row on the previous page. If you are requesting the first page, this should be the current timestamp.";
                    };
                    readonly pageDirection: {
                        readonly type: "string";
                        readonly description: "Pagination direction. This should be set to `before` for most use cases. Options include `before` and `after`.";
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly workspace_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the Workspace.";
                };
            };
            readonly required: readonly ["workspace_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const Createatimeentry: {
    readonly body: {
        readonly title: "Createatimeentryrequest";
        readonly required: readonly ["start", "duration"];
        readonly type: "object";
        readonly properties: {
            readonly description: {
                readonly type: "string";
                readonly examples: readonly ["from api"];
            };
            readonly tags: {
                readonly description: "Users on the Business Plan and above can include a time tracking label.";
                readonly type: "array";
                readonly items: {
                    readonly title: "Tags6";
                    readonly required: readonly ["name", "tag_fg", "tag_bg"];
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly examples: readonly ["name of tag"];
                        };
                        readonly tag_fg: {
                            readonly type: "string";
                            readonly examples: readonly ["#FFFFFF"];
                        };
                        readonly tag_bg: {
                            readonly type: "string";
                            readonly examples: readonly ["#BF55EC"];
                        };
                    };
                };
            };
            readonly start: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
                readonly examples: readonly [1595282645000];
            };
            readonly stop: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
                readonly description: "The `duration` parameter can be used instead of the `stop` parameter. ";
            };
            readonly end: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
            };
            readonly billable: {
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly duration: {
                readonly description: "When there are values for both `start` and `end`, `duration` is ignored. The `stop` parameter can be used instead of the `duration` parameter.";
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [50000];
            };
            readonly assignee: {
                readonly description: "Workspace owners and admins can include any user id. Workspace members can only include their own user id.";
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [1];
            };
            readonly tid: {
                readonly type: "string";
                readonly examples: readonly ["task_id"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_Id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_Id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "Createatimeentryresponse";
            readonly required: readonly ["description", "tags", "start", "billable", "duration", "assignee", "tid"];
            readonly type: "object";
            readonly properties: {
                readonly description: {
                    readonly type: "string";
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Tags6";
                        readonly required: readonly ["name", "tag_fg", "tag_bg"];
                        readonly type: "object";
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly tag_fg: {
                                readonly type: "string";
                            };
                            readonly tag_bg: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
                readonly start: {
                    readonly type: "integer";
                    readonly contentEncoding: "int64";
                };
                readonly billable: {
                    readonly type: "boolean";
                };
                readonly duration: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                };
                readonly assignee: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                };
                readonly tid: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const DeleteChecklist: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly checklist_id: {
                    readonly type: "string";
                    readonly examples: readonly ["b955c4dc"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "b8a8-48d8-a0c6-b4200788a683 (uuid)";
                };
            };
            readonly required: readonly ["checklist_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const DeleteChecklistItem: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly checklist_id: {
                    readonly type: "string";
                    readonly examples: readonly ["b955c4dc"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "b8a8-48d8-a0c6-b4200788a683 (uuid)";
                };
                readonly checklist_item_id: {
                    readonly type: "string";
                    readonly examples: readonly ["21e08dc8"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "e491-47f5-9fd8-d1dc4cedcc6f (uuid)";
                };
            };
            readonly required: readonly ["checklist_id", "checklist_item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const DeleteComment: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly comment_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [456];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["comment_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const DeleteDependency: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hv"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly depends_on: {
                    readonly type: "string";
                    readonly examples: readonly ["9hz"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly dependency_of: {
                    readonly type: "string";
                    readonly examples: readonly ["9hz"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly ["depends_on", "dependency_of"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const DeleteFolder: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly folder_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [457];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["folder_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const DeleteGoal: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly goal_id: {
                    readonly type: "string";
                    readonly examples: readonly ["e53a033c"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "900e-462d-a849-4a216b06d930 (uuid)";
                };
            };
            readonly required: readonly ["goal_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const DeleteKeyResult: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly key_result_id: {
                    readonly type: "string";
                    readonly examples: readonly ["947d46ed"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "8480-49bc-8c57-e569747efe93 (uuid)";
                };
            };
            readonly required: readonly ["key_result_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const DeleteList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly list_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [124];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["list_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const DeleteSpace: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly space_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [790];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["space_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const DeleteSpaceTag: {
    readonly body: {
        readonly title: "DeleteSpaceTagrequest";
        readonly required: readonly ["tag"];
        readonly type: "object";
        readonly properties: {
            readonly tag: {
                readonly title: "Tag";
                readonly required: readonly ["name", "tag_fg", "tag_bg"];
                readonly type: "object";
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                        readonly examples: readonly ["Tag name"];
                    };
                    readonly tag_fg: {
                        readonly type: "string";
                        readonly examples: readonly ["#000000"];
                    };
                    readonly tag_bg: {
                        readonly type: "string";
                        readonly examples: readonly ["#000000"];
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly space_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [512];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly tag_name: {
                    readonly type: "string";
                    readonly examples: readonly ["name"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["space_id", "tag_name"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const DeleteTask: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9xh"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by its custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const DeleteTaskLink: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hv"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly links_to: {
                    readonly type: "string";
                    readonly examples: readonly ["9hz"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id", "links_to"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "DeleteTaskLinkresponse";
            readonly required: readonly ["task"];
            readonly type: "object";
            readonly properties: {
                readonly task: {
                    readonly title: "Task1";
                    readonly required: readonly ["id", "name", "status", "orderindex", "date_created", "date_updated", "date_closed", "creator", "assignees", "checklists", "tags", "parent", "priority", "due_date", "start_date", "time_estimate", "time_spent", "list", "folder", "space", "linked_tasks", "url"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly status: {
                            readonly title: "Status";
                            readonly required: readonly ["status", "color", "orderindex", "type"];
                            readonly type: "object";
                            readonly properties: {
                                readonly status: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly orderindex: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly type: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly orderindex: {
                            readonly type: "string";
                        };
                        readonly date_created: {
                            readonly type: "string";
                        };
                        readonly date_updated: {
                            readonly type: "string";
                        };
                        readonly date_closed: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly creator: {
                            readonly title: "Creator";
                            readonly required: readonly ["id", "username", "color", "profilePicture"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly username: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly profilePicture: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly assignees: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly checklists: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly tags: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly parent: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly priority: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly due_date: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly start_date: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly time_estimate: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly time_spent: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly list: {
                            readonly title: "List";
                            readonly required: readonly ["id"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly folder: {
                            readonly title: "Folder";
                            readonly required: readonly ["id"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly space: {
                            readonly title: "Space";
                            readonly required: readonly ["id"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly linked_tasks: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly url: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const DeleteTeam: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly group_id: {
                    readonly type: "string";
                    readonly examples: readonly ["C9C58BE9"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "User Group ID";
                };
            };
            readonly required: readonly ["group_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const DeleteView: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly view_id: {
                    readonly type: "string";
                    readonly examples: readonly ["3c"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "105 (string)";
                };
            };
            readonly required: readonly ["view_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const DeleteWebhook: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly webhook_id: {
                    readonly type: "string";
                    readonly examples: readonly ["4b67ac88"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "e506-4a29-9d42-26e504e3435e (uuid)";
                };
            };
            readonly required: readonly ["webhook_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const DeleteatimeEntry: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
                readonly timer_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Array of timer ids to delete separated by commas";
                };
            };
            readonly required: readonly ["team_id", "timer_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "DeleteatimeEntryresponse";
            readonly required: readonly ["data"];
            readonly type: "object";
            readonly properties: {
                readonly data: {
                    readonly title: "Data3";
                    readonly required: readonly ["id", "task", "wid", "user", "billable", "start", "end", "duration", "description", "tags", "source", "at"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly task: {
                            readonly title: "Task6";
                            readonly required: readonly ["id", "name", "status", "custom_type"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly status: {
                                    readonly title: "Status";
                                    readonly required: readonly ["status", "color", "orderindex", "type"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly status: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                        readonly orderindex: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly type: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly custom_type: {
                                    readonly type: readonly ["string", "null"];
                                };
                            };
                        };
                        readonly wid: {
                            readonly type: "string";
                        };
                        readonly user: {
                            readonly title: "User2";
                            readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly username: {
                                    readonly type: "string";
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly profilePicture: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly billable: {
                            readonly type: "boolean";
                        };
                        readonly start: {
                            readonly type: "string";
                        };
                        readonly end: {
                            readonly type: "integer";
                            readonly contentEncoding: "int64";
                        };
                        readonly duration: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly tags: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly source: {
                            readonly type: "string";
                        };
                        readonly at: {
                            readonly type: "integer";
                            readonly contentEncoding: "int64";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const Deletetimetracked: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hv"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly interval_id: {
                    readonly type: "string";
                    readonly examples: readonly ["123"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id", "interval_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const EditChecklist: {
    readonly body: {
        readonly title: "EditChecklistrequest";
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["Updated Checklist"];
            };
            readonly position: {
                readonly description: "Position refers to the order of appearance of checklists on a task.\\\n \\\nTo set a checklist to appear at the top of the checklists section of a task, use `\"position\": 0`.";
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [1];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly checklist_id: {
                    readonly type: "string";
                    readonly examples: readonly ["b955c4dc"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "b8a8-48d8-a0c6-b4200788a683 (uuid)";
                };
            };
            readonly required: readonly ["checklist_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const EditChecklistItem: {
    readonly body: {
        readonly title: "EditChecklistItemrequest";
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["Updated Checklist Item"];
            };
            readonly assignee: {
                readonly type: readonly ["string", "null"];
            };
            readonly resolved: {
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly parent: {
                readonly description: "To nest a checklist item under another checklist item, include the other item's `checklist_item_id`.";
                readonly type: readonly ["string", "null"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly checklist_id: {
                    readonly type: "string";
                    readonly examples: readonly ["b955c4dc"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "b8a8-48d8-a0c6-b4200788a683 (uuid)";
                };
                readonly checklist_item_id: {
                    readonly type: "string";
                    readonly examples: readonly ["21e08dc8"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "e491-47f5-9fd8-d1dc4cedcc6f (uuid)";
                };
            };
            readonly required: readonly ["checklist_id", "checklist_item_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "EditChecklistItemresponse";
            readonly required: readonly ["checklist"];
            readonly type: "object";
            readonly properties: {
                readonly checklist: {
                    readonly title: "Checklist2";
                    readonly required: readonly ["id", "task_id", "name", "date_created", "orderindex", "resolved", "unresolved", "items"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly task_id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly date_created: {
                            readonly type: "string";
                        };
                        readonly orderindex: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly resolved: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly unresolved: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly items: {
                            readonly type: "array";
                            readonly items: {
                                readonly title: "Item1";
                                readonly required: readonly ["id", "name", "orderindex", "assignee", "resolved", "parent", "date_created", "children"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly orderindex: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly assignee: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly resolved: {
                                        readonly type: "boolean";
                                    };
                                    readonly parent: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly date_created: {
                                        readonly type: "string";
                                    };
                                    readonly children: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "";
                                    };
                                };
                            };
                            readonly description: "";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const EditGuestOnWorkspace: {
    readonly body: {
        readonly title: "EditGuestOnWorkspacerequest";
        readonly required: readonly ["username", "can_edit_tags", "can_see_time_spent", "can_see_time_estimated", "can_create_views", "custom_role_id"];
        readonly type: "object";
        readonly properties: {
            readonly username: {
                readonly type: "string";
                readonly examples: readonly ["Guest User"];
            };
            readonly can_edit_tags: {
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly can_see_time_spent: {
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly can_see_time_estimated: {
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly can_create_views: {
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly custom_role_id: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [12345];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
                readonly guest_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [403];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["team_id", "guest_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "EditGuestOnWorkspaceresponse";
            readonly required: readonly ["guest"];
            readonly type: "object";
            readonly properties: {
                readonly guest: {
                    readonly title: "Guest";
                    readonly required: readonly ["user", "invited_by", "can_see_time_spent", "can_see_time_estimated", "can_edit_tags", "can_create_views", "shared"];
                    readonly type: "object";
                    readonly properties: {
                        readonly user: {
                            readonly title: "User5";
                            readonly required: readonly ["id", "username", "email", "color", "profilePicture", "initials", "role", "custom_role", "last_active", "date_joined", "date_invited"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly username: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly profilePicture: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly role: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly custom_role: {
                                    readonly title: "CustomRole";
                                    readonly required: readonly ["id", "name"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly last_active: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_joined: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_invited: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly invited_by: {
                            readonly title: "InvitedBy";
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly username: {
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly profilePicture: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly can_see_time_spent: {
                            readonly type: "boolean";
                        };
                        readonly can_see_time_estimated: {
                            readonly type: "boolean";
                        };
                        readonly can_edit_tags: {
                            readonly type: "boolean";
                        };
                        readonly can_create_views: {
                            readonly type: "boolean";
                        };
                        readonly shared: {
                            readonly title: "Shared";
                            readonly type: "object";
                            readonly properties: {
                                readonly tasks: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly lists: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly folders: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const EditKeyResult: {
    readonly body: {
        readonly title: "EditKeyResultrequest";
        readonly required: readonly ["steps_current", "note"];
        readonly type: "object";
        readonly properties: {
            readonly steps_current: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [5];
            };
            readonly note: {
                readonly type: "string";
                readonly examples: readonly ["Target achieved"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly key_result_id: {
                    readonly type: "string";
                    readonly examples: readonly ["947d46ed"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "8480-49bc-8c57-e569747efe93 (uuid)";
                };
            };
            readonly required: readonly ["key_result_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "EditKeyResultresponse";
            readonly required: readonly ["key_result"];
            readonly type: "object";
            readonly properties: {
                readonly key_result: {
                    readonly title: "KeyResult1";
                    readonly required: readonly ["id", "goal_id", "name", "type", "unit", "creator", "date_created", "goal_pretty_id", "percent_completed", "completed", "task_ids", "subcategory_ids", "owners", "last_action"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly goal_id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                        readonly unit: {
                            readonly type: "string";
                        };
                        readonly creator: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly date_created: {
                            readonly type: "string";
                        };
                        readonly goal_pretty_id: {
                            readonly type: "string";
                        };
                        readonly percent_completed: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly completed: {
                            readonly type: "boolean";
                        };
                        readonly task_ids: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly subcategory_ids: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly owners: {
                            readonly type: "array";
                            readonly items: {
                                readonly title: "Owner";
                                readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly description: "";
                        };
                        readonly last_action: {
                            readonly title: "LastAction1";
                            readonly required: readonly ["id", "key_result_id", "userid", "date_modified", "steps_taken", "note", "steps_before", "steps_current", "steps_before_float", "steps_taken_float", "steps_current_float"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly key_result_id: {
                                    readonly type: "string";
                                };
                                readonly userid: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly date_modified: {
                                    readonly type: "string";
                                };
                                readonly steps_taken: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly note: {
                                    readonly type: "string";
                                };
                                readonly steps_before: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly steps_current: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly steps_before_float: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly steps_taken_float: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly steps_current_float: {
                                    readonly type: readonly ["string", "null"];
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const EditPage: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "The updated name of the page.";
            };
            readonly sub_title: {
                readonly type: "string";
                readonly description: "The updated subtitle of the page.";
            };
            readonly content: {
                readonly type: "string";
                readonly description: "The updated content of the page.";
            };
            readonly content_edit_mode: {
                readonly type: "string";
                readonly description: "The strategy for updating content on the page. For example, `replace`, `append`, or `prepend`.";
                readonly default: "replace";
            };
            readonly content_format: {
                readonly type: "string";
                readonly description: "The format the page content is in. For example, `text/md` for markdown and `text/plain` for plain.";
                readonly default: "text/md";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly workspaceId: {
                    readonly type: "number";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the Workspace.";
                };
                readonly docId: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the Doc.";
                };
                readonly pageId: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the page.";
                };
            };
            readonly required: readonly ["workspaceId", "docId", "pageId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const EditSpaceTag: {
    readonly body: {
        readonly title: "EditSpaceTagrequest";
        readonly required: readonly ["tag"];
        readonly type: "object";
        readonly properties: {
            readonly tag: {
                readonly title: "Tag1";
                readonly required: readonly ["name", "fg_color", "bg_color"];
                readonly type: "object";
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                        readonly examples: readonly ["Tag name"];
                    };
                    readonly fg_color: {
                        readonly type: "string";
                    };
                    readonly bg_color: {
                        readonly type: "string";
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly space_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [512];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly tag_name: {
                    readonly type: "string";
                    readonly examples: readonly ["name"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["space_id", "tag_name"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "EditSpaceTagresponse";
            readonly required: readonly ["tag"];
            readonly type: "object";
            readonly properties: {
                readonly tag: {
                    readonly title: "Tag1";
                    readonly required: readonly ["name", "fg_color", "bg_color"];
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly fg_color: {
                            readonly type: "string";
                        };
                        readonly bg_color: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const EditUserOnWorkspace: {
    readonly body: {
        readonly title: "EditUserOnWorkspacerequest";
        readonly required: readonly ["username", "admin", "custom_role_id"];
        readonly type: "object";
        readonly properties: {
            readonly username: {
                readonly type: "string";
                readonly examples: readonly ["User Name"];
            };
            readonly admin: {
                readonly type: "boolean";
            };
            readonly custom_role_id: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [998877];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
                readonly user_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [403];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["team_id", "user_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "EditUserOnWorkspaceresponse";
            readonly required: readonly ["member"];
            readonly type: "object";
            readonly properties: {
                readonly member: {
                    readonly title: "Member7";
                    readonly type: "object";
                    readonly properties: {
                        readonly user: {
                            readonly title: "User21";
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly username: {
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly profilePicture: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly role: {
                                    readonly description: "Owner = 1, Admin = 2, Member = 3, Guest = 4";
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly custom_role: {
                                    readonly title: "CustomRole";
                                    readonly required: readonly ["id", "name"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly last_active: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_joined: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_invited: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly invited_by: {
                            readonly title: "InvitedBy";
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly username: {
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly profilePicture: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly shared: {
                            readonly title: "Shared";
                            readonly type: "object";
                            readonly properties: {
                                readonly tasks: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly lists: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly folders: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const Edittimetracked: {
    readonly body: {
        readonly title: "Edittimetrackedrequest";
        readonly required: readonly ["start", "end", "time"];
        readonly type: "object";
        readonly properties: {
            readonly start: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
                readonly examples: readonly [1567780450202];
            };
            readonly end: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
                readonly examples: readonly [1508369194377];
            };
            readonly time: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [8640000];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hv"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly interval_id: {
                    readonly type: "string";
                    readonly examples: readonly ["123"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id", "interval_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetAccessToken: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly client_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Oauth app client id";
                };
                readonly client_secret: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Oauth app client secret";
                };
                readonly code: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Code given in redirect url";
                };
            };
            readonly required: readonly ["client_id", "client_secret", "code"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetAccessTokenresponse";
            readonly required: readonly ["access_token"];
            readonly type: "object";
            readonly properties: {
                readonly access_token: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetAccessibleCustomFields: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly list_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["list_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetAccessibleCustomFieldsresponse";
            readonly required: readonly ["fields"];
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Field";
                        readonly required: readonly ["id", "name", "type", "type_config", "date_created", "hide_from_guests"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly type_config: {
                                readonly title: "TypeConfig";
                                readonly type: "object";
                                readonly properties: {
                                    readonly options: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly title: "Option";
                                            readonly required: readonly ["id", "color"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly label: {
                                                    readonly type: "string";
                                                };
                                                readonly color: {
                                                    readonly type: readonly ["string", "null"];
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                };
                                                readonly value: {
                                                    readonly type: "integer";
                                                    readonly contentEncoding: "int32";
                                                };
                                                readonly type: {
                                                    readonly type: "string";
                                                };
                                                readonly orderindex: {
                                                    readonly type: "integer";
                                                    readonly contentEncoding: "int32";
                                                };
                                            };
                                        };
                                        readonly description: "";
                                    };
                                    readonly default: {
                                        readonly oneOf: readonly [{
                                            readonly type: readonly ["string", "null"];
                                        }, {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        }, {}];
                                    };
                                    readonly precision: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly currency_type: {
                                        readonly type: "string";
                                    };
                                    readonly placeholder: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly end: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly start: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly count: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly code_point: {
                                        readonly type: "string";
                                    };
                                    readonly tracking: {
                                        readonly title: "Tracking";
                                        readonly required: readonly ["subtasks", "checklists", "assigned_comments"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly subtasks: {
                                                readonly type: "boolean";
                                            };
                                            readonly checklists: {
                                                readonly type: "boolean";
                                            };
                                            readonly assigned_comments: {
                                                readonly type: "boolean";
                                            };
                                        };
                                    };
                                    readonly complete_on: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                };
                            };
                            readonly date_created: {
                                readonly type: "string";
                            };
                            readonly hide_from_guests: {
                                readonly type: "boolean";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetAuthorizedTeams: {
    readonly response: {
        readonly "200": {
            readonly title: "GetAuthorizedTeamsresponse";
            readonly required: readonly ["teams"];
            readonly type: "object";
            readonly properties: {
                readonly teams: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Team";
                        readonly required: readonly ["id", "name", "color", "avatar", "members"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly color: {
                                readonly type: "string";
                            };
                            readonly avatar: {
                                readonly type: "string";
                            };
                            readonly members: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "Member";
                                    readonly required: readonly ["user"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly user: {
                                            readonly title: "User";
                                            readonly required: readonly ["id", "username", "color", "profilePicture"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "integer";
                                                    readonly contentEncoding: "int32";
                                                };
                                                readonly username: {
                                                    readonly type: "string";
                                                };
                                                readonly color: {
                                                    readonly type: "string";
                                                };
                                                readonly profilePicture: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetAuthorizedUser: {
    readonly response: {
        readonly "200": {
            readonly title: "GetAuthorizedUserresponse";
            readonly required: readonly ["user"];
            readonly type: "object";
            readonly properties: {
                readonly user: {
                    readonly title: "User";
                    readonly required: readonly ["id", "username", "color", "profilePicture"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly username: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly profilePicture: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetBulkTasksTimeinStatus: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_ids: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Include this paramater once per `task_id`.\nYou can include up to 100 task ids per request.\nFor example: `task_ids=3cuh&task_ids=g4fs`";
                };
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly ["task_ids"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetBulkTasksTimeinStatusresponse";
            readonly required: readonly ["27075wz", "20bbn28"];
            readonly type: "object";
            readonly properties: {
                readonly "27075wz": {
                    readonly title: "27075wz";
                    readonly required: readonly ["current_status", "status_history"];
                    readonly type: "object";
                    readonly properties: {
                        readonly current_status: {
                            readonly title: "CurrentStatus";
                            readonly required: readonly ["status", "color", "total_time"];
                            readonly type: "object";
                            readonly properties: {
                                readonly status: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly total_time: {
                                    readonly title: "TotalTime";
                                    readonly required: readonly ["by_minute", "since"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly by_minute: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly since: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly status_history: {
                            readonly type: "array";
                            readonly items: {
                                readonly title: "StatusHistory";
                                readonly required: readonly ["status", "color", "type", "total_time", "orderindex"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly status: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                    readonly total_time: {
                                        readonly title: "TotalTime";
                                        readonly required: readonly ["by_minute", "since"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly by_minute: {
                                                readonly type: "integer";
                                                readonly contentEncoding: "int32";
                                            };
                                            readonly since: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly orderindex: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                };
                            };
                            readonly description: "";
                        };
                    };
                };
                readonly "20bbn28": {
                    readonly title: "20bbn28";
                    readonly required: readonly ["current_status", "status_history"];
                    readonly type: "object";
                    readonly properties: {
                        readonly current_status: {
                            readonly title: "CurrentStatus";
                            readonly required: readonly ["status", "color", "total_time"];
                            readonly type: "object";
                            readonly properties: {
                                readonly status: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly total_time: {
                                    readonly title: "TotalTime";
                                    readonly required: readonly ["by_minute", "since"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly by_minute: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly since: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly status_history: {
                            readonly type: "array";
                            readonly items: {
                                readonly title: "StatusHistory";
                                readonly required: readonly ["status", "color", "type", "total_time", "orderindex"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly status: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                    readonly total_time: {
                                        readonly title: "TotalTime";
                                        readonly required: readonly ["by_minute", "since"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly by_minute: {
                                                readonly type: "integer";
                                                readonly contentEncoding: "int32";
                                            };
                                            readonly since: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly orderindex: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                };
                            };
                            readonly description: "";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetChatViewComments: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly view_id: {
                    readonly type: "string";
                    readonly examples: readonly ["3c"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "105 (string)";
                };
            };
            readonly required: readonly ["view_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly start: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Enter the `date` of a Chat view comment using Unix time in milliseconds.";
                };
                readonly start_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Enter the Comment `id` of a Chat view comment.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetChatViewCommentsresponse";
            readonly required: readonly ["comments"];
            readonly type: "object";
            readonly properties: {
                readonly comments: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Comment2";
                        readonly required: readonly ["id", "comment", "comment_text", "user", "resolved", "assignee", "assigned_by", "reactions", "date"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly comment: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "Comment1";
                                    readonly required: readonly ["text"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly text: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                            readonly comment_text: {
                                readonly type: "string";
                            };
                            readonly user: {
                                readonly title: "User2";
                                readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly resolved: {
                                readonly type: "boolean";
                            };
                            readonly assignee: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly assigned_by: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly reactions: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly date: {
                                readonly type: "string";
                            };
                            readonly reply_count: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetCustomItems: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetCustomItemsResponse";
            readonly type: "object";
            readonly properties: {
                readonly custom_items: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Custom Item";
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                                readonly description: "Custom task type ID.";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Custom task type name.";
                            };
                            readonly name_plural: {
                                readonly type: "string";
                                readonly description: "Custom task type plural name.";
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Custom task type description.";
                            };
                        };
                    };
                    readonly description: "Array of custom task types.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetCustomRoles: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly include_members: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetCustomRolesresponse";
            readonly required: readonly ["custom_roles"];
            readonly type: "object";
            readonly properties: {
                readonly custom_roles: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "CustomRole2";
                        readonly required: readonly ["id", "team_id", "name", "inherited_role", "date_created", "members"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly team_id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly inherited_role: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly date_created: {
                                readonly type: "string";
                            };
                            readonly members: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly description: "";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetDoc: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly workspaceId: {
                    readonly type: "number";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the Workspace.";
                };
                readonly docId: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the Doc.";
                };
            };
            readonly required: readonly ["workspaceId", "docId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly date_created: {
                    readonly type: "number";
                };
                readonly date_updated: {
                    readonly type: "number";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly type: {
                    readonly type: "number";
                    readonly enum: readonly [];
                };
                readonly parent: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly type: {
                            readonly type: "number";
                            readonly description: "The parent Doc type. Use `4` for Space, `5` for Folder, `6` for List, `7` for Everything, and `12` for Workspace.";
                        };
                    };
                    readonly required: readonly ["id", "type"];
                };
                readonly public: {
                    readonly type: "boolean";
                };
                readonly workspace_id: {
                    readonly type: "number";
                };
                readonly archived: {
                    readonly type: "boolean";
                };
                readonly archived_by: {
                    readonly type: "number";
                };
                readonly creator: {
                    readonly type: "number";
                };
                readonly date_archived: {
                    readonly type: "number";
                };
                readonly date_deleted: {
                    readonly type: "number";
                };
                readonly deleted: {
                    readonly type: "boolean";
                };
                readonly deleted_by: {
                    readonly type: "number";
                };
                readonly page_defaults: {
                    readonly type: "object";
                    readonly properties: {
                        readonly font: {
                            readonly type: "string";
                        };
                        readonly font_size: {
                            readonly type: "number";
                        };
                        readonly line_height: {
                            readonly type: "number";
                        };
                        readonly page_width: {
                            readonly type: "number";
                        };
                        readonly paragraph_spacing: {
                            readonly type: "number";
                        };
                        readonly show_author_header: {
                            readonly type: "boolean";
                        };
                        readonly show_contributor_header: {
                            readonly type: "boolean";
                        };
                        readonly show_cover_header: {
                            readonly type: "boolean";
                        };
                        readonly show_date_header: {
                            readonly type: "boolean";
                        };
                        readonly show_page_outline: {
                            readonly type: "boolean";
                        };
                        readonly show_sub_pages: {
                            readonly type: "boolean";
                        };
                        readonly sub_page_size: {
                            readonly type: "string";
                        };
                        readonly show_sub_title_header: {
                            readonly type: "boolean";
                        };
                        readonly show_title_icon_header: {
                            readonly type: "boolean";
                        };
                        readonly show_relationships: {
                            readonly type: "boolean";
                        };
                        readonly show_relationships_compact: {
                            readonly type: "boolean";
                        };
                        readonly show_sub_pages_author: {
                            readonly type: "boolean";
                        };
                        readonly show_sub_pages_thumbnail: {
                            readonly type: "boolean";
                        };
                        readonly show_sub_pages_compact: {
                            readonly type: "boolean";
                        };
                        readonly sub_pages_style: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly required: readonly ["id", "date_created", "name", "type", "parent", "public", "workspace_id", "creator"];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetDocPageListing: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly workspaceId: {
                    readonly type: "number";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the Workspace.";
                };
                readonly docId: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the Doc.";
                };
            };
            readonly required: readonly ["workspaceId", "docId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly max_page_depth: {
                    readonly default: "-1";
                    readonly type: "number";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The maximum depth to retrieve pages and subpages. A value less than 0 does not limit the depth.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly doc_id: {
                        readonly type: "string";
                    };
                    readonly parent_page_id: {
                        readonly type: "string";
                    };
                    readonly workspace_id: {
                        readonly type: "number";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly pages: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly doc_id: {
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly pages: {
                                    readonly description: "More nested documents witht the same object structure.";
                                    readonly type: "array";
                                    readonly items: {};
                                };
                            };
                        };
                    };
                };
                readonly required: readonly ["id", "doc_id", "workspace_id", "name"];
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetDocPages: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly workspaceId: {
                    readonly type: "number";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the Workspace.";
                };
                readonly docId: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the Doc.";
                };
            };
            readonly required: readonly ["workspaceId", "docId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly max_page_depth: {
                    readonly default: "-1";
                    readonly type: "number";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The maximum depth to retrieve pages and subpages. A value less than 0 does not limit the depth.";
                };
                readonly content_format: {
                    readonly default: "text/md";
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The format to return the page content in. For example, `text/md` for markdown or `text/plain` for plain.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly doc_id: {
                        readonly type: "string";
                    };
                    readonly parent_page_id: {
                        readonly type: "string";
                    };
                    readonly workspace_id: {
                        readonly type: "number";
                    };
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly pages: {
                        readonly type: "array";
                        readonly description: "More nested documents with the same object structure.";
                        readonly items: {};
                    };
                    readonly sub_title: {
                        readonly type: "string";
                    };
                    readonly date_created: {
                        readonly type: "number";
                    };
                    readonly date_updated: {
                        readonly type: "number";
                    };
                    readonly content: {
                        readonly type: "string";
                    };
                    readonly avatar: {
                        readonly type: "object";
                        readonly properties: {
                            readonly color: {
                                readonly type: "string";
                            };
                            readonly value: {
                                readonly type: "string";
                            };
                            readonly source: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly creator_id: {
                        readonly type: "number";
                    };
                    readonly deleted: {
                        readonly type: "boolean";
                    };
                    readonly deleted_by: {
                        readonly type: "number";
                    };
                    readonly date_deleted: {
                        readonly type: "number";
                    };
                    readonly date_edited: {
                        readonly type: "number";
                    };
                    readonly edited_by: {
                        readonly type: "number";
                    };
                    readonly archived: {
                        readonly type: "boolean";
                    };
                    readonly archived_by: {
                        readonly type: "number";
                    };
                    readonly date_archived: {
                        readonly type: "number";
                    };
                    readonly authors: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "number";
                        };
                    };
                    readonly contributors: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "number";
                        };
                    };
                    readonly cover: {
                        readonly type: "object";
                        readonly properties: {
                            readonly color: {
                                readonly type: "string";
                            };
                            readonly image_url: {
                                readonly type: "string";
                            };
                            readonly position: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly x: {
                                        readonly type: "number";
                                    };
                                    readonly y: {
                                        readonly type: "number";
                                    };
                                };
                                readonly required: readonly ["x", "y"];
                            };
                        };
                    };
                    readonly protected: {
                        readonly type: "boolean";
                    };
                    readonly protected_by: {
                        readonly type: "number";
                    };
                    readonly protected_note: {
                        readonly type: "string";
                    };
                    readonly presentation_details: {
                        readonly type: "object";
                        readonly properties: {
                            readonly font: {
                                readonly type: "string";
                            };
                            readonly font_size: {
                                readonly type: "number";
                            };
                            readonly line_height: {
                                readonly type: "number";
                            };
                            readonly page_width: {
                                readonly type: "number";
                            };
                            readonly paragraph_spacing: {
                                readonly type: "number";
                            };
                            readonly show_author_header: {
                                readonly type: "boolean";
                            };
                            readonly show_contributor_header: {
                                readonly type: "boolean";
                            };
                            readonly show_cover_header: {
                                readonly type: "boolean";
                            };
                            readonly show_date_header: {
                                readonly type: "boolean";
                            };
                            readonly show_page_outline: {
                                readonly type: "boolean";
                            };
                            readonly show_sub_pages: {
                                readonly type: "boolean";
                            };
                            readonly sub_page_size: {
                                readonly type: "string";
                            };
                            readonly show_sub_title_header: {
                                readonly type: "boolean";
                            };
                            readonly show_title_icon_header: {
                                readonly type: "boolean";
                            };
                            readonly show_relationships: {
                                readonly type: "boolean";
                            };
                            readonly show_relationships_compact: {
                                readonly type: "boolean";
                            };
                            readonly show_sub_pages_author: {
                                readonly type: "boolean";
                            };
                            readonly show_sub_pages_thumbnail: {
                                readonly type: "boolean";
                            };
                            readonly show_sub_pages_compact: {
                                readonly type: "boolean";
                            };
                            readonly sub_pages_style: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly required: readonly ["id", "doc_id", "workspace_id", "name", "date_created", "content", "creator_id", "authors"];
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetFilteredTeamTasks: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_Id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_Id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Page to fetch (starts at 0).";
                };
                readonly order_by: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Order by a particular field. By default, tasks are ordered by `created`.\\\n \\\nOptions include: `id`, `created`, `updated`, and `due_date`.";
                };
                readonly reverse: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Tasks are displayed in reverse order.";
                };
                readonly subtasks: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Include or exclude subtasks. By default, subtasks are excluded.";
                };
                readonly space_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by Spaces. For example: \\\n \\\n`?space_ids[]=1234&space_ids[]=6789`";
                };
                readonly project_ids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by Folders. For example: \\\n \\\n`?project_ids[]=1234&project_ids[]=6789`";
                };
                readonly "list_ids[]": {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by Lists. For example: \\\n \\\n`?list_ids[]=1234&list_ids[]=6789` ";
                };
                readonly statuses: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by statuses. Use `%20` to represent a space character. To include closed tasks, use the `include_closed` parameter. \\\n \\\nFor example: \\\n \\\n`?statuses[]=to%20do&statuses[]=in%20progress`";
                };
                readonly include_closed: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Include or excluse closed tasks. By default, they are excluded.\\\n \\\nTo include closed tasks, use `include_closed: true`.";
                };
                readonly assignees: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by Assignees using people's ClickUp user id. For example: \\\n \\\n`?assignees[]=1234&assignees[]=5678`";
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by tags. User `%20` to represent a space character. For example: \\\n \\\n`?tags[]=tag1&tags[]=this%20tag`";
                };
                readonly due_date_gt: {
                    readonly type: "integer";
                    readonly contentEncoding: "int64";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by due date greater than Unix time in milliseconds.";
                };
                readonly due_date_lt: {
                    readonly type: "integer";
                    readonly contentEncoding: "int64";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by due date less than Unix time in milliseconds.";
                };
                readonly date_created_gt: {
                    readonly type: "integer";
                    readonly contentEncoding: "int64";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by date created greater than Unix time in milliseconds.";
                };
                readonly date_created_lt: {
                    readonly type: "integer";
                    readonly contentEncoding: "int64";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by date created less than Unix time in milliseconds.";
                };
                readonly date_updated_gt: {
                    readonly type: "integer";
                    readonly contentEncoding: "int64";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by date updated greater than Unix time in milliseconds.";
                };
                readonly date_updated_lt: {
                    readonly type: "integer";
                    readonly contentEncoding: "int64";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by date updated less than Unix time in milliseconds.";
                };
                readonly date_done_gt: {
                    readonly type: "integer";
                    readonly contentEncoding: "int64";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by date done greater than Unix time in milliseconds.";
                };
                readonly date_done_lt: {
                    readonly type: "integer";
                    readonly contentEncoding: "int64";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by date done less than Unix time in milliseconds.";
                };
                readonly custom_fields: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Include tasks with specific values in one or more Custom Fields. Custom Relationships are included.\\\n \\\nFor example: `?custom_fields=[{\"field_id\":\"abcdefghi12345678\",\"operator\":\"=\",\"value\":\"1234\"}{\"field_id\":\"jklmnop123456\",\"operator\":\"<\",\"value\":\"5\"}]`\\\n \\\nOnly set Custom Field values display in the `value` property of the `custom_fields` parameter. The `=` operator isn't supported with Label Custom Fields.\\\n \\\nLearn more about [filtering using Custom Fields.](doc:filtertasks)";
                };
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by its custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
                readonly parent: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Include the parent task ID to return subtasks.";
                };
                readonly include_markdown_description: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "To return task descriptions in Markdown format, use `?include_markdown_description=true`.";
                };
                readonly custom_items: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "number";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by custom task types. For example: \\\n \\\n`?custom_items[]=0&custom_items[]=1300` \\\n \\\nIncluding `0` returns tasks. Including `1` returns Milestones. Including any other number returns the custom task type as defined in your Workspace.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetFilteredTeamTasksresponse";
            readonly required: readonly ["tasks"];
            readonly type: "object";
            readonly properties: {
                readonly tasks: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Task3";
                        readonly required: readonly ["id", "custom_id", "name", "text_content", "description", "status", "orderindex", "date_created", "date_updated", "date_closed", "date_done", "creator", "assignees", "watchers", "checklists", "tags", "parent", "priority", "due_date", "start_date", "points", "time_estimate", "custom_fields", "dependencies", "linked_tasks", "team_id", "url", "permission_level", "list", "project", "folder", "space"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly custom_id: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly text_content: {
                                readonly type: "string";
                            };
                            readonly description: {
                                readonly type: "string";
                            };
                            readonly markdown_description: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly title: "Status";
                                readonly required: readonly ["status", "color", "orderindex", "type"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly status: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly orderindex: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly orderindex: {
                                readonly type: "string";
                            };
                            readonly date_created: {
                                readonly type: "string";
                            };
                            readonly date_updated: {
                                readonly type: "string";
                            };
                            readonly date_closed: {
                                readonly type: "string";
                            };
                            readonly date_done: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly creator: {
                                readonly title: "Creator5";
                                readonly required: readonly ["id", "username", "color", "email", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly assignees: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "Assignees1";
                                    readonly required: readonly ["id", "username", "color", "email", "profilePicture"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly username: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                        };
                                        readonly profilePicture: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                            readonly watchers: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "Watchers1";
                                    readonly required: readonly ["id", "username", "color", "email", "profilePicture"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly username: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                        };
                                        readonly profilePicture: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                            readonly checklists: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "Checklists6";
                                    readonly required: readonly ["id", "task_id", "name", "date_created", "orderindex", "creator", "resolved", "unresolved", "items"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                        };
                                        readonly task_id: {
                                            readonly type: "string";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                        };
                                        readonly date_created: {
                                            readonly type: "string";
                                        };
                                        readonly orderindex: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly creator: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly resolved: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly unresolved: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly items: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly title: "Item1";
                                                readonly required: readonly ["id", "name", "orderindex", "assignee", "resolved", "parent", "date_created", "children"];
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                    };
                                                    readonly orderindex: {
                                                        readonly type: "integer";
                                                        readonly contentEncoding: "int32";
                                                    };
                                                    readonly assignee: {
                                                        readonly type: readonly ["string", "null"];
                                                    };
                                                    readonly resolved: {
                                                        readonly type: "boolean";
                                                    };
                                                    readonly parent: {
                                                        readonly type: readonly ["string", "null"];
                                                    };
                                                    readonly date_created: {
                                                        readonly type: "string";
                                                    };
                                                    readonly children: {
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                        readonly description: "";
                                                    };
                                                };
                                            };
                                            readonly description: "";
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                            readonly tags: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "Tags6";
                                    readonly required: readonly ["name", "tag_fg", "tag_bg"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly type: "string";
                                        };
                                        readonly tag_fg: {
                                            readonly type: "string";
                                        };
                                        readonly tag_bg: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                            readonly parent: {
                                readonly type: "string";
                            };
                            readonly priority: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly due_date: {
                                readonly type: "string";
                            };
                            readonly start_date: {
                                readonly type: "string";
                            };
                            readonly points: {
                                readonly type: "number";
                            };
                            readonly time_estimate: {
                                readonly type: "number";
                            };
                            readonly custom_fields: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "CustomFields9";
                                    readonly required: readonly ["id", "name", "type", "type_config", "date_created", "hide_from_guests", "required"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                        };
                                        readonly type: {
                                            readonly type: "string";
                                        };
                                        readonly type_config: {
                                            readonly type: "object";
                                            readonly additionalProperties: true;
                                        };
                                        readonly date_created: {
                                            readonly type: "string";
                                        };
                                        readonly hide_from_guests: {
                                            readonly type: "boolean";
                                        };
                                        readonly required: {
                                            readonly type: "boolean";
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                            readonly dependencies: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly linked_tasks: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly team_id: {
                                readonly type: "string";
                            };
                            readonly url: {
                                readonly type: "string";
                            };
                            readonly permission_level: {
                                readonly type: "string";
                            };
                            readonly list: {
                                readonly title: "List2";
                                readonly required: readonly ["id", "name", "access"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly access: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly project: {
                                readonly title: "Project";
                                readonly required: readonly ["id", "name", "hidden", "access"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly hidden: {
                                        readonly type: "boolean";
                                    };
                                    readonly access: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly folder: {
                                readonly title: "Folder3";
                                readonly required: readonly ["id", "name", "hidden", "access"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly hidden: {
                                        readonly type: "boolean";
                                    };
                                    readonly access: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly space: {
                                readonly title: "Space";
                                readonly required: readonly ["id"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetFolder: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly folder_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [457];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["folder_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetFolderresponse";
            readonly required: readonly ["id", "name", "orderindex", "override_statuses", "hidden", "space", "task_count", "lists"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly orderindex: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                };
                readonly override_statuses: {
                    readonly type: "boolean";
                };
                readonly hidden: {
                    readonly type: "boolean";
                };
                readonly space: {
                    readonly title: "Space2";
                    readonly required: readonly ["id", "name", "access"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly task_count: {
                    readonly type: "string";
                };
                readonly lists: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetFolderAvailableFields: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly folder_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["folder_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetFolderAvailableFieldsresponse";
            readonly required: readonly ["fields"];
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Field";
                        readonly required: readonly ["id", "name", "type", "type_config", "date_created", "hide_from_guests"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly type_config: {
                                readonly title: "TypeConfig";
                                readonly type: "object";
                                readonly properties: {
                                    readonly options: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly title: "Option";
                                            readonly required: readonly ["id", "color"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly label: {
                                                    readonly type: "string";
                                                };
                                                readonly color: {
                                                    readonly type: readonly ["string", "null"];
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                };
                                                readonly value: {
                                                    readonly type: "integer";
                                                    readonly contentEncoding: "int32";
                                                };
                                                readonly type: {
                                                    readonly type: "string";
                                                };
                                                readonly orderindex: {
                                                    readonly type: "integer";
                                                    readonly contentEncoding: "int32";
                                                };
                                            };
                                        };
                                        readonly description: "";
                                    };
                                    readonly default: {
                                        readonly oneOf: readonly [{
                                            readonly type: readonly ["string", "null"];
                                        }, {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        }, {}];
                                    };
                                    readonly precision: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly currency_type: {
                                        readonly type: "string";
                                    };
                                    readonly placeholder: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly end: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly start: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly count: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly code_point: {
                                        readonly type: "string";
                                    };
                                    readonly tracking: {
                                        readonly title: "Tracking";
                                        readonly required: readonly ["subtasks", "checklists", "assigned_comments"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly subtasks: {
                                                readonly type: "boolean";
                                            };
                                            readonly checklists: {
                                                readonly type: "boolean";
                                            };
                                            readonly assigned_comments: {
                                                readonly type: "boolean";
                                            };
                                        };
                                    };
                                    readonly complete_on: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                };
                            };
                            readonly date_created: {
                                readonly type: "string";
                            };
                            readonly hide_from_guests: {
                                readonly type: "boolean";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetFolderViews: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly folder_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [457];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["folder_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetFolderViewsresponse";
            readonly required: readonly ["views"];
            readonly type: "object";
            readonly properties: {
                readonly views: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "View";
                        readonly required: readonly ["id", "name", "type", "parent", "grouping", "divide", "sorting", "filters", "columns", "team_sidebar", "settings"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly parent: {
                                readonly title: "Parent";
                                readonly description: "The parent parameter specifies where the view is located in the ClickUp Hierarchy. Both `id` and `type` are required. \\\n \\\nThe `id` is the id of the Workspace, Space, Folder, or List where the view is located. \\\n \\\nThe `type` value indciates the level of the Hierarchy where the view is located.";
                                readonly required: readonly ["id", "type"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "The id of the Workspace, Space, Folder, or List where the view is located.";
                                    };
                                    readonly type: {
                                        readonly type: "integer";
                                        readonly description: "The level of the Hierarchy where the view is created. \\\n \\\nOptions include: \\\n \\\nWorkspace (Everything Level): `7` \\\n \\\nSpace: `4` \\\n \\\nFolder: `5` \\\n \\\nList: `6`";
                                        readonly contentEncoding: "int32";
                                    };
                                };
                            };
                            readonly grouping: {
                                readonly title: "Grouping";
                                readonly required: readonly ["field", "dir", "collapsed", "ignore"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly field: {
                                        readonly type: "string";
                                        readonly description: "Set the field to group by.\\\n \\\nOptions include: `none`, `status`, `priority`, `assignee`, `tag`, or `dueDate`.";
                                    };
                                    readonly dir: {
                                        readonly description: "Set a group sort order using `1` or `-1`.\\\n \\\nFor example, use `1`show tasks with urgent priority at the top of your view, and tasks with no priority at the bottom.\\\n \\\nUse `-1` to reverse the order to show tasks with no priority at the top of your view.";
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly collapsed: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "";
                                    };
                                    readonly ignore: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly divide: {
                                readonly title: "Divide";
                                readonly required: readonly ["collapsed"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly field: {
                                        readonly type: "null";
                                    };
                                    readonly dir: {
                                        readonly type: "null";
                                    };
                                    readonly collapsed: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly sorting: {
                                readonly title: "Sorting";
                                readonly required: readonly ["fields"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly fields: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "Include an array of fields to sort by.\\\n \\\n You can sort by the same fields available when [filtering a view](doc:filter-views).";
                                    };
                                };
                            };
                            readonly filters: {
                                readonly title: "Filters";
                                readonly required: readonly ["op", "fields", "search", "show_closed"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly op: {
                                        readonly type: "string";
                                        readonly description: "The available operator (`op``) values are `AND`` and `OR``.";
                                    };
                                    readonly fields: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "View the list of [fields available](doc:filter-views) to filter by.";
                                    };
                                    readonly search: {
                                        readonly type: "string";
                                    };
                                    readonly show_closed: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly columns: {
                                readonly title: "Columns";
                                readonly description: "Custom Fields added to a view at the Everything level will be added to all tasks in your Workspace. Once Custom Fields are added to one of these views, you cannot move it to another level of the Hierarchy.";
                                readonly required: readonly ["fields"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly fields: {
                                        readonly description: "Custom Fields require the `_cf` prefix and must be formatted as a JSON object.";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly team_sidebar: {
                                readonly title: "TeamSidebar";
                                readonly required: readonly ["assignees", "assigned_comments", "unassigned_tasks"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly assignees: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "";
                                    };
                                    readonly assigned_comments: {
                                        readonly type: "boolean";
                                    };
                                    readonly unassigned_tasks: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly settings: {
                                readonly title: "Settings";
                                readonly required: readonly ["show_task_locations", "show_subtasks", "show_subtask_parent_names", "show_closed_subtasks", "show_assignees", "show_images", "collapse_empty_columns", "me_comments", "me_subtasks", "me_checklists"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly show_task_locations: {
                                        readonly type: "boolean";
                                    };
                                    readonly show_subtasks: {
                                        readonly description: "Acceptable values are `1`, `2`, or `3`, which show subtasks separate, expanded, or collapsed.";
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly show_subtask_parent_names: {
                                        readonly type: "boolean";
                                    };
                                    readonly show_closed_subtasks: {
                                        readonly type: "boolean";
                                    };
                                    readonly show_assignees: {
                                        readonly type: "boolean";
                                    };
                                    readonly show_images: {
                                        readonly type: "boolean";
                                    };
                                    readonly collapse_empty_columns: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly me_comments: {
                                        readonly type: "boolean";
                                    };
                                    readonly me_subtasks: {
                                        readonly type: "boolean";
                                    };
                                    readonly me_checklists: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetFolderlessLists: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly space_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [789];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["space_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly archived: {
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetFolderlessListsresponse";
            readonly required: readonly ["lists"];
            readonly type: "object";
            readonly properties: {
                readonly lists: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "List4";
                        readonly required: readonly ["id", "name", "orderindex", "content", "status", "priority", "assignee", "task_count", "due_date", "start_date", "folder", "space", "archived", "override_statuses", "permission_level"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly orderindex: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly content: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly oneOf: readonly [{
                                    readonly title: "Status11";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly status: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                        readonly hide_label: {
                                            readonly type: "boolean";
                                        };
                                    };
                                }, {
                                    readonly type: readonly ["string", "null"];
                                }, {}];
                            };
                            readonly priority: {
                                readonly oneOf: readonly [{
                                    readonly title: "Priority4";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly priority: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                    };
                                }, {
                                    readonly type: readonly ["string", "null"];
                                }, {}];
                            };
                            readonly assignee: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly task_count: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly due_date: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly start_date: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly folder: {
                                readonly title: "Folder3";
                                readonly required: readonly ["id", "name", "hidden", "access"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly hidden: {
                                        readonly type: "boolean";
                                    };
                                    readonly access: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly space: {
                                readonly title: "Space2";
                                readonly required: readonly ["id", "name", "access"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly access: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly archived: {
                                readonly type: "boolean";
                            };
                            readonly override_statuses: {
                                readonly type: "boolean";
                            };
                            readonly permission_level: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetFolders: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly space_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [789];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["space_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly archived: {
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly description: "";
            readonly contentMediaType: "application/json";
            readonly title: "GetFoldersresponse";
            readonly required: readonly ["folders"];
            readonly type: "object";
            readonly properties: {
                readonly folders: {
                    readonly title: "Folder5";
                    readonly required: readonly ["id", "name", "orderindex", "override_statuses", "hidden", "space", "task_count", "lists"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly orderindex: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly override_statuses: {
                            readonly type: "boolean";
                        };
                        readonly hidden: {
                            readonly type: "boolean";
                        };
                        readonly space: {
                            readonly title: "Space2";
                            readonly required: readonly ["id", "name", "access"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly access: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly task_count: {
                            readonly type: "string";
                        };
                        readonly lists: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetGoal: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly goal_id: {
                    readonly type: "string";
                    readonly examples: readonly ["e53a033c"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "900e-462d-a849-4a216b06d930 (uuid)";
                };
            };
            readonly required: readonly ["goal_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetGoalresponse";
            readonly required: readonly ["goal"];
            readonly type: "object";
            readonly properties: {
                readonly goal: {
                    readonly title: "Goal";
                    readonly required: readonly ["id", "name", "team_id", "date_created", "start_date", "due_date", "description", "private", "archived", "creator", "color", "pretty_id", "multiple_owners", "folder_id", "members", "owners", "key_results", "percent_completed", "history", "pretty_url"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly team_id: {
                            readonly type: "string";
                        };
                        readonly date_created: {
                            readonly type: "string";
                        };
                        readonly start_date: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly due_date: {
                            readonly type: "string";
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly private: {
                            readonly type: "boolean";
                        };
                        readonly archived: {
                            readonly type: "boolean";
                        };
                        readonly creator: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly pretty_id: {
                            readonly type: "string";
                        };
                        readonly multiple_owners: {
                            readonly type: "boolean";
                        };
                        readonly folder_id: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly members: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly owners: {
                            readonly type: "array";
                            readonly items: {
                                readonly title: "Owner";
                                readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly description: "";
                        };
                        readonly key_results: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly percent_completed: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly history: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly pretty_url: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetGoals: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly include_completed: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetGoalsresponse";
            readonly required: readonly ["goals", "folders"];
            readonly type: "object";
            readonly properties: {
                readonly goals: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Goal2";
                        readonly required: readonly ["id", "pretty_id", "name", "team_id", "creator", "owner", "color", "date_created", "start_date", "due_date", "description", "private", "archived", "multiple_owners", "editor_token", "date_updated", "last_update", "folder_id", "pinned", "owners", "key_result_count", "members", "group_members", "percent_completed"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly pretty_id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly team_id: {
                                readonly type: "string";
                            };
                            readonly creator: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly owner: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly color: {
                                readonly type: "string";
                            };
                            readonly date_created: {
                                readonly type: "string";
                            };
                            readonly start_date: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly due_date: {
                                readonly type: "string";
                            };
                            readonly description: {
                                readonly type: "string";
                            };
                            readonly private: {
                                readonly type: "boolean";
                            };
                            readonly archived: {
                                readonly type: "boolean";
                            };
                            readonly multiple_owners: {
                                readonly type: "boolean";
                            };
                            readonly editor_token: {
                                readonly type: "string";
                            };
                            readonly date_updated: {
                                readonly type: "string";
                            };
                            readonly last_update: {
                                readonly type: "string";
                            };
                            readonly folder_id: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly pinned: {
                                readonly type: "boolean";
                            };
                            readonly owners: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly key_result_count: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly members: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "Member1";
                                    readonly required: readonly ["id", "username", "email", "color", "permission_level", "profilePicture", "initials", "isCreator"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly username: {
                                            readonly type: "string";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                        readonly permission_level: {
                                            readonly type: "string";
                                        };
                                        readonly profilePicture: {
                                            readonly type: "string";
                                        };
                                        readonly initials: {
                                            readonly type: "string";
                                        };
                                        readonly isCreator: {
                                            readonly type: "boolean";
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                            readonly group_members: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly percent_completed: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                        };
                    };
                    readonly description: "";
                };
                readonly folders: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Folder2";
                        readonly required: readonly ["id", "name", "team_id", "private", "date_created", "creator", "goal_count", "members", "goals"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly team_id: {
                                readonly type: "string";
                            };
                            readonly private: {
                                readonly type: "boolean";
                            };
                            readonly date_created: {
                                readonly type: "string";
                            };
                            readonly creator: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly goal_count: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly members: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "Member2";
                                    readonly required: readonly ["id", "email", "username", "color", "permission_level", "date_added", "added_by", "initials", "profilePicture"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                        };
                                        readonly username: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                        readonly permission_level: {
                                            readonly type: "string";
                                        };
                                        readonly date_added: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int64";
                                        };
                                        readonly added_by: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly initials: {
                                            readonly type: "string";
                                        };
                                        readonly profilePicture: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                            readonly goals: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "Goal3";
                                    readonly required: readonly ["id", "pretty_id", "name", "team_id", "creator", "owner", "color", "date_created", "start_date", "due_date", "description", "private", "archived", "multiple_owners", "editor_token", "date_updated", "last_update", "folder_id", "folder_access", "pinned", "owners", "key_result_count", "members", "group_members", "percent_completed"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                        };
                                        readonly pretty_id: {
                                            readonly type: "string";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                        };
                                        readonly team_id: {
                                            readonly type: "string";
                                        };
                                        readonly creator: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly owner: {
                                            readonly type: readonly ["string", "null"];
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                        readonly date_created: {
                                            readonly type: "string";
                                        };
                                        readonly start_date: {
                                            readonly type: readonly ["string", "null"];
                                        };
                                        readonly due_date: {
                                            readonly type: "string";
                                        };
                                        readonly description: {
                                            readonly type: "string";
                                        };
                                        readonly private: {
                                            readonly type: "boolean";
                                        };
                                        readonly archived: {
                                            readonly type: "boolean";
                                        };
                                        readonly multiple_owners: {
                                            readonly type: "boolean";
                                        };
                                        readonly editor_token: {
                                            readonly type: "string";
                                        };
                                        readonly date_updated: {
                                            readonly type: "string";
                                        };
                                        readonly last_update: {
                                            readonly type: "string";
                                        };
                                        readonly folder_id: {
                                            readonly type: "string";
                                        };
                                        readonly folder_access: {
                                            readonly type: "boolean";
                                        };
                                        readonly pinned: {
                                            readonly type: "boolean";
                                        };
                                        readonly owners: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                            readonly description: "";
                                        };
                                        readonly key_result_count: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly members: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly title: "Member1";
                                                readonly required: readonly ["id", "username", "email", "color", "permission_level", "profilePicture", "initials", "isCreator"];
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "integer";
                                                        readonly contentEncoding: "int32";
                                                    };
                                                    readonly username: {
                                                        readonly type: "string";
                                                    };
                                                    readonly email: {
                                                        readonly type: "string";
                                                    };
                                                    readonly color: {
                                                        readonly type: "string";
                                                    };
                                                    readonly permission_level: {
                                                        readonly type: "string";
                                                    };
                                                    readonly profilePicture: {
                                                        readonly type: "string";
                                                    };
                                                    readonly initials: {
                                                        readonly type: "string";
                                                    };
                                                    readonly isCreator: {
                                                        readonly type: "boolean";
                                                    };
                                                };
                                            };
                                            readonly description: "";
                                        };
                                        readonly group_members: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "string";
                                            };
                                            readonly description: "";
                                        };
                                        readonly percent_completed: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetGuest: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
                readonly guest_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [403];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["team_id", "guest_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly list_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [124];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The List ID. To find the List ID, right-click the List in your Sidebar, select Copy link, and paste the link in your URL. The last string in the URL is your List ID.";
                };
            };
            readonly required: readonly ["list_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetListresponse";
            readonly required: readonly ["id", "name", "orderindex", "content", "status", "priority", "assignee", "due_date", "due_date_time", "start_date", "start_date_time", "folder", "space", "inbound_address", "archived", "override_statuses", "statuses", "permission_level"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly orderindex: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                };
                readonly content: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly title: "Status5";
                    readonly required: readonly ["status", "color", "hide_label"];
                    readonly type: "object";
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly hide_label: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly priority: {
                    readonly title: "Priority1";
                    readonly required: readonly ["priority", "color"];
                    readonly type: "object";
                    readonly properties: {
                        readonly priority: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                    };
                };
                readonly assignee: {
                    readonly type: readonly ["string", "null"];
                };
                readonly due_date: {
                    readonly type: "string";
                };
                readonly due_date_time: {
                    readonly type: "boolean";
                };
                readonly start_date: {
                    readonly type: readonly ["string", "null"];
                };
                readonly start_date_time: {
                    readonly type: readonly ["string", "null"];
                };
                readonly folder: {
                    readonly title: "Folder3";
                    readonly required: readonly ["id", "name", "hidden", "access"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly hidden: {
                            readonly type: "boolean";
                        };
                        readonly access: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly space: {
                    readonly title: "Space2";
                    readonly required: readonly ["id", "name", "access"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly inbound_address: {
                    readonly type: "string";
                };
                readonly archived: {
                    readonly type: "boolean";
                };
                readonly override_statuses: {
                    readonly type: "boolean";
                };
                readonly statuses: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Status";
                        readonly required: readonly ["status", "color", "orderindex", "type"];
                        readonly type: "object";
                        readonly properties: {
                            readonly status: {
                                readonly type: "string";
                            };
                            readonly color: {
                                readonly type: "string";
                            };
                            readonly orderindex: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
                readonly permission_level: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetListComments: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly list_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [124];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["list_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly start: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Enter the `date` of a List info comment using Unix time in milliseconds.";
                };
                readonly start_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Enter the Comment `id` of a List info comment.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetListCommentsresponse";
            readonly required: readonly ["comments"];
            readonly type: "object";
            readonly properties: {
                readonly comments: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Comment";
                        readonly required: readonly ["id", "comment", "comment_text", "user", "resolved", "assignee", "assigned_by", "reactions", "date"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly comment: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "Comment1";
                                    readonly required: readonly ["text"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly text: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                            readonly comment_text: {
                                readonly type: "string";
                            };
                            readonly user: {
                                readonly title: "User2";
                                readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly resolved: {
                                readonly type: "boolean";
                            };
                            readonly assignee: {
                                readonly title: "Assignee";
                                readonly required: readonly ["id", "username", "email", "color", "initials", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly assigned_by: {
                                readonly title: "AssignedBy";
                                readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly reactions: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly date: {
                                readonly type: "string";
                            };
                            readonly reply_count: {
                                readonly type: "string";
                                readonly description: "For threaded comments, `reply_count` is always 0.";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetListMembers: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly list_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["list_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetListMembersresponse";
            readonly required: readonly ["members"];
            readonly type: "object";
            readonly properties: {
                readonly members: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Member5";
                        readonly required: readonly ["id", "username", "email", "color", "initials", "profilePicture", "profileInfo"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly username: {
                                readonly type: "string";
                            };
                            readonly email: {
                                readonly type: "string";
                            };
                            readonly color: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly initials: {
                                readonly type: "string";
                            };
                            readonly profilePicture: {
                                readonly type: "string";
                            };
                            readonly profileInfo: {
                                readonly title: "ProfileInfo";
                                readonly required: readonly ["display_profile", "verified_ambassador", "verified_consultant", "top_tier_user", "viewed_verified_ambassador", "viewed_verified_consultant", "viewed_top_tier_user"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly display_profile: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly verified_ambassador: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly verified_consultant: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly top_tier_user: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly viewed_verified_ambassador: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly viewed_verified_consultant: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly viewed_top_tier_user: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetListViews: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly list_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [124];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["list_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetListViewsresponse";
            readonly required: readonly ["views"];
            readonly type: "object";
            readonly properties: {
                readonly views: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "View";
                        readonly required: readonly ["id", "name", "type", "parent", "grouping", "divide", "sorting", "filters", "columns", "team_sidebar", "settings"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly parent: {
                                readonly title: "Parent";
                                readonly description: "The parent parameter specifies where the view is located in the ClickUp Hierarchy. Both `id` and `type` are required. \\\n \\\nThe `id` is the id of the Workspace, Space, Folder, or List where the view is located. \\\n \\\nThe `type` value indciates the level of the Hierarchy where the view is located.";
                                readonly required: readonly ["id", "type"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "The id of the Workspace, Space, Folder, or List where the view is located.";
                                    };
                                    readonly type: {
                                        readonly type: "integer";
                                        readonly description: "The level of the Hierarchy where the view is created. \\\n \\\nOptions include: \\\n \\\nWorkspace (Everything Level): `7` \\\n \\\nSpace: `4` \\\n \\\nFolder: `5` \\\n \\\nList: `6`";
                                        readonly contentEncoding: "int32";
                                    };
                                };
                            };
                            readonly grouping: {
                                readonly title: "Grouping";
                                readonly required: readonly ["field", "dir", "collapsed", "ignore"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly field: {
                                        readonly type: "string";
                                        readonly description: "Set the field to group by.\\\n \\\nOptions include: `none`, `status`, `priority`, `assignee`, `tag`, or `dueDate`.";
                                    };
                                    readonly dir: {
                                        readonly description: "Set a group sort order using `1` or `-1`.\\\n \\\nFor example, use `1`show tasks with urgent priority at the top of your view, and tasks with no priority at the bottom.\\\n \\\nUse `-1` to reverse the order to show tasks with no priority at the top of your view.";
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly collapsed: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "";
                                    };
                                    readonly ignore: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly divide: {
                                readonly title: "Divide";
                                readonly required: readonly ["collapsed"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly field: {
                                        readonly type: "null";
                                    };
                                    readonly dir: {
                                        readonly type: "null";
                                    };
                                    readonly collapsed: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly sorting: {
                                readonly title: "Sorting";
                                readonly required: readonly ["fields"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly fields: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "Include an array of fields to sort by.\\\n \\\n You can sort by the same fields available when [filtering a view](doc:filter-views).";
                                    };
                                };
                            };
                            readonly filters: {
                                readonly title: "Filters";
                                readonly required: readonly ["op", "fields", "search", "show_closed"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly op: {
                                        readonly type: "string";
                                        readonly description: "The available operator (`op``) values are `AND`` and `OR``.";
                                    };
                                    readonly fields: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "View the list of [fields available](doc:filter-views) to filter by.";
                                    };
                                    readonly search: {
                                        readonly type: "string";
                                    };
                                    readonly show_closed: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly columns: {
                                readonly title: "Columns";
                                readonly description: "Custom Fields added to a view at the Everything level will be added to all tasks in your Workspace. Once Custom Fields are added to one of these views, you cannot move it to another level of the Hierarchy.";
                                readonly required: readonly ["fields"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly fields: {
                                        readonly description: "Custom Fields require the `_cf` prefix and must be formatted as a JSON object.";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly team_sidebar: {
                                readonly title: "TeamSidebar";
                                readonly required: readonly ["assignees", "assigned_comments", "unassigned_tasks"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly assignees: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "";
                                    };
                                    readonly assigned_comments: {
                                        readonly type: "boolean";
                                    };
                                    readonly unassigned_tasks: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly settings: {
                                readonly title: "Settings";
                                readonly required: readonly ["show_task_locations", "show_subtasks", "show_subtask_parent_names", "show_closed_subtasks", "show_assignees", "show_images", "collapse_empty_columns", "me_comments", "me_subtasks", "me_checklists"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly show_task_locations: {
                                        readonly type: "boolean";
                                    };
                                    readonly show_subtasks: {
                                        readonly description: "Acceptable values are `1`, `2`, or `3`, which show subtasks separate, expanded, or collapsed.";
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly show_subtask_parent_names: {
                                        readonly type: "boolean";
                                    };
                                    readonly show_closed_subtasks: {
                                        readonly type: "boolean";
                                    };
                                    readonly show_assignees: {
                                        readonly type: "boolean";
                                    };
                                    readonly show_images: {
                                        readonly type: "boolean";
                                    };
                                    readonly collapse_empty_columns: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly me_comments: {
                                        readonly type: "boolean";
                                    };
                                    readonly me_subtasks: {
                                        readonly type: "boolean";
                                    };
                                    readonly me_checklists: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetLists: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly folder_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [456];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["folder_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly archived: {
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetListsresponse";
            readonly required: readonly ["lists"];
            readonly type: "object";
            readonly properties: {
                readonly lists: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "List4";
                        readonly required: readonly ["id", "name", "orderindex", "content", "status", "priority", "assignee", "task_count", "due_date", "start_date", "folder", "space", "archived", "override_statuses", "permission_level"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly orderindex: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly content: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly oneOf: readonly [{
                                    readonly title: "Status11";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly status: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                        readonly hide_label: {
                                            readonly type: "boolean";
                                        };
                                    };
                                }, {
                                    readonly type: readonly ["string", "null"];
                                }, {}];
                            };
                            readonly priority: {
                                readonly oneOf: readonly [{
                                    readonly title: "Priority4";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly priority: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                    };
                                }, {
                                    readonly type: readonly ["string", "null"];
                                }, {}];
                            };
                            readonly assignee: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly task_count: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly due_date: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly start_date: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly folder: {
                                readonly title: "Folder3";
                                readonly required: readonly ["id", "name", "hidden", "access"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly hidden: {
                                        readonly type: "boolean";
                                    };
                                    readonly access: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly space: {
                                readonly title: "Space2";
                                readonly required: readonly ["id", "name", "access"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly access: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly archived: {
                                readonly type: "boolean";
                            };
                            readonly override_statuses: {
                                readonly type: "boolean";
                            };
                            readonly permission_level: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetPage: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly workspaceId: {
                    readonly type: "number";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the Workspace.";
                };
                readonly docId: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the Doc.";
                };
                readonly pageId: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the page.";
                };
            };
            readonly required: readonly ["workspaceId", "docId", "pageId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly content_format: {
                    readonly default: "text/md";
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The format to return the page content in. For example, `text/md` for markdown or `text/plain` for plain.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly doc_id: {
                    readonly type: "string";
                };
                readonly parent_page_id: {
                    readonly type: "string";
                };
                readonly workspace_id: {
                    readonly type: "number";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly pages: {
                    readonly type: "array";
                    readonly description: "More nested documents with the same object structure.";
                    readonly items: {};
                };
                readonly sub_title: {
                    readonly type: "string";
                };
                readonly date_created: {
                    readonly type: "number";
                };
                readonly date_updated: {
                    readonly type: "number";
                };
                readonly content: {
                    readonly type: "string";
                };
                readonly avatar: {
                    readonly type: "object";
                    readonly properties: {
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly value: {
                            readonly type: "string";
                        };
                        readonly source: {
                            readonly type: "string";
                        };
                    };
                };
                readonly creator_id: {
                    readonly type: "number";
                };
                readonly deleted: {
                    readonly type: "boolean";
                };
                readonly deleted_by: {
                    readonly type: "number";
                };
                readonly date_deleted: {
                    readonly type: "number";
                };
                readonly date_edited: {
                    readonly type: "number";
                };
                readonly edited_by: {
                    readonly type: "number";
                };
                readonly archived: {
                    readonly type: "boolean";
                };
                readonly archived_by: {
                    readonly type: "number";
                };
                readonly date_archived: {
                    readonly type: "number";
                };
                readonly authors: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "number";
                    };
                };
                readonly contributors: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "number";
                    };
                };
                readonly cover: {
                    readonly type: "object";
                    readonly properties: {
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly image_url: {
                            readonly type: "string";
                        };
                        readonly position: {
                            readonly type: "object";
                            readonly properties: {
                                readonly x: {
                                    readonly type: "number";
                                };
                                readonly y: {
                                    readonly type: "number";
                                };
                            };
                            readonly required: readonly ["x", "y"];
                        };
                    };
                };
                readonly protected: {
                    readonly type: "boolean";
                };
                readonly protected_by: {
                    readonly type: "number";
                };
                readonly protected_note: {
                    readonly type: "string";
                };
                readonly presentation_details: {
                    readonly type: "object";
                    readonly properties: {
                        readonly font: {
                            readonly type: "string";
                        };
                        readonly font_size: {
                            readonly type: "number";
                        };
                        readonly line_height: {
                            readonly type: "number";
                        };
                        readonly page_width: {
                            readonly type: "number";
                        };
                        readonly paragraph_spacing: {
                            readonly type: "number";
                        };
                        readonly show_author_header: {
                            readonly type: "boolean";
                        };
                        readonly show_contributor_header: {
                            readonly type: "boolean";
                        };
                        readonly show_cover_header: {
                            readonly type: "boolean";
                        };
                        readonly show_date_header: {
                            readonly type: "boolean";
                        };
                        readonly show_page_outline: {
                            readonly type: "boolean";
                        };
                        readonly show_sub_pages: {
                            readonly type: "boolean";
                        };
                        readonly sub_page_size: {
                            readonly type: "string";
                        };
                        readonly show_sub_title_header: {
                            readonly type: "boolean";
                        };
                        readonly show_title_icon_header: {
                            readonly type: "boolean";
                        };
                        readonly show_relationships: {
                            readonly type: "boolean";
                        };
                        readonly show_relationships_compact: {
                            readonly type: "boolean";
                        };
                        readonly show_sub_pages_author: {
                            readonly type: "boolean";
                        };
                        readonly show_sub_pages_thumbnail: {
                            readonly type: "boolean";
                        };
                        readonly show_sub_pages_compact: {
                            readonly type: "boolean";
                        };
                        readonly sub_pages_style: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly required: readonly ["id", "doc_id", "workspace_id", "name", "date_created", "content", "creator_id", "authors"];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetSpace: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly space_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [790];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["space_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetSpaceresponse";
            readonly required: readonly ["id", "name", "private", "statuses", "multiple_assignees", "features"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly private: {
                    readonly type: "boolean";
                };
                readonly statuses: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Status";
                        readonly required: readonly ["status", "color", "orderindex", "type"];
                        readonly type: "object";
                        readonly properties: {
                            readonly status: {
                                readonly type: "string";
                            };
                            readonly color: {
                                readonly type: "string";
                            };
                            readonly orderindex: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
                readonly multiple_assignees: {
                    readonly type: "boolean";
                };
                readonly features: {
                    readonly title: "Features";
                    readonly required: readonly ["due_dates", "time_tracking", "tags", "time_estimates", "checklists", "custom_fields", "remap_dependencies", "dependency_warning", "portfolios"];
                    readonly type: "object";
                    readonly properties: {
                        readonly due_dates: {
                            readonly title: "DueDates";
                            readonly required: readonly ["enabled", "start_date", "remap_due_dates", "remap_closed_due_date"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                                readonly start_date: {
                                    readonly type: "boolean";
                                };
                                readonly remap_due_dates: {
                                    readonly type: "boolean";
                                };
                                readonly remap_closed_due_date: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly time_tracking: {
                            readonly title: "TimeTracking";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly tags: {
                            readonly title: "Tags";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly time_estimates: {
                            readonly title: "TimeEstimates";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly checklists: {
                            readonly title: "Checklists";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly custom_fields: {
                            readonly title: "CustomFields";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly remap_dependencies: {
                            readonly title: "RemapDependencies";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly dependency_warning: {
                            readonly title: "DependencyWarning";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly portfolios: {
                            readonly title: "Portfolios";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetSpaceAvailableFields: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly space_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["space_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetSpaceAvailableFieldsresponse";
            readonly required: readonly ["fields"];
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Field";
                        readonly required: readonly ["id", "name", "type", "type_config", "date_created", "hide_from_guests"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly type_config: {
                                readonly title: "TypeConfig";
                                readonly type: "object";
                                readonly properties: {
                                    readonly options: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly title: "Option";
                                            readonly required: readonly ["id", "color"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly label: {
                                                    readonly type: "string";
                                                };
                                                readonly color: {
                                                    readonly type: readonly ["string", "null"];
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                };
                                                readonly value: {
                                                    readonly type: "integer";
                                                    readonly contentEncoding: "int32";
                                                };
                                                readonly type: {
                                                    readonly type: "string";
                                                };
                                                readonly orderindex: {
                                                    readonly type: "integer";
                                                    readonly contentEncoding: "int32";
                                                };
                                            };
                                        };
                                        readonly description: "";
                                    };
                                    readonly default: {
                                        readonly oneOf: readonly [{
                                            readonly type: readonly ["string", "null"];
                                        }, {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        }, {}];
                                    };
                                    readonly precision: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly currency_type: {
                                        readonly type: "string";
                                    };
                                    readonly placeholder: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly end: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly start: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly count: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly code_point: {
                                        readonly type: "string";
                                    };
                                    readonly tracking: {
                                        readonly title: "Tracking";
                                        readonly required: readonly ["subtasks", "checklists", "assigned_comments"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly subtasks: {
                                                readonly type: "boolean";
                                            };
                                            readonly checklists: {
                                                readonly type: "boolean";
                                            };
                                            readonly assigned_comments: {
                                                readonly type: "boolean";
                                            };
                                        };
                                    };
                                    readonly complete_on: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                };
                            };
                            readonly date_created: {
                                readonly type: "string";
                            };
                            readonly hide_from_guests: {
                                readonly type: "boolean";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetSpaceTags: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly space_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [512];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["space_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetSpaceTagsresponse";
            readonly required: readonly ["tags"];
            readonly type: "object";
            readonly properties: {
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Tags6";
                        readonly required: readonly ["name", "tag_fg", "tag_bg"];
                        readonly type: "object";
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly tag_fg: {
                                readonly type: "string";
                            };
                            readonly tag_bg: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetSpaceViews: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly space_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [790];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["space_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetSpaceViewsresponse";
            readonly required: readonly ["views"];
            readonly type: "object";
            readonly properties: {
                readonly views: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "View";
                        readonly required: readonly ["id", "name", "type", "parent", "grouping", "divide", "sorting", "filters", "columns", "team_sidebar", "settings"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly parent: {
                                readonly title: "Parent";
                                readonly description: "The parent parameter specifies where the view is located in the ClickUp Hierarchy. Both `id` and `type` are required. \\\n \\\nThe `id` is the id of the Workspace, Space, Folder, or List where the view is located. \\\n \\\nThe `type` value indciates the level of the Hierarchy where the view is located.";
                                readonly required: readonly ["id", "type"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "The id of the Workspace, Space, Folder, or List where the view is located.";
                                    };
                                    readonly type: {
                                        readonly type: "integer";
                                        readonly description: "The level of the Hierarchy where the view is created. \\\n \\\nOptions include: \\\n \\\nWorkspace (Everything Level): `7` \\\n \\\nSpace: `4` \\\n \\\nFolder: `5` \\\n \\\nList: `6`";
                                        readonly contentEncoding: "int32";
                                    };
                                };
                            };
                            readonly grouping: {
                                readonly title: "Grouping";
                                readonly required: readonly ["field", "dir", "collapsed", "ignore"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly field: {
                                        readonly type: "string";
                                        readonly description: "Set the field to group by.\\\n \\\nOptions include: `none`, `status`, `priority`, `assignee`, `tag`, or `dueDate`.";
                                    };
                                    readonly dir: {
                                        readonly description: "Set a group sort order using `1` or `-1`.\\\n \\\nFor example, use `1`show tasks with urgent priority at the top of your view, and tasks with no priority at the bottom.\\\n \\\nUse `-1` to reverse the order to show tasks with no priority at the top of your view.";
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly collapsed: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "";
                                    };
                                    readonly ignore: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly divide: {
                                readonly title: "Divide";
                                readonly required: readonly ["collapsed"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly field: {
                                        readonly type: "null";
                                    };
                                    readonly dir: {
                                        readonly type: "null";
                                    };
                                    readonly collapsed: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly sorting: {
                                readonly title: "Sorting";
                                readonly required: readonly ["fields"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly fields: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "Include an array of fields to sort by.\\\n \\\n You can sort by the same fields available when [filtering a view](doc:filter-views).";
                                    };
                                };
                            };
                            readonly filters: {
                                readonly title: "Filters";
                                readonly required: readonly ["op", "fields", "search", "show_closed"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly op: {
                                        readonly type: "string";
                                        readonly description: "The available operator (`op``) values are `AND`` and `OR``.";
                                    };
                                    readonly fields: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "View the list of [fields available](doc:filter-views) to filter by.";
                                    };
                                    readonly search: {
                                        readonly type: "string";
                                    };
                                    readonly show_closed: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly columns: {
                                readonly title: "Columns";
                                readonly description: "Custom Fields added to a view at the Everything level will be added to all tasks in your Workspace. Once Custom Fields are added to one of these views, you cannot move it to another level of the Hierarchy.";
                                readonly required: readonly ["fields"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly fields: {
                                        readonly description: "Custom Fields require the `_cf` prefix and must be formatted as a JSON object.";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly team_sidebar: {
                                readonly title: "TeamSidebar";
                                readonly required: readonly ["assignees", "assigned_comments", "unassigned_tasks"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly assignees: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "";
                                    };
                                    readonly assigned_comments: {
                                        readonly type: "boolean";
                                    };
                                    readonly unassigned_tasks: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly settings: {
                                readonly title: "Settings";
                                readonly required: readonly ["show_task_locations", "show_subtasks", "show_subtask_parent_names", "show_closed_subtasks", "show_assignees", "show_images", "collapse_empty_columns", "me_comments", "me_subtasks", "me_checklists"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly show_task_locations: {
                                        readonly type: "boolean";
                                    };
                                    readonly show_subtasks: {
                                        readonly description: "Acceptable values are `1`, `2`, or `3`, which show subtasks separate, expanded, or collapsed.";
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly show_subtask_parent_names: {
                                        readonly type: "boolean";
                                    };
                                    readonly show_closed_subtasks: {
                                        readonly type: "boolean";
                                    };
                                    readonly show_assignees: {
                                        readonly type: "boolean";
                                    };
                                    readonly show_images: {
                                        readonly type: "boolean";
                                    };
                                    readonly collapse_empty_columns: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly me_comments: {
                                        readonly type: "boolean";
                                    };
                                    readonly me_subtasks: {
                                        readonly type: "boolean";
                                    };
                                    readonly me_checklists: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetSpaces: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly archived: {
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetSpacesresponse";
            readonly required: readonly ["spaces"];
            readonly type: "object";
            readonly properties: {
                readonly spaces: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Space13";
                        readonly required: readonly ["id", "name", "private", "statuses", "multiple_assignees", "features"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly private: {
                                readonly type: "boolean";
                            };
                            readonly color: {
                                readonly type: "string";
                            };
                            readonly avatar: {
                                readonly type: "string";
                            };
                            readonly admin_can_manage: {
                                readonly type: "boolean";
                            };
                            readonly archived: {
                                readonly type: "boolean";
                            };
                            readonly members: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "Member";
                                    readonly required: readonly ["user"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly user: {
                                            readonly title: "User";
                                            readonly required: readonly ["id", "username", "color", "profilePicture"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "integer";
                                                    readonly contentEncoding: "int32";
                                                };
                                                readonly username: {
                                                    readonly type: "string";
                                                };
                                                readonly color: {
                                                    readonly type: "string";
                                                };
                                                readonly profilePicture: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly description: "";
                                readonly user: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly statuses: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "Status";
                                    readonly required: readonly ["status", "color", "orderindex", "type"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly status: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                        readonly orderindex: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly type: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                            readonly multiple_assignees: {
                                readonly type: "boolean";
                            };
                            readonly features: {
                                readonly title: "Features4";
                                readonly required: readonly ["due_dates", "time_tracking", "tags", "time_estimates", "checklists"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly due_dates: {
                                        readonly title: "DueDates";
                                        readonly required: readonly ["enabled", "start_date", "remap_due_dates", "remap_closed_due_date"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                            };
                                            readonly start_date: {
                                                readonly type: "boolean";
                                            };
                                            readonly remap_due_dates: {
                                                readonly type: "boolean";
                                            };
                                            readonly remap_closed_due_date: {
                                                readonly type: "boolean";
                                            };
                                        };
                                    };
                                    readonly time_tracking: {
                                        readonly title: "TimeTracking";
                                        readonly required: readonly ["enabled"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                            };
                                        };
                                    };
                                    readonly tags: {
                                        readonly title: "Tags";
                                        readonly required: readonly ["enabled"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                            };
                                        };
                                    };
                                    readonly time_estimates: {
                                        readonly title: "TimeEstimates";
                                        readonly required: readonly ["enabled"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                            };
                                        };
                                    };
                                    readonly checklists: {
                                        readonly title: "Checklists";
                                        readonly required: readonly ["enabled"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                            };
                                        };
                                    };
                                    readonly custom_fields: {
                                        readonly title: "CustomFields";
                                        readonly required: readonly ["enabled"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                            };
                                        };
                                    };
                                    readonly remap_dependencies: {
                                        readonly title: "RemapDependencies";
                                        readonly required: readonly ["enabled"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                            };
                                        };
                                    };
                                    readonly dependency_warning: {
                                        readonly title: "DependencyWarning";
                                        readonly required: readonly ["enabled"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                            };
                                        };
                                    };
                                    readonly portfolios: {
                                        readonly title: "Portfolios";
                                        readonly required: readonly ["enabled"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetTask: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hz"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by its custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
                readonly include_subtasks: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Include subtasks, default false";
                };
                readonly include_markdown_description: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "To return task descriptions in Markdown format, use `?include_markdown_description=true`.";
                };
                readonly custom_fields: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Include tasks with specific values in one or more Custom Fields. Custom Relationships are included.\\\n \\\nFor example: `?custom_fields=[{\"field_id\":\"abcdefghi12345678\",\"operator\":\"=\",\"value\":\"1234\"},{\"field_id\":\"jklmnop123456\",\"operator\":\"<\",\"value\":\"5\"}]`\\\n \\\nOnly set Custom Field values display in the `value` property of the `custom_fields` parameter. If you want to include tasks with specific values in only one Custom Field, use `custom_field` instead.\\\n \\\nLearn more about [filtering using Custom Fields.](doc:filtertasks)";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetTaskresponse";
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly custom_id: {
                    readonly type: readonly ["string", "null"];
                };
                readonly custom_item_id: {
                    readonly type: readonly ["number", "null"];
                    readonly description: "The custom task type ID for this task. A value of `null` represents task type \"Task\".\\\n \\\nTo get a list of available custom task type IDs for your Workspace, use the [Get Custom Task Types endpoint](ref:getcustomitems).";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly text_content: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly title: "Status";
                    readonly required: readonly ["status", "color", "orderindex", "type"];
                    readonly type: "object";
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly orderindex: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                    };
                };
                readonly orderindex: {
                    readonly type: "string";
                };
                readonly date_created: {
                    readonly type: "string";
                };
                readonly date_updated: {
                    readonly type: "string";
                };
                readonly date_closed: {
                    readonly type: readonly ["string", "null"];
                };
                readonly creator: {
                    readonly title: "Creator";
                    readonly required: readonly ["id", "username", "color", "profilePicture"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly username: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly profilePicture: {
                            readonly type: "string";
                        };
                    };
                };
                readonly assignees: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly description: "";
                };
                readonly watchers: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly description: "";
                };
                readonly checklists: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly description: "";
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly description: "";
                };
                readonly parent: {
                    readonly type: readonly ["string", "null"];
                };
                readonly priority: {
                    readonly type: readonly ["string", "null"];
                };
                readonly due_date: {
                    readonly type: readonly ["string", "null"];
                };
                readonly start_date: {
                    readonly type: readonly ["string", "null"];
                };
                readonly points: {
                    readonly type: "number";
                };
                readonly time_estimate: {
                    readonly type: readonly ["string", "null"];
                };
                readonly time_spent: {
                    readonly type: readonly ["string", "null"];
                };
                readonly custom_fields: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "CustomFields8";
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly type_config: {
                                readonly title: "TypeConfig1";
                                readonly type: "object";
                                readonly properties: {
                                    readonly single_user: {
                                        readonly type: "boolean";
                                    };
                                    readonly include_groups: {
                                        readonly type: "boolean";
                                    };
                                    readonly include_guests: {
                                        readonly type: "boolean";
                                    };
                                    readonly include_team_members: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly date_created: {
                                readonly type: "string";
                            };
                            readonly hide_from_guests: {
                                readonly type: "boolean";
                            };
                            readonly value: {
                                readonly oneOf: readonly [{
                                    readonly title: "Value";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly username: {
                                            readonly type: "string";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                        readonly initials: {
                                            readonly type: "string";
                                        };
                                        readonly profilePicture: {
                                            readonly type: readonly ["string", "null"];
                                        };
                                    };
                                }, {
                                    readonly title: "Value1";
                                    readonly required: readonly ["id", "username", "email", "color", "initials", "profilePicture"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly username: {
                                            readonly type: "string";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                        readonly initials: {
                                            readonly type: "string";
                                        };
                                        readonly profilePicture: {
                                            readonly type: readonly ["string", "null"];
                                        };
                                    };
                                }, {
                                    readonly title: "Value2";
                                    readonly required: readonly ["value"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly value: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly examples: readonly ["This is a text CF"];
                                }];
                            };
                            readonly value_richtext: {
                                readonly type: "string";
                            };
                            readonly value_markdown: {
                                readonly type: "string";
                            };
                            readonly required: {
                                readonly type: "boolean";
                            };
                        };
                    };
                    readonly description: "";
                };
                readonly list: {
                    readonly title: "List";
                    readonly required: readonly ["id"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                    };
                };
                readonly folder: {
                    readonly title: "Folder";
                    readonly required: readonly ["id"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                    };
                };
                readonly space: {
                    readonly title: "Space";
                    readonly required: readonly ["id"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                    };
                };
                readonly url: {
                    readonly type: "string";
                };
                readonly markdown_description: {
                    readonly type: "string";
                };
                readonly attachments: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Attachment";
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly date: {
                                readonly type: "bigint";
                            };
                            readonly title: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "int";
                            };
                            readonly source: {
                                readonly type: "int";
                            };
                            readonly version: {
                                readonly type: "int";
                            };
                            readonly extension: {
                                readonly type: "string";
                            };
                            readonly thumbnail_small: {
                                readonly type: "string";
                            };
                            readonly thumbnail_medium: {
                                readonly type: "string";
                            };
                            readonly thumbnail_large: {
                                readonly type: "string";
                            };
                            readonly is_folder: {
                                readonly type: "boolean";
                            };
                            readonly mimetype: {
                                readonly type: "string";
                            };
                            readonly hidden: {
                                readonly type: "boolean";
                            };
                            readonly parent_id: {
                                readonly type: "string";
                            };
                            readonly size: {
                                readonly type: "bigint";
                            };
                            readonly total_comments: {
                                readonly type: "int";
                            };
                            readonly resolved_comments: {
                                readonly type: "int";
                            };
                            readonly user: {
                                readonly title: "User2";
                                readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly deleted: {
                                readonly type: "boolean";
                            };
                            readonly orientation: {
                                readonly type: "string";
                            };
                            readonly url: {
                                readonly type: "string";
                            };
                            readonly email_data: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                            };
                            readonly url_w_query: {
                                readonly type: "string";
                            };
                            readonly url_w_host: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetTaskComments: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hz"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
                readonly start: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Enter the `date` of a task comment using Unix time in milliseconds.";
                };
                readonly start_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Enter the Comment `id` of a task comment.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetTaskCommentsresponse";
            readonly required: readonly ["comments"];
            readonly type: "object";
            readonly properties: {
                readonly comments: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Comment";
                        readonly required: readonly ["id", "comment", "comment_text", "user", "resolved", "assignee", "assigned_by", "reactions", "date"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly comment: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "Comment1";
                                    readonly required: readonly ["text"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly text: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                            readonly comment_text: {
                                readonly type: "string";
                            };
                            readonly user: {
                                readonly title: "User2";
                                readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly resolved: {
                                readonly type: "boolean";
                            };
                            readonly assignee: {
                                readonly title: "Assignee";
                                readonly required: readonly ["id", "username", "email", "color", "initials", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly assigned_by: {
                                readonly title: "AssignedBy";
                                readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly reactions: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly date: {
                                readonly type: "string";
                            };
                            readonly reply_count: {
                                readonly type: "string";
                                readonly description: "For threaded comments, `reply_count` is always 0.";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetTaskMembers: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hz"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetTaskMembersresponse";
            readonly required: readonly ["members"];
            readonly type: "object";
            readonly properties: {
                readonly members: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Member5";
                        readonly required: readonly ["id", "username", "email", "color", "initials", "profilePicture", "profileInfo"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly username: {
                                readonly type: "string";
                            };
                            readonly email: {
                                readonly type: "string";
                            };
                            readonly color: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly initials: {
                                readonly type: "string";
                            };
                            readonly profilePicture: {
                                readonly type: "string";
                            };
                            readonly profileInfo: {
                                readonly title: "ProfileInfo";
                                readonly required: readonly ["display_profile", "verified_ambassador", "verified_consultant", "top_tier_user", "viewed_verified_ambassador", "viewed_verified_consultant", "viewed_top_tier_user"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly display_profile: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly verified_ambassador: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly verified_consultant: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly top_tier_user: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly viewed_verified_ambassador: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly viewed_verified_consultant: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly viewed_top_tier_user: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetTaskSTimeinStatus: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hz"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetTasksTimeinStatusresponse";
            readonly required: readonly ["current_status", "status_history"];
            readonly type: "object";
            readonly properties: {
                readonly current_status: {
                    readonly title: "CurrentStatus";
                    readonly required: readonly ["status", "color", "total_time"];
                    readonly type: "object";
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly total_time: {
                            readonly title: "TotalTime";
                            readonly required: readonly ["by_minute", "since"];
                            readonly type: "object";
                            readonly properties: {
                                readonly by_minute: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly since: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
                readonly status_history: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "StatusHistory";
                        readonly required: readonly ["status", "color", "type", "total_time", "orderindex"];
                        readonly type: "object";
                        readonly properties: {
                            readonly status: {
                                readonly type: "string";
                            };
                            readonly color: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly total_time: {
                                readonly title: "TotalTime";
                                readonly required: readonly ["by_minute", "since"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly by_minute: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly since: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly orderindex: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetTaskTemplates: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["page"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetTaskTemplatesresponse";
            readonly required: readonly ["templates"];
            readonly type: "object";
            readonly properties: {
                readonly templates: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetTasks: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly list_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "To find the list_id:<br> 1. In the Sidebar, hover over the List and click the **ellipsis ...** menu.<br> 2. Select **Copy link.**<br> 3. Use the copied URL to find the list_id. The list_id is the number that follows /li in the URL.";
                };
            };
            readonly required: readonly ["list_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly archived: {
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly include_markdown_description: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "To return task descriptions in Markdown format, use `?include_markdown_description=true`.";
                };
                readonly page: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Page to fetch (starts at 0).";
                };
                readonly order_by: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Order by a particular field. By default, tasks are ordered by `created`.\\\n \\\nOptions include: `id`, `created`, `updated`, and `due_date`.";
                };
                readonly reverse: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Tasks are displayed in reverse order.";
                };
                readonly subtasks: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Include or exclude subtasks. By default, subtasks are excluded.";
                };
                readonly statuses: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by statuses. To include closed tasks, use the `include_closed` parameter. \\\n \\\nFor example: \\\n \\\n`?statuses[]=to%20do&statuses[]=in%20progress`";
                };
                readonly include_closed: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Include or excluse closed tasks. By default, they are excluded.\\\n \\\nTo include closed tasks, use `include_closed: true`.";
                };
                readonly assignees: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by Assignees. For example: \\\n \\\n`?assignees[]=1234&assignees[]=5678`";
                };
                readonly watchers: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by watchers.";
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by tags. For example: \\\n \\\n`?tags[]=tag1&tags[]=this%20tag`";
                };
                readonly due_date_gt: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by due date greater than Unix time in milliseconds.";
                };
                readonly due_date_lt: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by due date less than Unix time in milliseconds.";
                };
                readonly date_created_gt: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by date created greater than Unix time in milliseconds.";
                };
                readonly date_created_lt: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by date created less than Unix time in milliseconds.";
                };
                readonly date_updated_gt: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by date updated greater than Unix time in milliseconds.";
                };
                readonly date_updated_lt: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by date updated less than Unix time in milliseconds.";
                };
                readonly date_done_gt: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by date done greater than Unix time in milliseconds.";
                };
                readonly date_done_lt: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by date done less than Unix time in milliseconds.";
                };
                readonly custom_fields: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Include tasks with specific values in one or more Custom Fields. Custom Relationships are included.\\\n \\\nFor example: `?custom_fields=[{\"field_id\":\"abcdefghi12345678\",\"operator\":\"=\",\"value\":\"1234\"},{\"field_id\":\"jklmnop123456\",\"operator\":\"<\",\"value\":\"5\"}]`\\\n \\\nOnly set Custom Field values display in the `value` property of the `custom_fields` parameter. If you want to include tasks with specific values in only one Custom Field, use `custom_field` instead.\\\n \\\nLearn more about [filtering using Custom Fields.](doc:filtertasks)";
                };
                readonly custom_field: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Include tasks with specific values in only one Custom Field. This Custom Field can be a Custom Relationship.";
                };
                readonly custom_items: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "number";
                    };
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by custom task types. For example: \\\n \\\n`?custom_items[]=0&custom_items[]=1300` \\\n \\\nIncluding `0` returns tasks. Including `1` returns Milestones. Including any other number returns the custom task type as defined in your Workspace.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetViewTasksresponse";
            readonly required: readonly ["tasks", "last_page"];
            readonly type: "object";
            readonly properties: {
                readonly tasks: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Task9";
                        readonly required: readonly ["id", "custom_item_id", "name", "status", "orderindex", "date_created", "date_updated", "date_closed", "date_done", "creator", "assignees", "watchers", "checklists", "tags", "parent", "priority", "due_date", "start_date", "points", "time_estimate", "time_spent", "list", "folder", "space", "url"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly custom_item_id: {
                                readonly type: readonly ["number", "null"];
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly title: "Status";
                                readonly required: readonly ["status", "color", "orderindex", "type"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly status: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly orderindex: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly markdown_description: {
                                readonly type: "string";
                            };
                            readonly orderindex: {
                                readonly type: "string";
                            };
                            readonly date_created: {
                                readonly type: "string";
                            };
                            readonly date_updated: {
                                readonly type: "string";
                            };
                            readonly date_closed: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly date_done: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly creator: {
                                readonly title: "Creator";
                                readonly required: readonly ["id", "username", "color", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly assignees: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly watchers: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly checklists: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly tags: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly parent: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly priority: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly due_date: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly start_date: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly points: {
                                readonly type: "number";
                            };
                            readonly time_estimate: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly time_spent: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly custom_fields: {
                                readonly title: "CustomFields8";
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                    readonly type_config: {
                                        readonly title: "TypeConfig1";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly single_user: {
                                                readonly type: "boolean";
                                            };
                                            readonly include_groups: {
                                                readonly type: "boolean";
                                            };
                                            readonly include_guests: {
                                                readonly type: "boolean";
                                            };
                                            readonly include_team_members: {
                                                readonly type: "boolean";
                                            };
                                        };
                                    };
                                    readonly date_created: {
                                        readonly type: "string";
                                    };
                                    readonly hide_from_guests: {
                                        readonly type: "boolean";
                                    };
                                    readonly value: {
                                        readonly oneOf: readonly [{
                                            readonly title: "Value";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "integer";
                                                    readonly contentEncoding: "int32";
                                                };
                                                readonly username: {
                                                    readonly type: "string";
                                                };
                                                readonly email: {
                                                    readonly type: "string";
                                                };
                                                readonly color: {
                                                    readonly type: "string";
                                                };
                                                readonly initials: {
                                                    readonly type: "string";
                                                };
                                                readonly profilePicture: {
                                                    readonly type: readonly ["string", "null"];
                                                };
                                            };
                                        }, {
                                            readonly title: "Value1";
                                            readonly required: readonly ["id", "username", "email", "color", "initials", "profilePicture"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "integer";
                                                    readonly contentEncoding: "int32";
                                                };
                                                readonly username: {
                                                    readonly type: "string";
                                                };
                                                readonly email: {
                                                    readonly type: "string";
                                                };
                                                readonly color: {
                                                    readonly type: "string";
                                                };
                                                readonly initials: {
                                                    readonly type: "string";
                                                };
                                                readonly profilePicture: {
                                                    readonly type: readonly ["string", "null"];
                                                };
                                            };
                                        }, {
                                            readonly title: "Value2";
                                            readonly required: readonly ["value"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly value: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly examples: readonly ["This is a text CF"];
                                        }];
                                    };
                                    readonly value_richtext: {
                                        readonly type: "string";
                                    };
                                    readonly value_markdown: {
                                        readonly type: "string";
                                    };
                                    readonly required: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly list: {
                                readonly title: "List";
                                readonly required: readonly ["id"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly folder: {
                                readonly title: "Folder";
                                readonly required: readonly ["id"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly space: {
                                readonly title: "Space";
                                readonly required: readonly ["id"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly url: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
                readonly last_page: {
                    readonly type: "boolean";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetTeamAvailableFields: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetTeamAvailableFieldsresponse";
            readonly required: readonly ["fields"];
            readonly type: "object";
            readonly properties: {
                readonly fields: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Field";
                        readonly required: readonly ["id", "name", "type", "type_config", "date_created", "hide_from_guests"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly type_config: {
                                readonly title: "TypeConfig";
                                readonly type: "object";
                                readonly properties: {
                                    readonly options: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly title: "Option";
                                            readonly required: readonly ["id", "color"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly label: {
                                                    readonly type: "string";
                                                };
                                                readonly color: {
                                                    readonly type: readonly ["string", "null"];
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                };
                                                readonly value: {
                                                    readonly type: "integer";
                                                    readonly contentEncoding: "int32";
                                                };
                                                readonly type: {
                                                    readonly type: "string";
                                                };
                                                readonly orderindex: {
                                                    readonly type: "integer";
                                                    readonly contentEncoding: "int32";
                                                };
                                            };
                                        };
                                        readonly description: "";
                                    };
                                    readonly default: {
                                        readonly oneOf: readonly [{
                                            readonly type: readonly ["string", "null"];
                                        }, {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        }, {}];
                                    };
                                    readonly precision: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly currency_type: {
                                        readonly type: "string";
                                    };
                                    readonly placeholder: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly end: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly start: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly count: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly code_point: {
                                        readonly type: "string";
                                    };
                                    readonly tracking: {
                                        readonly title: "Tracking";
                                        readonly required: readonly ["subtasks", "checklists", "assigned_comments"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly subtasks: {
                                                readonly type: "boolean";
                                            };
                                            readonly checklists: {
                                                readonly type: "boolean";
                                            };
                                            readonly assigned_comments: {
                                                readonly type: "boolean";
                                            };
                                        };
                                    };
                                    readonly complete_on: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                };
                            };
                            readonly date_created: {
                                readonly type: "string";
                            };
                            readonly hide_from_guests: {
                                readonly type: "boolean";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetTeamViews: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetTeamViewsresponse";
            readonly required: readonly ["views"];
            readonly type: "object";
            readonly properties: {
                readonly views: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "View";
                        readonly required: readonly ["id", "name", "type", "parent", "grouping", "divide", "sorting", "filters", "columns", "team_sidebar", "settings"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly parent: {
                                readonly title: "Parent";
                                readonly description: "The parent parameter specifies where the view is located in the ClickUp Hierarchy. Both `id` and `type` are required. \\\n \\\nThe `id` is the id of the Workspace, Space, Folder, or List where the view is located. \\\n \\\nThe `type` value indciates the level of the Hierarchy where the view is located.";
                                readonly required: readonly ["id", "type"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "The id of the Workspace, Space, Folder, or List where the view is located.";
                                    };
                                    readonly type: {
                                        readonly type: "integer";
                                        readonly description: "The level of the Hierarchy where the view is created. \\\n \\\nOptions include: \\\n \\\nWorkspace (Everything Level): `7` \\\n \\\nSpace: `4` \\\n \\\nFolder: `5` \\\n \\\nList: `6`";
                                        readonly contentEncoding: "int32";
                                    };
                                };
                            };
                            readonly grouping: {
                                readonly title: "Grouping";
                                readonly required: readonly ["field", "dir", "collapsed", "ignore"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly field: {
                                        readonly type: "string";
                                        readonly description: "Set the field to group by.\\\n \\\nOptions include: `none`, `status`, `priority`, `assignee`, `tag`, or `dueDate`.";
                                    };
                                    readonly dir: {
                                        readonly description: "Set a group sort order using `1` or `-1`.\\\n \\\nFor example, use `1`show tasks with urgent priority at the top of your view, and tasks with no priority at the bottom.\\\n \\\nUse `-1` to reverse the order to show tasks with no priority at the top of your view.";
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly collapsed: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "";
                                    };
                                    readonly ignore: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly divide: {
                                readonly title: "Divide";
                                readonly required: readonly ["collapsed"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly field: {
                                        readonly type: "null";
                                    };
                                    readonly dir: {
                                        readonly type: "null";
                                    };
                                    readonly collapsed: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly sorting: {
                                readonly title: "Sorting";
                                readonly required: readonly ["fields"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly fields: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "Include an array of fields to sort by.\\\n \\\n You can sort by the same fields available when [filtering a view](doc:filter-views).";
                                    };
                                };
                            };
                            readonly filters: {
                                readonly title: "Filters";
                                readonly required: readonly ["op", "fields", "search", "show_closed"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly op: {
                                        readonly type: "string";
                                        readonly description: "The available operator (`op``) values are `AND`` and `OR``.";
                                    };
                                    readonly fields: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "View the list of [fields available](doc:filter-views) to filter by.";
                                    };
                                    readonly search: {
                                        readonly type: "string";
                                    };
                                    readonly show_closed: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly columns: {
                                readonly title: "Columns";
                                readonly description: "Custom Fields added to a view at the Everything level will be added to all tasks in your Workspace. Once Custom Fields are added to one of these views, you cannot move it to another level of the Hierarchy.";
                                readonly required: readonly ["fields"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly fields: {
                                        readonly description: "Custom Fields require the `_cf` prefix and must be formatted as a JSON object.";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly team_sidebar: {
                                readonly title: "TeamSidebar";
                                readonly required: readonly ["assignees", "assigned_comments", "unassigned_tasks"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly assignees: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                        readonly description: "";
                                    };
                                    readonly assigned_comments: {
                                        readonly type: "boolean";
                                    };
                                    readonly unassigned_tasks: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly settings: {
                                readonly title: "Settings";
                                readonly required: readonly ["show_task_locations", "show_subtasks", "show_subtask_parent_names", "show_closed_subtasks", "show_assignees", "show_images", "collapse_empty_columns", "me_comments", "me_subtasks", "me_checklists"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly show_task_locations: {
                                        readonly type: "boolean";
                                    };
                                    readonly show_subtasks: {
                                        readonly description: "Acceptable values are `1`, `2`, or `3`, which show subtasks separate, expanded, or collapsed.";
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly show_subtask_parent_names: {
                                        readonly type: "boolean";
                                    };
                                    readonly show_closed_subtasks: {
                                        readonly type: "boolean";
                                    };
                                    readonly show_assignees: {
                                        readonly type: "boolean";
                                    };
                                    readonly show_images: {
                                        readonly type: "boolean";
                                    };
                                    readonly collapse_empty_columns: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly me_comments: {
                                        readonly type: "boolean";
                                    };
                                    readonly me_subtasks: {
                                        readonly type: "boolean";
                                    };
                                    readonly me_checklists: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetTeams1: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
                readonly group_ids: {
                    readonly type: "string";
                    readonly examples: readonly ["C9C58BE9-7C73-4002-A6A9-310014852858"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Enter one or more User Group IDs to retrieve information about specific User Group.";
                };
            };
            readonly required: readonly ["team_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetTeamsresponse";
            readonly required: readonly ["groups"];
            readonly type: "object";
            readonly properties: {
                readonly groups: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Group";
                        readonly required: readonly ["id", "team_id", "userid", "name", "handle", "date_created", "initials", "members", "avatar"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly team_id: {
                                readonly type: "string";
                            };
                            readonly userid: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly handle: {
                                readonly type: "string";
                            };
                            readonly date_created: {
                                readonly type: "string";
                            };
                            readonly initials: {
                                readonly type: "string";
                            };
                            readonly members: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "Members3";
                                    readonly required: readonly ["id", "username", "email", "color", "initials", "profilePicture"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly username: {
                                            readonly type: "string";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                        readonly initials: {
                                            readonly type: "string";
                                        };
                                        readonly profilePicture: {
                                            readonly type: readonly ["string", "null"];
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                            readonly avatar: {
                                readonly title: "Avatar";
                                readonly required: readonly ["attachment_id", "color", "source", "icon"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly attachment_id: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly color: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly source: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly icon: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetThreadedComments: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly comment_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [456];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["comment_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetTaskCommentsresponse";
            readonly required: readonly ["comments"];
            readonly type: "object";
            readonly properties: {
                readonly comments: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Comment";
                        readonly required: readonly ["id", "comment", "comment_text", "user", "resolved", "assignee", "assigned_by", "reactions", "date"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly comment: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "Comment1";
                                    readonly required: readonly ["text"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly text: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                            readonly comment_text: {
                                readonly type: "string";
                            };
                            readonly user: {
                                readonly title: "User2";
                                readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly resolved: {
                                readonly type: "boolean";
                            };
                            readonly assignee: {
                                readonly title: "Assignee";
                                readonly required: readonly ["id", "username", "email", "color", "initials", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly assigned_by: {
                                readonly title: "AssignedBy";
                                readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly reactions: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly date: {
                                readonly type: "string";
                            };
                            readonly reply_count: {
                                readonly type: "string";
                                readonly description: "For threaded comments, `reply_count` is always 0.";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetUser: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
                readonly user_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [403];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["team_id", "user_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly include_shared: {
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Exclude details of items shared with the guest by setting this parameter to `false`. By default this parameter is set to `true`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetUserresponse";
            readonly type: "object";
            readonly properties: {
                readonly member: {
                    readonly title: "Member7";
                    readonly type: "object";
                    readonly properties: {
                        readonly user: {
                            readonly title: "User21";
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly username: {
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly profilePicture: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly role: {
                                    readonly description: "Owner = 1, Admin = 2, Member = 3, Guest = 4";
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly custom_role: {
                                    readonly title: "CustomRole";
                                    readonly required: readonly ["id", "name"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly last_active: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_joined: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_invited: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly invited_by: {
                            readonly title: "InvitedBy";
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly username: {
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly profilePicture: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly shared: {
                            readonly title: "Shared";
                            readonly type: "object";
                            readonly properties: {
                                readonly tasks: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly lists: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly folders: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetView: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly view_id: {
                    readonly type: "string";
                    readonly examples: readonly ["3c-105"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["view_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetViewresponse";
            readonly required: readonly ["view"];
            readonly type: "object";
            readonly properties: {
                readonly view: {
                    readonly title: "View";
                    readonly required: readonly ["id", "name", "type", "parent", "grouping", "divide", "sorting", "filters", "columns", "team_sidebar", "settings"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                        readonly parent: {
                            readonly title: "Parent";
                            readonly description: "The parent parameter specifies where the view is located in the ClickUp Hierarchy. Both `id` and `type` are required. \\\n \\\nThe `id` is the id of the Workspace, Space, Folder, or List where the view is located. \\\n \\\nThe `type` value indciates the level of the Hierarchy where the view is located.";
                            readonly required: readonly ["id", "type"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "The id of the Workspace, Space, Folder, or List where the view is located.";
                                };
                                readonly type: {
                                    readonly type: "integer";
                                    readonly description: "The level of the Hierarchy where the view is created. \\\n \\\nOptions include: \\\n \\\nWorkspace (Everything Level): `7` \\\n \\\nSpace: `4` \\\n \\\nFolder: `5` \\\n \\\nList: `6`";
                                    readonly contentEncoding: "int32";
                                };
                            };
                        };
                        readonly grouping: {
                            readonly title: "Grouping";
                            readonly required: readonly ["field", "dir", "collapsed", "ignore"];
                            readonly type: "object";
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly description: "Set the field to group by.\\\n \\\nOptions include: `none`, `status`, `priority`, `assignee`, `tag`, or `dueDate`.";
                                };
                                readonly dir: {
                                    readonly description: "Set a group sort order using `1` or `-1`.\\\n \\\nFor example, use `1`show tasks with urgent priority at the top of your view, and tasks with no priority at the bottom.\\\n \\\nUse `-1` to reverse the order to show tasks with no priority at the top of your view.";
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly collapsed: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly ignore: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly divide: {
                            readonly title: "Divide";
                            readonly required: readonly ["collapsed"];
                            readonly type: "object";
                            readonly properties: {
                                readonly field: {
                                    readonly type: "null";
                                };
                                readonly dir: {
                                    readonly type: "null";
                                };
                                readonly collapsed: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly sorting: {
                            readonly title: "Sorting";
                            readonly required: readonly ["fields"];
                            readonly type: "object";
                            readonly properties: {
                                readonly fields: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "Include an array of fields to sort by.\\\n \\\n You can sort by the same fields available when [filtering a view](doc:filter-views).";
                                };
                            };
                        };
                        readonly filters: {
                            readonly title: "Filters";
                            readonly required: readonly ["op", "fields", "search", "show_closed"];
                            readonly type: "object";
                            readonly properties: {
                                readonly op: {
                                    readonly type: "string";
                                    readonly description: "The available operator (`op``) values are `AND`` and `OR``.";
                                };
                                readonly fields: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "View the list of [fields available](doc:filter-views) to filter by.";
                                };
                                readonly search: {
                                    readonly type: "string";
                                };
                                readonly show_closed: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly columns: {
                            readonly title: "Columns";
                            readonly description: "Custom Fields added to a view at the Everything level will be added to all tasks in your Workspace. Once Custom Fields are added to one of these views, you cannot move it to another level of the Hierarchy.";
                            readonly required: readonly ["fields"];
                            readonly type: "object";
                            readonly properties: {
                                readonly fields: {
                                    readonly description: "Custom Fields require the `_cf` prefix and must be formatted as a JSON object.";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly team_sidebar: {
                            readonly title: "TeamSidebar";
                            readonly required: readonly ["assignees", "assigned_comments", "unassigned_tasks"];
                            readonly type: "object";
                            readonly properties: {
                                readonly assignees: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly assigned_comments: {
                                    readonly type: "boolean";
                                };
                                readonly unassigned_tasks: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly settings: {
                            readonly title: "Settings";
                            readonly required: readonly ["show_task_locations", "show_subtasks", "show_subtask_parent_names", "show_closed_subtasks", "show_assignees", "show_images", "collapse_empty_columns", "me_comments", "me_subtasks", "me_checklists"];
                            readonly type: "object";
                            readonly properties: {
                                readonly show_task_locations: {
                                    readonly type: "boolean";
                                };
                                readonly show_subtasks: {
                                    readonly description: "Acceptable values are `1`, `2`, or `3`, which show subtasks separate, expanded, or collapsed.";
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly show_subtask_parent_names: {
                                    readonly type: "boolean";
                                };
                                readonly show_closed_subtasks: {
                                    readonly type: "boolean";
                                };
                                readonly show_assignees: {
                                    readonly type: "boolean";
                                };
                                readonly show_images: {
                                    readonly type: "boolean";
                                };
                                readonly collapse_empty_columns: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly me_comments: {
                                    readonly type: "boolean";
                                };
                                readonly me_subtasks: {
                                    readonly type: "boolean";
                                };
                                readonly me_checklists: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetViewTasks: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly view_id: {
                    readonly type: "string";
                    readonly examples: readonly ["3c"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "105 (string)";
                };
            };
            readonly required: readonly ["view_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly examples: readonly [0];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["page"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetViewTasksresponse";
            readonly required: readonly ["tasks", "last_page"];
            readonly type: "object";
            readonly properties: {
                readonly tasks: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Task9";
                        readonly required: readonly ["id", "custom_item_id", "name", "status", "orderindex", "date_created", "date_updated", "date_closed", "date_done", "creator", "assignees", "watchers", "checklists", "tags", "parent", "priority", "due_date", "start_date", "points", "time_estimate", "time_spent", "list", "folder", "space", "url"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly custom_item_id: {
                                readonly type: readonly ["number", "null"];
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly title: "Status";
                                readonly required: readonly ["status", "color", "orderindex", "type"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly status: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly orderindex: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly markdown_description: {
                                readonly type: "string";
                            };
                            readonly orderindex: {
                                readonly type: "string";
                            };
                            readonly date_created: {
                                readonly type: "string";
                            };
                            readonly date_updated: {
                                readonly type: "string";
                            };
                            readonly date_closed: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly date_done: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly creator: {
                                readonly title: "Creator";
                                readonly required: readonly ["id", "username", "color", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly assignees: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly watchers: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly checklists: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly tags: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly parent: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly priority: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly due_date: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly start_date: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly points: {
                                readonly type: "number";
                            };
                            readonly time_estimate: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly time_spent: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly custom_fields: {
                                readonly title: "CustomFields8";
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                    readonly type_config: {
                                        readonly title: "TypeConfig1";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly single_user: {
                                                readonly type: "boolean";
                                            };
                                            readonly include_groups: {
                                                readonly type: "boolean";
                                            };
                                            readonly include_guests: {
                                                readonly type: "boolean";
                                            };
                                            readonly include_team_members: {
                                                readonly type: "boolean";
                                            };
                                        };
                                    };
                                    readonly date_created: {
                                        readonly type: "string";
                                    };
                                    readonly hide_from_guests: {
                                        readonly type: "boolean";
                                    };
                                    readonly value: {
                                        readonly oneOf: readonly [{
                                            readonly title: "Value";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "integer";
                                                    readonly contentEncoding: "int32";
                                                };
                                                readonly username: {
                                                    readonly type: "string";
                                                };
                                                readonly email: {
                                                    readonly type: "string";
                                                };
                                                readonly color: {
                                                    readonly type: "string";
                                                };
                                                readonly initials: {
                                                    readonly type: "string";
                                                };
                                                readonly profilePicture: {
                                                    readonly type: readonly ["string", "null"];
                                                };
                                            };
                                        }, {
                                            readonly title: "Value1";
                                            readonly required: readonly ["id", "username", "email", "color", "initials", "profilePicture"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "integer";
                                                    readonly contentEncoding: "int32";
                                                };
                                                readonly username: {
                                                    readonly type: "string";
                                                };
                                                readonly email: {
                                                    readonly type: "string";
                                                };
                                                readonly color: {
                                                    readonly type: "string";
                                                };
                                                readonly initials: {
                                                    readonly type: "string";
                                                };
                                                readonly profilePicture: {
                                                    readonly type: readonly ["string", "null"];
                                                };
                                            };
                                        }, {
                                            readonly title: "Value2";
                                            readonly required: readonly ["value"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly value: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly examples: readonly ["This is a text CF"];
                                        }];
                                    };
                                    readonly value_richtext: {
                                        readonly type: "string";
                                    };
                                    readonly value_markdown: {
                                        readonly type: "string";
                                    };
                                    readonly required: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly list: {
                                readonly title: "List";
                                readonly required: readonly ["id"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly folder: {
                                readonly title: "Folder";
                                readonly required: readonly ["id"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly space: {
                                readonly title: "Space";
                                readonly required: readonly ["id"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly url: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
                readonly last_page: {
                    readonly type: "boolean";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetWebhooks: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetWebhooksresponse";
            readonly required: readonly ["webhooks"];
            readonly type: "object";
            readonly properties: {
                readonly webhooks: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Webhook";
                        readonly required: readonly ["id", "userid", "team_id", "endpoint", "client_id", "events", "task_id", "list_id", "folder_id", "space_id", "health", "secret"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly userid: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly team_id: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly endpoint: {
                                readonly type: "string";
                            };
                            readonly client_id: {
                                readonly type: "string";
                            };
                            readonly events: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly task_id: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly list_id: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly folder_id: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly space_id: {
                                readonly type: readonly ["string", "null"];
                            };
                            readonly health: {
                                readonly title: "Health";
                                readonly required: readonly ["status", "fail_count"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly status: {
                                        readonly type: "string";
                                    };
                                    readonly fail_count: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                };
                            };
                            readonly secret: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetWorkspaceplan: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetWorkspaceplanresponse";
            readonly type: "object";
            readonly properties: {
                readonly plan_name: {
                    readonly type: "string";
                };
                readonly plan_id: {
                    readonly type: "integer";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const GetWorkspaceseats: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "GetWorkspaceseatsresponse";
            readonly required: readonly ["members", "guests"];
            readonly type: "object";
            readonly properties: {
                readonly members: {
                    readonly title: "Members";
                    readonly required: readonly ["filled_members_seats", "total_member_seats", "empty_member_seats"];
                    readonly type: "object";
                    readonly properties: {
                        readonly filled_members_seats: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly total_member_seats: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly empty_member_seats: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                    };
                };
                readonly guests: {
                    readonly title: "Guests";
                    readonly required: readonly ["filled_guest_seats", "total_guest_seats", "empty_guest_seats"];
                    readonly type: "object";
                    readonly properties: {
                        readonly filled_guest_seats: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly total_guest_seats: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly empty_guest_seats: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const Getalltagsfromtimeentries: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "Getalltagsfromtimeentriesresponse";
            readonly required: readonly ["data"];
            readonly type: "object";
            readonly properties: {
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Data1";
                        readonly required: readonly ["name", "creator", "tag_bg", "tag_fg"];
                        readonly type: "object";
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly creator: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly tag_bg: {
                                readonly type: "string";
                            };
                            readonly tag_fg: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const Getrunningtimeentry: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly assignee: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "user id";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "Getrunningtimeentryresponse";
            readonly required: readonly ["data"];
            readonly type: "object";
            readonly properties: {
                readonly data: {
                    readonly title: "Data";
                    readonly required: readonly ["id", "task", "wid", "user", "billable", "start", "duration", "description", "tags", "at"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly task: {
                            readonly title: "Task5";
                            readonly required: readonly ["id", "name", "status"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly status: {
                                    readonly title: "Status";
                                    readonly required: readonly ["status", "color", "orderindex", "type"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly status: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                        readonly orderindex: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly type: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly wid: {
                            readonly type: "string";
                        };
                        readonly user: {
                            readonly title: "User2";
                            readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly username: {
                                    readonly type: "string";
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly profilePicture: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly billable: {
                            readonly type: "boolean";
                        };
                        readonly start: {
                            readonly type: "string";
                        };
                        readonly duration: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly tags: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly at: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const Getsingulartimeentry: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
                readonly timer_id: {
                    readonly type: "string";
                    readonly examples: readonly ["1963465985517105840"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of a time entry. \\\n \\\nThis can be found using the [Get Time Entries Within a Date Range](ref:gettimeentrieswithinadaterange) endpoint.";
                };
            };
            readonly required: readonly ["team_id", "timer_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly include_task_tags: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Include task tags in the response for time entries associated with tasks.";
                };
                readonly include_location_names: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Include the names of the List, Folder, and Space along with `list_id`,`folder_id`, and `space_id`.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "Getsingulartimeentryresponse";
            readonly required: readonly ["data"];
            readonly type: "object";
            readonly properties: {
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Datum2";
                        readonly required: readonly ["id", "wid", "user", "billable", "start", "end", "duration", "description", "tags", "source", "at", "task_location", "task_tags", "task_url"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly wid: {
                                readonly type: "string";
                            };
                            readonly user: {
                                readonly title: "User2";
                                readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly billable: {
                                readonly type: "boolean";
                            };
                            readonly start: {
                                readonly type: "string";
                            };
                            readonly end: {
                                readonly type: "string";
                            };
                            readonly duration: {
                                readonly type: "string";
                            };
                            readonly description: {
                                readonly type: "string";
                            };
                            readonly tags: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly source: {
                                readonly type: "string";
                            };
                            readonly at: {
                                readonly type: "string";
                            };
                            readonly task_location: {
                                readonly title: "TaskLocation";
                                readonly required: readonly ["list_id", "folder_id", "space_id", "list_name", "folder_name", "space_name"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly list_id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly folder_id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly space_id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly list_name: {
                                        readonly type: "string";
                                    };
                                    readonly folder_name: {
                                        readonly type: "string";
                                    };
                                    readonly space_name: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly task_tags: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "TaskTag";
                                    readonly required: readonly ["name", "tag_fg", "tag_bg", "creator"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly type: "string";
                                        };
                                        readonly tag_fg: {
                                            readonly type: "string";
                                        };
                                        readonly tag_bg: {
                                            readonly type: "string";
                                        };
                                        readonly creator: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                            readonly task_url: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const Gettimeentrieswithinadaterange: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_Id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_Id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly start_date: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Unix time in milliseconds";
                };
                readonly end_date: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Unix time in milliseconds";
                };
                readonly assignee: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter by `user_id`. For multiple assignees, separate `user_id` using commas.\\\n \\\n **Example:** `assignee=1234,9876`\\\n \\\n***Note:** Only Workspace Owners/Admins have access to do this.*";
                };
                readonly include_task_tags: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Include task tags in the response for time entries associated with tasks.";
                };
                readonly include_location_names: {
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Include the names of the List, Folder, and Space along with the `list_id`,`folder_id`, and `space_id`.";
                };
                readonly space_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Only include time entries associated with tasks in a specific Space.";
                };
                readonly folder_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Only include time entries associated with tasks in a specific Folder.";
                };
                readonly list_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Only include time entries associated with tasks in a specific List.";
                };
                readonly task_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Only include time entries associated with a specific task.";
                };
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
                readonly is_billable: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Include only billable time entries by using a value of `true` or only non-billable time entries by using a value of `false`.\\\n \\\nFor example: `?is_billable=true`.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "Gettimeentrieswithinadaterangeresponse";
            readonly required: readonly ["data"];
            readonly type: "object";
            readonly properties: {
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Datum1";
                        readonly required: readonly ["id", "task", "wid", "user", "billable", "start", "end", "duration", "description", "tags", "source", "at", "task_location", "task_tags", "task_url"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly task: {
                                readonly title: "Task4";
                                readonly required: readonly ["id", "custom_id", "name", "status", "custom_type"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly custom_id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly status: {
                                        readonly title: "Status";
                                        readonly required: readonly ["status", "color", "orderindex", "type"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly status: {
                                                readonly type: "string";
                                            };
                                            readonly color: {
                                                readonly type: "string";
                                            };
                                            readonly orderindex: {
                                                readonly type: "integer";
                                                readonly contentEncoding: "int32";
                                            };
                                            readonly type: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly custom_type: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                };
                            };
                            readonly wid: {
                                readonly type: "string";
                            };
                            readonly user: {
                                readonly title: "User2";
                                readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly billable: {
                                readonly type: "boolean";
                            };
                            readonly start: {
                                readonly type: "string";
                            };
                            readonly end: {
                                readonly type: "string";
                            };
                            readonly duration: {
                                readonly type: "string";
                            };
                            readonly description: {
                                readonly type: "string";
                            };
                            readonly tags: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "";
                            };
                            readonly source: {
                                readonly type: "string";
                            };
                            readonly at: {
                                readonly type: "string";
                            };
                            readonly task_location: {
                                readonly title: "TaskLocation";
                                readonly required: readonly ["list_id", "folder_id", "space_id", "list_name", "folder_name", "space_name"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly list_id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly folder_id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly space_id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly list_name: {
                                        readonly type: "string";
                                    };
                                    readonly folder_name: {
                                        readonly type: "string";
                                    };
                                    readonly space_name: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly task_tags: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "TaskTag";
                                    readonly required: readonly ["name", "tag_fg", "tag_bg", "creator"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly type: "string";
                                        };
                                        readonly tag_fg: {
                                            readonly type: "string";
                                        };
                                        readonly tag_bg: {
                                            readonly type: "string";
                                        };
                                        readonly creator: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                            readonly task_url: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const Gettimeentryhistory: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
                readonly timer_id: {
                    readonly type: "string";
                    readonly examples: readonly ["1963465985517105840"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of a time entry. \\\n \\\nThis can be found using the [Get Time Entries Within a Date Range](ref:gettimeentrieswithinadaterange) endpoint.";
                };
            };
            readonly required: readonly ["team_id", "timer_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const Gettrackedtime: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hv"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "Gettrackedtimeresponse";
            readonly required: readonly ["data"];
            readonly type: "object";
            readonly properties: {
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Datum";
                        readonly required: readonly ["user", "time", "intervals"];
                        readonly type: "object";
                        readonly properties: {
                            readonly user: {
                                readonly title: "User13";
                                readonly required: readonly ["id", "username", "email", "color", "initials", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                };
                            };
                            readonly time: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly intervals: {
                                readonly type: "array";
                                readonly items: {
                                    readonly title: "Interval";
                                    readonly required: readonly ["id", "start", "end", "time", "source", "date_added"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                        };
                                        readonly start: {
                                            readonly type: readonly ["string", "null"];
                                        };
                                        readonly end: {
                                            readonly type: readonly ["string", "null"];
                                        };
                                        readonly time: {
                                            readonly type: "string";
                                        };
                                        readonly source: {
                                            readonly type: "string";
                                        };
                                        readonly date_added: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly description: "";
                            };
                        };
                    };
                    readonly description: "";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const InviteGuestToWorkspace: {
    readonly body: {
        readonly title: "InviteGuestToWorkspacerequest";
        readonly required: readonly ["email", "can_edit_tags", "can_see_time_spent", "can_see_time_estimated", "can_create_views", "custom_role_id"];
        readonly type: "object";
        readonly properties: {
            readonly email: {
                readonly type: "string";
                readonly examples: readonly ["guest@example.com"];
            };
            readonly can_edit_tags: {
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly can_see_time_spent: {
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly can_see_time_estimated: {
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly can_create_views: {
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly custom_role_id: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [12345];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "InviteGuestToWorkspaceresponse";
            readonly required: readonly ["team"];
            readonly type: "object";
            readonly properties: {
                readonly team: {
                    readonly title: "Team1";
                    readonly required: readonly ["id", "name", "color", "avatar", "members", "roles"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly avatar: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly members: {
                            readonly type: "array";
                            readonly items: {
                                readonly title: "Member4";
                                readonly required: readonly ["user", "invited_by", "can_see_time_spent", "can_see_time_estimated", "can_edit_tags", "can_create_views"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly user: {
                                        readonly title: "User5";
                                        readonly required: readonly ["id", "username", "email", "color", "profilePicture", "initials", "role", "custom_role", "last_active", "date_joined", "date_invited"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "integer";
                                                readonly contentEncoding: "int32";
                                            };
                                            readonly username: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly email: {
                                                readonly type: "string";
                                            };
                                            readonly color: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly profilePicture: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly initials: {
                                                readonly type: "string";
                                            };
                                            readonly role: {
                                                readonly type: "integer";
                                                readonly contentEncoding: "int32";
                                            };
                                            readonly custom_role: {
                                                readonly title: "CustomRole";
                                                readonly required: readonly ["id", "name"];
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "integer";
                                                        readonly contentEncoding: "int32";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                            readonly last_active: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly date_joined: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly date_invited: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly invited_by: {
                                        readonly title: "InvitedBy";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "integer";
                                                readonly contentEncoding: "int32";
                                            };
                                            readonly color: {
                                                readonly type: "string";
                                            };
                                            readonly username: {
                                                readonly type: "string";
                                            };
                                            readonly email: {
                                                readonly type: "string";
                                            };
                                            readonly initials: {
                                                readonly type: "string";
                                            };
                                            readonly profilePicture: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly can_see_time_spent: {
                                        readonly type: "boolean";
                                    };
                                    readonly can_see_time_estimated: {
                                        readonly type: "boolean";
                                    };
                                    readonly can_edit_tags: {
                                        readonly type: "boolean";
                                    };
                                    readonly can_create_views: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly description: "";
                        };
                        readonly roles: {
                            readonly type: "array";
                            readonly items: {
                                readonly title: "Role";
                                readonly required: readonly ["id", "name", "custom"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly custom: {
                                        readonly type: "boolean";
                                    };
                                    readonly inherited_role: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                };
                            };
                            readonly description: "";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const InviteUserToWorkspace: {
    readonly body: {
        readonly title: "InviteUserToWorkspacerequest";
        readonly required: readonly ["email", "admin"];
        readonly type: "object";
        readonly properties: {
            readonly email: {
                readonly type: "string";
                readonly examples: readonly ["user@example.com"];
            };
            readonly admin: {
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly custom_role_id: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "InviteUserToWorkspaceresponse";
            readonly required: readonly ["team"];
            readonly type: "object";
            readonly properties: {
                readonly team: {
                    readonly title: "Team3";
                    readonly required: readonly ["id", "name", "color", "avatar", "members", "roles"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly avatar: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly members: {
                            readonly type: "array";
                            readonly items: {
                                readonly title: "Members5";
                                readonly required: readonly ["user", "invited_by"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly user: {
                                        readonly title: "User5";
                                        readonly required: readonly ["id", "username", "email", "color", "profilePicture", "initials", "role", "custom_role", "last_active", "date_joined", "date_invited"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "integer";
                                                readonly contentEncoding: "int32";
                                            };
                                            readonly username: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly email: {
                                                readonly type: "string";
                                            };
                                            readonly color: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly profilePicture: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly initials: {
                                                readonly type: "string";
                                            };
                                            readonly role: {
                                                readonly type: "integer";
                                                readonly contentEncoding: "int32";
                                            };
                                            readonly custom_role: {
                                                readonly title: "CustomRole";
                                                readonly required: readonly ["id", "name"];
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "integer";
                                                        readonly contentEncoding: "int32";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                            readonly last_active: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly date_joined: {
                                                readonly type: readonly ["string", "null"];
                                            };
                                            readonly date_invited: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly invited_by: {
                                        readonly title: "InvitedBy";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "integer";
                                                readonly contentEncoding: "int32";
                                            };
                                            readonly color: {
                                                readonly type: "string";
                                            };
                                            readonly username: {
                                                readonly type: "string";
                                            };
                                            readonly email: {
                                                readonly type: "string";
                                            };
                                            readonly initials: {
                                                readonly type: "string";
                                            };
                                            readonly profilePicture: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            };
                            readonly description: "";
                        };
                        readonly roles: {
                            readonly type: "array";
                            readonly items: {
                                readonly title: "Role";
                                readonly required: readonly ["id", "name", "custom"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly custom: {
                                        readonly type: "boolean";
                                    };
                                    readonly inherited_role: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                };
                            };
                            readonly description: "";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const RemoveCustomFieldValue: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hv"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly field_id: {
                    readonly type: "string";
                    readonly examples: readonly ["b955c4dc"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "b8a8-48d8-a0c6-b4200788a683 (uuid)";
                };
            };
            readonly required: readonly ["task_id", "field_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const RemoveGuestFromFolder: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly folder_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [1057];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly guest_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [403];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["folder_id", "guest_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly include_shared: {
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Exclude details of items shared with the guest by setting this parameter to `false`. By default this parameter is set to `true`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "RemoveGuestFromFolderresponse";
            readonly required: readonly ["guest"];
            readonly type: "object";
            readonly properties: {
                readonly guest: {
                    readonly title: "Guest2";
                    readonly required: readonly ["user", "invited_by", "can_see_time_spent", "can_see_time_estimated", "can_edit_tags", "shared"];
                    readonly type: "object";
                    readonly properties: {
                        readonly user: {
                            readonly title: "User7";
                            readonly required: readonly ["id", "username", "email", "color", "profilePicture", "initials", "role", "last_active", "date_joined", "date_invited"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly username: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly profilePicture: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly role: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly last_active: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_joined: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_invited: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly invited_by: {
                            readonly title: "InvitedBy";
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly username: {
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly profilePicture: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly can_see_time_spent: {
                            readonly type: "boolean";
                        };
                        readonly can_see_time_estimated: {
                            readonly type: "boolean";
                        };
                        readonly can_edit_tags: {
                            readonly type: "boolean";
                        };
                        readonly shared: {
                            readonly title: "Shared";
                            readonly type: "object";
                            readonly properties: {
                                readonly tasks: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly lists: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly folders: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const RemoveGuestFromList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly list_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [1427];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly guest_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [403];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["list_id", "guest_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly include_shared: {
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Exclude details of items shared with the guest by setting this parameter to `false`. By default this parameter is set to `true`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "RemoveGuestFromListresponse";
            readonly required: readonly ["guest"];
            readonly type: "object";
            readonly properties: {
                readonly guest: {
                    readonly title: "Guest2";
                    readonly required: readonly ["user", "invited_by", "can_see_time_spent", "can_see_time_estimated", "can_edit_tags", "shared"];
                    readonly type: "object";
                    readonly properties: {
                        readonly user: {
                            readonly title: "User7";
                            readonly required: readonly ["id", "username", "email", "color", "profilePicture", "initials", "role", "last_active", "date_joined", "date_invited"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly username: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly profilePicture: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly role: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly last_active: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_joined: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_invited: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly invited_by: {
                            readonly title: "InvitedBy";
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly username: {
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly profilePicture: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly can_see_time_spent: {
                            readonly type: "boolean";
                        };
                        readonly can_see_time_estimated: {
                            readonly type: "boolean";
                        };
                        readonly can_edit_tags: {
                            readonly type: "boolean";
                        };
                        readonly shared: {
                            readonly title: "Shared";
                            readonly type: "object";
                            readonly properties: {
                                readonly tasks: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly lists: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly folders: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const RemoveGuestFromTask: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["c04"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly guest_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [403];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id", "guest_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly include_shared: {
                    readonly type: "boolean";
                    readonly examples: readonly [false];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Exclude details of items shared with the guest by setting this parameter to `false`. By default this parameter is set to `true`.";
                };
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "RemoveGuestFromTaskresponse";
            readonly required: readonly ["guest"];
            readonly type: "object";
            readonly properties: {
                readonly guest: {
                    readonly title: "Guest2";
                    readonly required: readonly ["user", "invited_by", "can_see_time_spent", "can_see_time_estimated", "can_edit_tags", "shared"];
                    readonly type: "object";
                    readonly properties: {
                        readonly user: {
                            readonly title: "User7";
                            readonly required: readonly ["id", "username", "email", "color", "profilePicture", "initials", "role", "last_active", "date_joined", "date_invited"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly username: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly profilePicture: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly role: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly last_active: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_joined: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly date_invited: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly invited_by: {
                            readonly title: "InvitedBy";
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly username: {
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly profilePicture: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly can_see_time_spent: {
                            readonly type: "boolean";
                        };
                        readonly can_see_time_estimated: {
                            readonly type: "boolean";
                        };
                        readonly can_edit_tags: {
                            readonly type: "boolean";
                        };
                        readonly shared: {
                            readonly title: "Shared";
                            readonly type: "object";
                            readonly properties: {
                                readonly tasks: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly lists: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly folders: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const RemoveGuestFromWorkspace: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
                readonly guest_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [403];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["team_id", "guest_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "RemoveGuestFromWorkspaceresponse";
            readonly required: readonly ["team"];
            readonly type: "object";
            readonly properties: {
                readonly team: {
                    readonly title: "Team2";
                    readonly required: readonly ["id", "name", "color", "avatar", "members"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly avatar: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly members: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const RemoveTagFromTask: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["abc"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly tag_name: {
                    readonly type: "string";
                    readonly examples: readonly ["name"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id", "tag_name"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const RemoveTaskFromList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly list_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hz"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["list_id", "task_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const RemoveUserFromWorkspace: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
                readonly user_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [403];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["team_id", "user_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "RemoveUserFromWorkspaceresponse";
            readonly required: readonly ["team"];
            readonly type: "object";
            readonly properties: {
                readonly team: {
                    readonly title: "Team2";
                    readonly required: readonly ["id", "name", "color", "avatar", "members"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly avatar: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly members: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const Removetagsfromtimeentries: {
    readonly body: {
        readonly title: "Removetagsfromtimeentriesrequest";
        readonly required: readonly ["time_entry_ids", "tags"];
        readonly type: "object";
        readonly properties: {
            readonly time_entry_ids: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                    readonly examples: readonly ["timer_id"];
                };
                readonly description: "";
            };
            readonly tags: {
                readonly type: "array";
                readonly items: {
                    readonly title: "Tags10";
                    readonly required: readonly ["name"];
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly examples: readonly ["name of tag"];
                        };
                    };
                };
                readonly description: "";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const SearchDocs: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly workspaceId: {
                    readonly type: "number";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of your Workspace.";
                };
            };
            readonly required: readonly ["workspaceId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter results to a single Doc with the given Doc ID.";
                };
                readonly creator: {
                    readonly type: "number";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter results to Docs created by the user with the given user ID.";
                };
                readonly deleted: {
                    readonly default: "false";
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter results to return deleted Docs.";
                };
                readonly archived: {
                    readonly default: "false";
                    readonly type: "boolean";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter results to return archived Docs.";
                };
                readonly parent_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter results to children of a parent Doc with the given parent Doc ID.";
                };
                readonly parent_type: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Filter results to children of the given parent Doc type. For example, `SPACE`, `FOLDER`, `LIST`, `EVERYTHING`, `WORKSPACE`.";
                };
                readonly limit: {
                    readonly minimum: 10;
                    readonly maximum: 100;
                    readonly default: 50;
                    readonly type: "number";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The maximum number of results to retrieve for each page.";
                };
                readonly next_cursor: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The cursor to use to get the next page of results.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly docs: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly date_created: {
                                readonly type: "number";
                            };
                            readonly date_updated: {
                                readonly type: "number";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "number";
                                readonly enum: readonly [];
                            };
                            readonly parent: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "number";
                                        readonly description: "The parent Doc type. Use `4` for Space, `5` for Folder, `6` for List, `7` for Everything, and `12` for Workspace.";
                                    };
                                };
                                readonly required: readonly ["id", "type"];
                            };
                            readonly public: {
                                readonly type: "boolean";
                            };
                            readonly workspace_id: {
                                readonly type: "number";
                            };
                            readonly creator: {
                                readonly type: "number";
                            };
                            readonly deleted: {
                                readonly type: "boolean";
                            };
                            readonly date_deleted: {
                                readonly type: "number";
                            };
                            readonly deleted_by: {
                                readonly type: "number";
                            };
                            readonly archived: {
                                readonly type: "boolean";
                            };
                            readonly archived_by: {
                                readonly type: "number";
                            };
                            readonly date_archived: {
                                readonly type: "number";
                            };
                        };
                        readonly required: readonly ["id", "date_created", "name", "type", "parent", "public", "workspace_id", "creator", "deleted", "archived"];
                    };
                };
                readonly next_cursor: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["docs"];
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const SetCustomFieldValue: {
    readonly body: {
        readonly title: "SetCustomFieldValuerequest";
        readonly anyOf: readonly [{
            readonly type: "object";
            readonly title: "URL Custom Field";
            readonly description: "The `value` must be a string with a valid URL.";
            readonly required: readonly ["value"];
            readonly properties: {
                readonly value: {
                    readonly type: "string";
                    readonly examples: readonly ["https://clickup.com/api"];
                };
            };
        }, {
            readonly type: "object";
            readonly title: "Dropdown Custom Field";
            readonly description: "Enter the universal unique identifier (UUID) of the dropdown menu option you want to set. You can find the UUIDs available for each Dropdown Custom Field using [Get Accessible Custom Fields.](ref:getaccessiblecustomfields) New Dropdown Custom Field options cannot be created from this request.";
            readonly required: readonly ["value"];
            readonly properties: {
                readonly value: {
                    readonly type: "string";
                    readonly examples: readonly ["uuid1234"];
                };
            };
        }, {
            readonly type: "object";
            readonly title: "Email Custom Field";
            readonly description: "The `value` must be a string with a valid email address.";
            readonly required: readonly ["value"];
            readonly properties: {
                readonly value: {
                    readonly type: "string";
                    readonly examples: readonly ["user@company.com"];
                };
            };
        }, {
            readonly type: "object";
            readonly title: "Phone Custom Field";
            readonly description: "The `value` must be a string with a valid country code.";
            readonly required: readonly ["value"];
            readonly properties: {
                readonly value: {
                    readonly type: "string";
                    readonly examples: readonly ["+1 123 456 7890"];
                };
            };
        }, {
            readonly type: "object";
            readonly title: "Date Custom Field";
            readonly description: "The `value` must be Unix time in milliseconds. To display the time in a Date Custom Field in ClickUp, you must include `time: true` in the `value_options` property.";
            readonly properties: {
                readonly value: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly examples: readonly [1667367645000];
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly value_options: {
                    readonly type: "object";
                    readonly required: readonly ["time"];
                    readonly properties: {
                        readonly time: {
                            readonly type: "boolean";
                            readonly examples: readonly [true];
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly title: "Short or Long Text Custom Field";
            readonly description: "Enter a string of text.";
            readonly required: readonly ["value"];
            readonly properties: {
                readonly value: {
                    readonly type: "string";
                    readonly examples: readonly ["This is short or long text in a Custom Field."];
                };
            };
        }, {
            readonly type: "object";
            readonly title: "Number Custom Field";
            readonly description: "Enter a number.";
            readonly required: readonly ["value"];
            readonly properties: {
                readonly value: {
                    readonly type: "number";
                    readonly examples: readonly [-28];
                };
            };
        }, {
            readonly type: "object";
            readonly title: "Money Custom Field";
            readonly description: "You can set an amount, but not the currency of a Money Custom Field via the API. You can check the currency of a Money Custom Field using [Get Accessible Custom Fields.](ref:getaccessiblecustomfields)";
            readonly required: readonly ["value"];
            readonly properties: {
                readonly value: {
                    readonly type: "number";
                    readonly examples: readonly [8000];
                };
            };
        }, {
            readonly type: "object";
            readonly title: "Task Relationship Custom Field";
            readonly description: "Enter an array of task ids in the `add` property to add them to a Task Relationship Custom Field. Enter them into the `rem` property to remove tasks from the Relationship.";
            readonly required: readonly ["value"];
            readonly properties: {
                readonly value: {
                    readonly type: "object";
                    readonly properties: {
                        readonly add: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly rem: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly title: "People Custom Field";
            readonly description: "Enter an array of user ids or a Team id in the `add` property to add them to a People Custom Field. Enter them into the `rem` property to remove users from a People Custom Field. You can get a list of people in the Workspace using [Get Authorized Teams (Workspaces).](ref:getauthorizedteams)";
            readonly required: readonly ["value"];
            readonly properties: {
                readonly value: {
                    readonly type: "object";
                    readonly properties: {
                        readonly add: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "number";
                            };
                        };
                        readonly rem: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "number";
                            };
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly title: "Emoji (Rating) Custom Field";
            readonly description: "Enter an integer that is greater than or equal to zero and where the `count` property is greater than or equal to the `value`. You can find the `count` property for each Emoji (Rating) Custom Field using [Get Accessible Custom Fields.](ref:getaccessiblecustomfields)";
            readonly required: readonly ["value"];
            readonly properties: {
                readonly value: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly examples: readonly [4];
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
        }, {
            readonly type: "object";
            readonly title: "Manual Progress Custom Field";
            readonly description: "Enter a number between the `start` and `end` values of each Manual Progress Custom Field. For example, for a field with `start: 10` and `end: 30`, sending `current: 20` will be displayed as 50% complete in ClickUp. You can find the `start` and `end` values for each Manual Progress Custom Field using [Get Accessible Custom Fields.](ref:getaccessiblecustomfields)";
            readonly required: readonly ["value"];
            readonly properties: {
                readonly value: {
                    readonly type: "object";
                    readonly required: readonly ["current"];
                    readonly properties: {
                        readonly current: {
                            readonly type: "number";
                            readonly examples: readonly [20];
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly title: "Label Custom Field";
            readonly description: "Enter an array of the universal unique identifiers (UUIDs) of the labels you want to apply. You can find the UUIDs available for each Label Custom Field using [Get Accessible Custom Fields.](ref:getaccessiblecustomfields)";
            readonly required: readonly ["value"];
            readonly properties: {
                readonly value: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["uuid1234", "uuid9876"];
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly title: "Location Custom Field";
            readonly description: "Include the latitude, longitude, and formatted address as defined in the [Google Maps Geocoding API.](https://developers.google.com/maps/documentation/geocoding/overview)";
            readonly required: readonly ["value"];
            readonly properties: {
                readonly value: {
                    readonly type: "object";
                    readonly properties: {
                        readonly location: {
                            readonly type: "object";
                            readonly properties: {
                                readonly lat: {
                                    readonly type: "number";
                                };
                                readonly lng: {
                                    readonly type: "number";
                                };
                            };
                        };
                        readonly formatted_address: {
                            readonly type: "string";
                        };
                    };
                };
            };
        }];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hv"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Enter the task ID of the task you want to update.";
                };
                readonly field_id: {
                    readonly type: "string";
                    readonly examples: readonly ["b955c4dc"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Enter the universal unique identifier (UUID) of the Custom Field you want to set.";
                };
            };
            readonly required: readonly ["task_id", "field_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by its Custom Task ID, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const SharedHierarchy: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "SharedHierarchyresponse";
            readonly required: readonly ["shared"];
            readonly type: "object";
            readonly properties: {
                readonly shared: {
                    readonly title: "Shared7";
                    readonly required: readonly ["tasks", "lists", "folders"];
                    readonly type: "object";
                    readonly properties: {
                        readonly tasks: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly lists: {
                            readonly type: "array";
                            readonly items: {
                                readonly title: "List6";
                                readonly required: readonly ["id", "name", "orderindex", "content", "status", "priority", "assignee", "task_count", "due_date", "start_date", "archived"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly orderindex: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly content: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly status: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly priority: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly assignee: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly task_count: {
                                        readonly type: "string";
                                    };
                                    readonly due_date: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly start_date: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly archived: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly description: "";
                        };
                        readonly folders: {
                            readonly type: "array";
                            readonly items: {
                                readonly title: "Folder11";
                                readonly required: readonly ["id", "name", "orderindex", "content", "task_count", "due_date", "archived"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly orderindex: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly content: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly task_count: {
                                        readonly type: "string";
                                    };
                                    readonly due_date: {
                                        readonly type: readonly ["string", "null"];
                                    };
                                    readonly archived: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly description: "";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const StartatimeEntry: {
    readonly body: {
        readonly title: "StartatimeEntryrequest";
        readonly type: "object";
        readonly properties: {
            readonly description: {
                readonly type: "string";
                readonly examples: readonly ["from api"];
            };
            readonly tags: {
                readonly description: "Users on the Business Plan and above can include a time tracking label.";
                readonly type: "array";
                readonly items: {
                    readonly title: "Tags10";
                    readonly required: readonly ["name"];
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly examples: readonly ["tag1"];
                        };
                    };
                };
            };
            readonly tid: {
                readonly type: "string";
                readonly examples: readonly ["task_id"];
            };
            readonly billable: {
                readonly type: "boolean";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_Id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_Id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "StartatimeEntryresponse";
            readonly required: readonly ["data"];
            readonly type: "object";
            readonly properties: {
                readonly data: {
                    readonly title: "Data2";
                    readonly required: readonly ["id", "task", "wid", "user", "billable", "start", "duration", "description", "tags", "at"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly task: {
                            readonly title: "Task6";
                            readonly required: readonly ["id", "name", "status", "custom_type"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly status: {
                                    readonly title: "Status";
                                    readonly required: readonly ["status", "color", "orderindex", "type"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly status: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                        readonly orderindex: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly type: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly custom_type: {
                                    readonly type: readonly ["string", "null"];
                                };
                            };
                        };
                        readonly wid: {
                            readonly type: "string";
                        };
                        readonly user: {
                            readonly title: "User2";
                            readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly username: {
                                    readonly type: "string";
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly profilePicture: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly billable: {
                            readonly type: "boolean";
                        };
                        readonly start: {
                            readonly type: "string";
                        };
                        readonly duration: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly tags: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly at: {
                            readonly type: "integer";
                            readonly contentEncoding: "int64";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const StopatimeEntry: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
            };
            readonly required: readonly ["team_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "Content-Type": {
                    readonly const: "application/json";
                    readonly type: "string";
                    readonly examples: readonly ["application/json"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["Content-Type"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "StopatimeEntryresponse";
            readonly required: readonly ["data"];
            readonly type: "object";
            readonly properties: {
                readonly data: {
                    readonly title: "Data3";
                    readonly required: readonly ["id", "task", "wid", "user", "billable", "start", "end", "duration", "description", "tags", "source", "at"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly task: {
                            readonly title: "Task6";
                            readonly required: readonly ["id", "name", "status", "custom_type"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly status: {
                                    readonly title: "Status";
                                    readonly required: readonly ["status", "color", "orderindex", "type"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly status: {
                                            readonly type: "string";
                                        };
                                        readonly color: {
                                            readonly type: "string";
                                        };
                                        readonly orderindex: {
                                            readonly type: "integer";
                                            readonly contentEncoding: "int32";
                                        };
                                        readonly type: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                                readonly custom_type: {
                                    readonly type: readonly ["string", "null"];
                                };
                            };
                        };
                        readonly wid: {
                            readonly type: "string";
                        };
                        readonly user: {
                            readonly title: "User2";
                            readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly username: {
                                    readonly type: "string";
                                };
                                readonly initials: {
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                };
                                readonly color: {
                                    readonly type: "string";
                                };
                                readonly profilePicture: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly billable: {
                            readonly type: "boolean";
                        };
                        readonly start: {
                            readonly type: "string";
                        };
                        readonly end: {
                            readonly type: "integer";
                            readonly contentEncoding: "int64";
                        };
                        readonly duration: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly tags: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly source: {
                            readonly type: "string";
                        };
                        readonly at: {
                            readonly type: "integer";
                            readonly contentEncoding: "int64";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const Tracktime: {
    readonly body: {
        readonly title: "Tracktimerequest";
        readonly required: readonly ["start", "end", "time"];
        readonly type: "object";
        readonly properties: {
            readonly start: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
                readonly examples: readonly [1567780450202];
            };
            readonly end: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
                readonly examples: readonly [1508369194377];
            };
            readonly time: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [8640000];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hv"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "Tracktimeresponse";
            readonly required: readonly ["id"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const UpdateComment: {
    readonly body: {
        readonly title: "UpdateCommentrequest";
        readonly required: readonly ["comment_text", "assignee", "resolved"];
        readonly type: "object";
        readonly properties: {
            readonly comment_text: {
                readonly type: "string";
                readonly examples: readonly ["Updated comment content"];
            };
            readonly assignee: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [183];
            };
            readonly group_assignee: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly description: "";
                readonly examples: readonly ["dd01f92f-48ca-446d-88a1-0beb0e8f5f14"];
            };
            readonly resolved: {
                readonly description: "";
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly comment_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [456];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["comment_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const UpdateFolder: {
    readonly body: {
        readonly title: "UpdateFolderrequest";
        readonly required: readonly ["name"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["Updated Folder Name"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly folder_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [457];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["folder_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "UpdateFolderresponse";
            readonly required: readonly ["id", "name", "orderindex", "override_statuses", "hidden", "space", "task_count"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly orderindex: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                };
                readonly override_statuses: {
                    readonly type: "boolean";
                };
                readonly hidden: {
                    readonly type: "boolean";
                };
                readonly space: {
                    readonly title: "Space2";
                    readonly required: readonly ["id", "name", "access"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly task_count: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const UpdateGoal: {
    readonly body: {
        readonly title: "UpdateGoalrequest";
        readonly required: readonly ["name", "due_date", "description", "rem_owners", "add_owners", "color"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["Updated Goal Name"];
            };
            readonly due_date: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
                readonly examples: readonly [1568036964079];
            };
            readonly description: {
                readonly type: "string";
                readonly examples: readonly ["Updated Goal Description"];
            };
            readonly rem_owners: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly examples: readonly [183];
                };
                readonly description: "Array of user IDs.";
            };
            readonly add_owners: {
                readonly type: "array";
                readonly items: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                    readonly examples: readonly [184];
                };
                readonly description: "Array of user IDs.";
            };
            readonly color: {
                readonly type: "string";
                readonly examples: readonly ["#32a852"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly goal_id: {
                    readonly type: "string";
                    readonly examples: readonly ["e53a033c"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "900e-462d-a849-4a216b06d930 (uuid)";
                };
            };
            readonly required: readonly ["goal_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "UpdateGoalresponse";
            readonly required: readonly ["goal"];
            readonly type: "object";
            readonly properties: {
                readonly goal: {
                    readonly title: "Goal";
                    readonly required: readonly ["id", "name", "team_id", "date_created", "start_date", "due_date", "description", "private", "archived", "creator", "color", "pretty_id", "multiple_owners", "folder_id", "members", "owners", "key_results", "percent_completed", "history", "pretty_url"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly team_id: {
                            readonly type: "string";
                        };
                        readonly date_created: {
                            readonly type: "string";
                        };
                        readonly start_date: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly due_date: {
                            readonly type: "string";
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly private: {
                            readonly type: "boolean";
                        };
                        readonly archived: {
                            readonly type: "boolean";
                        };
                        readonly creator: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly pretty_id: {
                            readonly type: "string";
                        };
                        readonly multiple_owners: {
                            readonly type: "boolean";
                        };
                        readonly folder_id: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly members: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly owners: {
                            readonly type: "array";
                            readonly items: {
                                readonly title: "Owner";
                                readonly required: readonly ["id", "username", "initials", "email", "color", "profilePicture"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "integer";
                                        readonly contentEncoding: "int32";
                                    };
                                    readonly username: {
                                        readonly type: "string";
                                    };
                                    readonly initials: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly color: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly description: "";
                        };
                        readonly key_results: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly percent_completed: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly history: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly pretty_url: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const UpdateList: {
    readonly body: {
        readonly title: "UpdateListrequest";
        readonly required: readonly ["name", "content", "due_date", "due_date_time", "priority", "assignee", "status", "unset_status"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["Updated List Name"];
            };
            readonly content: {
                readonly type: "string";
                readonly examples: readonly ["Updated List Content"];
            };
            readonly due_date: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
                readonly examples: readonly [1567780450202];
            };
            readonly due_date_time: {
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly priority: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [2];
            };
            readonly assignee: {
                readonly type: "string";
                readonly examples: readonly ["none"];
            };
            readonly status: {
                readonly description: "**Status** refers to the List color rather than the task Statuses available in the List.";
                readonly type: "string";
                readonly examples: readonly ["red"];
            };
            readonly unset_status: {
                readonly description: "By default, this is `false.` To remove the List color use `unset_status: true`.";
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly include_markdown_description: {
                readonly description: "To return List descriptions in Markdown format, use `?include_markdown_description=true`.";
                readonly type: "boolean";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly list_id: {
                    readonly type: "string";
                    readonly examples: readonly ["124"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["list_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "UpdateListresponse";
            readonly required: readonly ["id", "name", "orderindex", "content", "status", "priority", "assignee", "task_count", "due_date", "due_date_time", "start_date", "start_date_time", "folder", "space", "statuses", "inbound_address"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly orderindex: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                };
                readonly content: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly title: "Status5";
                    readonly required: readonly ["status", "color", "hide_label"];
                    readonly type: "object";
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly hide_label: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly priority: {
                    readonly title: "Priority1";
                    readonly required: readonly ["priority", "color"];
                    readonly type: "object";
                    readonly properties: {
                        readonly priority: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                    };
                };
                readonly assignee: {
                    readonly type: readonly ["string", "null"];
                };
                readonly task_count: {
                    readonly type: readonly ["string", "null"];
                };
                readonly due_date: {
                    readonly type: "string";
                };
                readonly due_date_time: {
                    readonly type: "boolean";
                };
                readonly start_date: {
                    readonly type: readonly ["string", "null"];
                };
                readonly start_date_time: {
                    readonly type: readonly ["string", "null"];
                };
                readonly folder: {
                    readonly title: "Folder3";
                    readonly required: readonly ["id", "name", "hidden", "access"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly hidden: {
                            readonly type: "boolean";
                        };
                        readonly access: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly space: {
                    readonly title: "Space2";
                    readonly required: readonly ["id", "name", "access"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly access: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly statuses: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Status";
                        readonly required: readonly ["status", "color", "orderindex", "type"];
                        readonly type: "object";
                        readonly properties: {
                            readonly status: {
                                readonly type: "string";
                            };
                            readonly color: {
                                readonly type: "string";
                            };
                            readonly orderindex: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
                readonly inbound_address: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const UpdatePrivacyAndAccess: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly entries: {
                readonly description: "The user or user group (Team) you wish to give, remove, or edit permissions.";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "The ID of user or user group (Team) you wish to give, remove, or edit permissions.";
                            readonly type: "string";
                        };
                        readonly kind: {
                            readonly description: "The type of ID. Options are `user` or `group`.";
                            readonly type: "string";
                        };
                        readonly permission_level: {
                            readonly description: "The permission level you wish to give to user or user group (Team). `1`=read, `3`=comment, `4`=edit, `5`=create, and `null`=remove access.";
                            readonly type: "number";
                        };
                    };
                };
            };
            readonly private: {
                readonly description: "The privacy of an object or location.";
                readonly type: "boolean";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly workspace_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the Workspace.";
                };
                readonly object_type: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Any object that can be shared in a Workspace. For example, `customField`, `dashboard`, `folder`, `goal`, `goalFolder`,`list`, `space`, `task`, and `view`.";
                };
                readonly object_id: {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "The ID of the object to share.";
                };
            };
            readonly required: readonly ["workspace_id", "object_type", "object_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const UpdateSpace: {
    readonly body: {
        readonly title: "UpdateSpacerequest";
        readonly required: readonly ["name", "color", "private", "admin_can_manage", "multiple_assignees", "features"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["Updated Space Name"];
            };
            readonly color: {
                readonly type: "string";
                readonly examples: readonly ["#7B68EE"];
            };
            readonly private: {
                readonly type: "boolean";
            };
            readonly admin_can_manage: {
                readonly description: "***Note:** Allowing or restricting admins from managing private Spaces using `\"admin_can_manage\"` is an [Enterprise Plan](https://clickup.com/pricing) feature.*";
                readonly type: "boolean";
            };
            readonly multiple_assignees: {
                readonly type: "boolean";
            };
            readonly features: {
                readonly title: "Features";
                readonly required: readonly ["due_dates", "time_tracking", "tags", "time_estimates", "checklists", "custom_fields", "remap_dependencies", "dependency_warning", "portfolios"];
                readonly type: "object";
                readonly properties: {
                    readonly due_dates: {
                        readonly title: "DueDates";
                        readonly required: readonly ["enabled", "start_date", "remap_due_dates", "remap_closed_due_date"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                            };
                            readonly start_date: {
                                readonly type: "boolean";
                            };
                            readonly remap_due_dates: {
                                readonly type: "boolean";
                            };
                            readonly remap_closed_due_date: {
                                readonly type: "boolean";
                            };
                        };
                    };
                    readonly time_tracking: {
                        readonly title: "TimeTracking";
                        readonly required: readonly ["enabled"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                            };
                        };
                    };
                    readonly tags: {
                        readonly title: "Tags";
                        readonly required: readonly ["enabled"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                            };
                        };
                    };
                    readonly time_estimates: {
                        readonly title: "TimeEstimates";
                        readonly required: readonly ["enabled"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                            };
                        };
                    };
                    readonly checklists: {
                        readonly title: "Checklists";
                        readonly required: readonly ["enabled"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                                readonly examples: readonly [true];
                            };
                        };
                    };
                    readonly custom_fields: {
                        readonly title: "CustomFields";
                        readonly required: readonly ["enabled"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                                readonly examples: readonly [true];
                            };
                        };
                    };
                    readonly remap_dependencies: {
                        readonly title: "RemapDependencies";
                        readonly required: readonly ["enabled"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                            };
                        };
                    };
                    readonly dependency_warning: {
                        readonly title: "DependencyWarning";
                        readonly required: readonly ["enabled"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                            };
                        };
                    };
                    readonly portfolios: {
                        readonly title: "Portfolios";
                        readonly required: readonly ["enabled"];
                        readonly type: "object";
                        readonly properties: {
                            readonly enabled: {
                                readonly type: "boolean";
                            };
                        };
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly space_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [790];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["space_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "UpdateSpaceresponse";
            readonly required: readonly ["id", "name", "private", "statuses", "multiple_assignees", "features"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly private: {
                    readonly type: "boolean";
                };
                readonly statuses: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Status";
                        readonly required: readonly ["status", "color", "orderindex", "type"];
                        readonly type: "object";
                        readonly properties: {
                            readonly status: {
                                readonly type: "string";
                            };
                            readonly color: {
                                readonly type: "string";
                            };
                            readonly orderindex: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly description: "";
                };
                readonly multiple_assignees: {
                    readonly type: "boolean";
                };
                readonly features: {
                    readonly title: "Features";
                    readonly required: readonly ["due_dates", "time_tracking", "tags", "time_estimates", "checklists", "custom_fields", "remap_dependencies", "dependency_warning", "portfolios"];
                    readonly type: "object";
                    readonly properties: {
                        readonly due_dates: {
                            readonly title: "DueDates";
                            readonly required: readonly ["enabled", "start_date", "remap_due_dates", "remap_closed_due_date"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                                readonly start_date: {
                                    readonly type: "boolean";
                                };
                                readonly remap_due_dates: {
                                    readonly type: "boolean";
                                };
                                readonly remap_closed_due_date: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly time_tracking: {
                            readonly title: "TimeTracking";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly tags: {
                            readonly title: "Tags";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly time_estimates: {
                            readonly title: "TimeEstimates";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly checklists: {
                            readonly title: "Checklists";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly custom_fields: {
                            readonly title: "CustomFields";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly remap_dependencies: {
                            readonly title: "RemapDependencies";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly dependency_warning: {
                            readonly title: "DependencyWarning";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly portfolios: {
                            readonly title: "Portfolios";
                            readonly required: readonly ["enabled"];
                            readonly type: "object";
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const UpdateTask: {
    readonly body: {
        readonly title: "UpdateTaskrequest";
        readonly type: "object";
        readonly properties: {
            readonly custom_item_id: {
                readonly type: readonly ["number", "null"];
                readonly description: "The custom task type ID for this task. A value of `null` (default) sets the task type to type \"Task\".\\\n \\\nTo get a list of available custom task type IDs for your Workspace, use the [Get Custom Task Types endpoint](ref:getcustomitems).";
            };
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["Updated Task Name"];
            };
            readonly description: {
                readonly description: "To clear the task description, include `Description` with `\" \"`.";
                readonly type: "string";
                readonly examples: readonly ["Updated Task Content"];
            };
            readonly markdown_content: {
                readonly type: "string";
                readonly description: "Markdown formatted description for the task. If both `markdown_content` and `description` are provided, `markdown_content` will be used instead of `description`.";
            };
            readonly status: {
                readonly type: "string";
                readonly examples: readonly ["in progress"];
            };
            readonly priority: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [1];
            };
            readonly due_date: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
                readonly examples: readonly [1508369194377];
            };
            readonly due_date_time: {
                readonly type: "boolean";
            };
            readonly parent: {
                readonly description: "You can move a subtask to another parent task by including `\"parent\"` with a valid `task id`.\\\n \\\nYou cannot convert a subtask to a task by setting `\"parent\"` to `null`.";
                readonly type: "string";
                readonly examples: readonly ["abc1234"];
            };
            readonly time_estimate: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [8640000];
            };
            readonly start_date: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
                readonly examples: readonly [1567780450202];
            };
            readonly start_date_time: {
                readonly type: "boolean";
            };
            readonly points: {
                readonly type: "number";
                readonly description: "Update the task's Sprint Points.";
                readonly examples: readonly [3];
            };
            readonly assignees: {
                readonly title: "Assignees";
                readonly required: readonly ["add", "rem"];
                readonly type: "object";
                readonly properties: {
                    readonly add: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                            readonly examples: readonly [182];
                        };
                        readonly description: "";
                    };
                    readonly rem: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                            readonly examples: readonly [183];
                        };
                        readonly description: "";
                    };
                };
            };
            readonly group_assignees: {
                readonly type: "object";
                readonly properties: {
                    readonly add: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                            readonly examples: readonly ["dd01f92f-48ca-446d-88a1-0beb0e8f5f14"];
                        };
                        readonly description: "";
                    };
                    readonly rem: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                            readonly examples: readonly ["dd01f92f-48ca-446d-88a1-0beb0e8f5f13"];
                        };
                        readonly description: "";
                    };
                };
            };
            readonly watchers: {
                readonly title: "Watchers";
                readonly required: readonly ["add", "rem"];
                readonly type: "object";
                readonly properties: {
                    readonly add: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly description: "";
                    };
                    readonly rem: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly description: "";
                    };
                };
            };
            readonly archived: {
                readonly type: "boolean";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly task_id: {
                    readonly type: "string";
                    readonly examples: readonly ["9hx"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["task_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by its custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "UpdateTaskresponse";
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly custom_id: {
                    readonly type: readonly ["string", "null"];
                };
                readonly custom_item_id: {
                    readonly type: readonly ["number", "null"];
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly text_content: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly title: "Status";
                    readonly required: readonly ["status", "color", "orderindex", "type"];
                    readonly type: "object";
                    readonly properties: {
                        readonly status: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly orderindex: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                    };
                };
                readonly archived: {
                    readonly type: "boolean";
                };
                readonly orderindex: {
                    readonly type: "string";
                };
                readonly date_created: {
                    readonly type: "string";
                };
                readonly date_updated: {
                    readonly type: "string";
                };
                readonly date_closed: {
                    readonly type: readonly ["string", "null"];
                };
                readonly creator: {
                    readonly title: "Creator";
                    readonly required: readonly ["id", "username", "color", "profilePicture"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly username: {
                            readonly type: "string";
                        };
                        readonly color: {
                            readonly type: "string";
                        };
                        readonly profilePicture: {
                            readonly type: "string";
                        };
                    };
                };
                readonly assignees: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly description: "";
                };
                readonly group_assignees: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly description: "";
                };
                readonly checklists: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly description: "";
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly description: "";
                };
                readonly parent: {
                    readonly type: "string";
                };
                readonly priority: {
                    readonly type: readonly ["string", "null"];
                };
                readonly due_date: {
                    readonly type: readonly ["string", "null"];
                };
                readonly start_date: {
                    readonly type: readonly ["string", "null"];
                };
                readonly points: {
                    readonly type: "number";
                };
                readonly time_estimate: {
                    readonly type: readonly ["string", "null"];
                };
                readonly time_spent: {
                    readonly type: readonly ["string", "null"];
                };
                readonly custom_fields: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "CustomFields7";
                        readonly required: readonly ["id", "name", "type", "type_config", "date_created", "hide_from_guests", "required"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                            };
                            readonly type_config: {
                                readonly title: "TypeConfig1";
                                readonly type: "object";
                                readonly properties: {
                                    readonly single_user: {
                                        readonly type: "boolean";
                                    };
                                    readonly include_groups: {
                                        readonly type: "boolean";
                                    };
                                    readonly include_guests: {
                                        readonly type: "boolean";
                                    };
                                    readonly include_team_members: {
                                        readonly type: "boolean";
                                    };
                                };
                            };
                            readonly date_created: {
                                readonly type: "string";
                            };
                            readonly hide_from_guests: {
                                readonly type: "boolean";
                            };
                            readonly value: {
                                readonly type: "string";
                            };
                            readonly required: {
                                readonly type: "boolean";
                            };
                        };
                    };
                    readonly description: "";
                };
                readonly list: {
                    readonly title: "List";
                    readonly required: readonly ["id"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                    };
                };
                readonly folder: {
                    readonly title: "Folder";
                    readonly required: readonly ["id"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                    };
                };
                readonly space: {
                    readonly title: "Space";
                    readonly required: readonly ["id"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                    };
                };
                readonly url: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const UpdateTeam: {
    readonly body: {
        readonly title: "UpdateTeamrequest";
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["New User Group Name"];
            };
            readonly handle: {
                readonly type: "string";
                readonly examples: readonly ["newusergroupname"];
            };
            readonly members: {
                readonly title: "Members2";
                readonly required: readonly ["add", "rem"];
                readonly type: "object";
                readonly properties: {
                    readonly add: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                            readonly examples: readonly [123456];
                        };
                        readonly description: "";
                    };
                    readonly rem: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                            readonly examples: readonly [159753];
                        };
                        readonly description: "";
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly group_id: {
                    readonly type: "string";
                    readonly examples: readonly ["C9C58BE9"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "User Group ID";
                };
            };
            readonly required: readonly ["group_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "UpdateTeamresponse";
            readonly required: readonly ["id", "team_id", "userid", "name", "handle", "date_created", "initials", "members", "avatar"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly team_id: {
                    readonly type: "string";
                };
                readonly userid: {
                    readonly type: "integer";
                    readonly contentEncoding: "int32";
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly handle: {
                    readonly type: "string";
                };
                readonly date_created: {
                    readonly type: "string";
                };
                readonly initials: {
                    readonly type: "string";
                };
                readonly members: {
                    readonly type: "array";
                    readonly items: {
                        readonly title: "Members3";
                        readonly required: readonly ["id", "username", "email", "color", "initials", "profilePicture"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "integer";
                                readonly contentEncoding: "int32";
                            };
                            readonly username: {
                                readonly type: "string";
                            };
                            readonly email: {
                                readonly type: "string";
                            };
                            readonly color: {
                                readonly type: "string";
                            };
                            readonly initials: {
                                readonly type: "string";
                            };
                            readonly profilePicture: {
                                readonly type: readonly ["string", "null"];
                            };
                        };
                    };
                    readonly description: "";
                };
                readonly avatar: {
                    readonly title: "Avatar";
                    readonly required: readonly ["attachment_id", "color", "source", "icon"];
                    readonly type: "object";
                    readonly properties: {
                        readonly attachment_id: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly color: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly source: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly icon: {
                            readonly type: readonly ["string", "null"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const UpdateView: {
    readonly body: {
        readonly title: "UpdateViewrequest";
        readonly required: readonly ["name", "type", "parent", "grouping", "divide", "sorting", "filters", "columns", "team_sidebar", "settings"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly examples: readonly ["New View Name"];
            };
            readonly type: {
                readonly type: "string";
                readonly examples: readonly ["list"];
            };
            readonly parent: {
                readonly title: "Parent";
                readonly description: "The parent parameter specifies where the view is located in the ClickUp Hierarchy. Both `id` and `type` are required. \\\n \\\nThe `id` is the id of the Workspace, Space, Folder, or List where the view is located. \\\n \\\nThe `type` value indciates the level of the Hierarchy where the view is located.";
                readonly required: readonly ["id", "type"];
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "The id of the Workspace, Space, Folder, or List where the view is located.";
                        readonly examples: readonly ["512"];
                    };
                    readonly type: {
                        readonly type: "integer";
                        readonly description: "The level of the Hierarchy where the view is created. \\\n \\\nOptions include: \\\n \\\nWorkspace (Everything Level): `7` \\\n \\\nSpace: `4` \\\n \\\nFolder: `5` \\\n \\\nList: `6`";
                        readonly contentEncoding: "int32";
                        readonly examples: readonly ["list"];
                    };
                };
            };
            readonly grouping: {
                readonly title: "Grouping";
                readonly required: readonly ["field", "dir", "collapsed", "ignore"];
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                        readonly description: "Set the field to group by.\\\n \\\nOptions include: `none`, `status`, `priority`, `assignee`, `tag`, or `dueDate`.";
                        readonly examples: readonly ["status"];
                    };
                    readonly dir: {
                        readonly description: "Set a group sort order using `1` or `-1`.\\\n \\\nFor example, use `1`show tasks with urgent priority at the top of your view, and tasks with no priority at the bottom.\\\n \\\nUse `-1` to reverse the order to show tasks with no priority at the top of your view.";
                        readonly type: "integer";
                        readonly contentEncoding: "int32";
                        readonly examples: readonly [1];
                    };
                    readonly collapsed: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "";
                    };
                    readonly ignore: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly divide: {
                readonly title: "Divide";
                readonly required: readonly ["collapsed"];
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "null";
                    };
                    readonly dir: {
                        readonly type: "null";
                    };
                    readonly collapsed: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly sorting: {
                readonly title: "Sorting";
                readonly required: readonly ["fields"];
                readonly type: "object";
                readonly properties: {
                    readonly fields: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "Include an array of fields to sort by.\\\n \\\n You can sort by the same fields available when [filtering a view](doc:filter-views).";
                    };
                };
            };
            readonly filters: {
                readonly title: "Filters";
                readonly required: readonly ["op", "fields", "search", "show_closed"];
                readonly type: "object";
                readonly properties: {
                    readonly op: {
                        readonly type: "string";
                        readonly description: "The available operator (`op``) values are `AND`` and `OR``.";
                        readonly examples: readonly ["AND"];
                    };
                    readonly fields: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "View the list of [fields available](doc:filter-views) to filter by.";
                    };
                    readonly search: {
                        readonly type: "string";
                    };
                    readonly show_closed: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly columns: {
                readonly title: "Columns";
                readonly description: "Custom Fields added to a view at the Everything level will be added to all tasks in your Workspace. Once Custom Fields are added to one of these views, you cannot move it to another level of the Hierarchy.";
                readonly required: readonly ["fields"];
                readonly type: "object";
                readonly properties: {
                    readonly fields: {
                        readonly description: "Custom Fields require the `_cf` prefix and must be formatted as a JSON object.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly team_sidebar: {
                readonly title: "TeamSidebar";
                readonly required: readonly ["assignees", "assigned_comments", "unassigned_tasks"];
                readonly type: "object";
                readonly properties: {
                    readonly assignees: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "";
                    };
                    readonly assigned_comments: {
                        readonly type: "boolean";
                    };
                    readonly unassigned_tasks: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly settings: {
                readonly title: "Settings";
                readonly required: readonly ["show_task_locations", "show_subtasks", "show_subtask_parent_names", "show_closed_subtasks", "show_assignees", "show_images", "collapse_empty_columns", "me_comments", "me_subtasks", "me_checklists"];
                readonly type: "object";
                readonly properties: {
                    readonly show_task_locations: {
                        readonly type: "boolean";
                    };
                    readonly show_subtasks: {
                        readonly description: "Acceptable values are `1`, `2`, or `3`, which show subtasks separate, expanded, or collapsed.";
                        readonly type: "integer";
                        readonly contentEncoding: "int32";
                        readonly examples: readonly [3];
                    };
                    readonly show_subtask_parent_names: {
                        readonly type: "boolean";
                    };
                    readonly show_closed_subtasks: {
                        readonly type: "boolean";
                    };
                    readonly show_assignees: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly show_images: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly collapse_empty_columns: {
                        readonly type: readonly ["string", "null"];
                    };
                    readonly me_comments: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly me_subtasks: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                    readonly me_checklists: {
                        readonly type: "boolean";
                        readonly examples: readonly [true];
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly view_id: {
                    readonly type: "string";
                    readonly examples: readonly ["3c"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["view_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "UpdateViewresponse";
            readonly required: readonly ["view"];
            readonly type: "object";
            readonly properties: {
                readonly view: {
                    readonly title: "View";
                    readonly required: readonly ["id", "name", "type", "parent", "grouping", "divide", "sorting", "filters", "columns", "team_sidebar", "settings"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                        readonly parent: {
                            readonly title: "Parent";
                            readonly description: "The parent parameter specifies where the view is located in the ClickUp Hierarchy. Both `id` and `type` are required. \\\n \\\nThe `id` is the id of the Workspace, Space, Folder, or List where the view is located. \\\n \\\nThe `type` value indciates the level of the Hierarchy where the view is located.";
                            readonly required: readonly ["id", "type"];
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "The id of the Workspace, Space, Folder, or List where the view is located.";
                                };
                                readonly type: {
                                    readonly type: "integer";
                                    readonly description: "The level of the Hierarchy where the view is created. \\\n \\\nOptions include: \\\n \\\nWorkspace (Everything Level): `7` \\\n \\\nSpace: `4` \\\n \\\nFolder: `5` \\\n \\\nList: `6`";
                                    readonly contentEncoding: "int32";
                                };
                            };
                        };
                        readonly grouping: {
                            readonly title: "Grouping";
                            readonly required: readonly ["field", "dir", "collapsed", "ignore"];
                            readonly type: "object";
                            readonly properties: {
                                readonly field: {
                                    readonly type: "string";
                                    readonly description: "Set the field to group by.\\\n \\\nOptions include: `none`, `status`, `priority`, `assignee`, `tag`, or `dueDate`.";
                                };
                                readonly dir: {
                                    readonly description: "Set a group sort order using `1` or `-1`.\\\n \\\nFor example, use `1`show tasks with urgent priority at the top of your view, and tasks with no priority at the bottom.\\\n \\\nUse `-1` to reverse the order to show tasks with no priority at the top of your view.";
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly collapsed: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly ignore: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly divide: {
                            readonly title: "Divide";
                            readonly required: readonly ["collapsed"];
                            readonly type: "object";
                            readonly properties: {
                                readonly field: {
                                    readonly type: "null";
                                };
                                readonly dir: {
                                    readonly type: "null";
                                };
                                readonly collapsed: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly sorting: {
                            readonly title: "Sorting";
                            readonly required: readonly ["fields"];
                            readonly type: "object";
                            readonly properties: {
                                readonly fields: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "Include an array of fields to sort by.\\\n \\\n You can sort by the same fields available when [filtering a view](doc:filter-views).";
                                };
                            };
                        };
                        readonly filters: {
                            readonly title: "Filters";
                            readonly required: readonly ["op", "fields", "search", "show_closed"];
                            readonly type: "object";
                            readonly properties: {
                                readonly op: {
                                    readonly type: "string";
                                    readonly description: "The available operator (`op``) values are `AND`` and `OR``.";
                                };
                                readonly fields: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "View the list of [fields available](doc:filter-views) to filter by.";
                                };
                                readonly search: {
                                    readonly type: "string";
                                };
                                readonly show_closed: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly columns: {
                            readonly title: "Columns";
                            readonly description: "Custom Fields added to a view at the Everything level will be added to all tasks in your Workspace. Once Custom Fields are added to one of these views, you cannot move it to another level of the Hierarchy.";
                            readonly required: readonly ["fields"];
                            readonly type: "object";
                            readonly properties: {
                                readonly fields: {
                                    readonly description: "Custom Fields require the `_cf` prefix and must be formatted as a JSON object.";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                        readonly team_sidebar: {
                            readonly title: "TeamSidebar";
                            readonly required: readonly ["assignees", "assigned_comments", "unassigned_tasks"];
                            readonly type: "object";
                            readonly properties: {
                                readonly assignees: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                    readonly description: "";
                                };
                                readonly assigned_comments: {
                                    readonly type: "boolean";
                                };
                                readonly unassigned_tasks: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly settings: {
                            readonly title: "Settings";
                            readonly required: readonly ["show_task_locations", "show_subtasks", "show_subtask_parent_names", "show_closed_subtasks", "show_assignees", "show_images", "collapse_empty_columns", "me_comments", "me_subtasks", "me_checklists"];
                            readonly type: "object";
                            readonly properties: {
                                readonly show_task_locations: {
                                    readonly type: "boolean";
                                };
                                readonly show_subtasks: {
                                    readonly description: "Acceptable values are `1`, `2`, or `3`, which show subtasks separate, expanded, or collapsed.";
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                                readonly show_subtask_parent_names: {
                                    readonly type: "boolean";
                                };
                                readonly show_closed_subtasks: {
                                    readonly type: "boolean";
                                };
                                readonly show_assignees: {
                                    readonly type: "boolean";
                                };
                                readonly show_images: {
                                    readonly type: "boolean";
                                };
                                readonly collapse_empty_columns: {
                                    readonly type: readonly ["string", "null"];
                                };
                                readonly me_comments: {
                                    readonly type: "boolean";
                                };
                                readonly me_subtasks: {
                                    readonly type: "boolean";
                                };
                                readonly me_checklists: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const UpdateWebhook: {
    readonly body: {
        readonly title: "UpdateWebhookrequest";
        readonly required: readonly ["endpoint", "events", "status"];
        readonly type: "object";
        readonly properties: {
            readonly endpoint: {
                readonly type: "string";
                readonly examples: readonly ["https://yourdomain.com/webhook"];
            };
            readonly events: {
                readonly type: "string";
                readonly examples: readonly ["*"];
            };
            readonly status: {
                readonly type: "string";
                readonly examples: readonly ["active"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly webhook_id: {
                    readonly type: "string";
                    readonly examples: readonly ["4b67ac88"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "e506-4a29-9d42-26e504e3435e (uuid)";
                };
            };
            readonly required: readonly ["webhook_id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly title: "UpdateWebhookresponse";
            readonly required: readonly ["id", "webhook"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly webhook: {
                    readonly title: "Webhook";
                    readonly required: readonly ["id", "userid", "team_id", "endpoint", "client_id", "events", "task_id", "list_id", "folder_id", "space_id", "health", "secret"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly userid: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly team_id: {
                            readonly type: "integer";
                            readonly contentEncoding: "int32";
                        };
                        readonly endpoint: {
                            readonly type: "string";
                        };
                        readonly client_id: {
                            readonly type: "string";
                        };
                        readonly events: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "";
                        };
                        readonly task_id: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly list_id: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly folder_id: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly space_id: {
                            readonly type: readonly ["string", "null"];
                        };
                        readonly health: {
                            readonly title: "Health";
                            readonly required: readonly ["status", "fail_count"];
                            readonly type: "object";
                            readonly properties: {
                                readonly status: {
                                    readonly type: "string";
                                };
                                readonly fail_count: {
                                    readonly type: "integer";
                                    readonly contentEncoding: "int32";
                                };
                            };
                        };
                        readonly secret: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
declare const UpdateatimeEntry: {
    readonly body: {
        readonly title: "UpdateatimeEntryrequest";
        readonly required: readonly ["tags", "tid"];
        readonly type: "object";
        readonly properties: {
            readonly description: {
                readonly type: "string";
            };
            readonly tags: {
                readonly description: "Users on the Business Plan and above can include a time tracking label.";
                readonly type: "array";
                readonly items: {
                    readonly title: "Tags6";
                    readonly required: readonly ["name", "tag_fg", "tag_bg"];
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly examples: readonly ["name of tag"];
                        };
                        readonly tag_fg: {
                            readonly type: "string";
                            readonly examples: readonly ["#FFFFFF"];
                        };
                        readonly tag_bg: {
                            readonly type: "string";
                            readonly examples: readonly ["#BF55EC"];
                        };
                    };
                };
            };
            readonly tag_action: {
                readonly type: "string";
                readonly examples: readonly ["add"];
            };
            readonly start: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
                readonly description: "When providing `start`, you must also provide `end`.";
                readonly examples: readonly [1595289395842];
            };
            readonly end: {
                readonly type: "integer";
                readonly contentEncoding: "int64";
                readonly description: "When providing `end`, you must also provide `start`.";
                readonly examples: readonly [1595289495842];
            };
            readonly tid: {
                readonly type: "string";
                readonly examples: readonly ["task_id"];
            };
            readonly billable: {
                readonly type: "boolean";
                readonly examples: readonly [true];
            };
            readonly duration: {
                readonly type: "integer";
                readonly contentEncoding: "int32";
                readonly examples: readonly [100000];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "Workspace ID";
                };
                readonly timer_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [2004673344540003600];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                };
            };
            readonly required: readonly ["team_id", "timer_id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly custom_task_ids: {
                    readonly type: "boolean";
                    readonly examples: readonly [true];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "If you want to reference a task by it's custom task id, this value must be `true`.";
                };
                readonly team_id: {
                    readonly type: "number";
                    readonly contentEncoding: "double";
                    readonly examples: readonly [123];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema";
                    readonly description: "When the `custom_task_ids` parameter is set to `true`, the Workspace ID must be provided using the `team_id` parameter.\n \\\nFor example: `custom_task_ids=true&team_id=123`";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly contentMediaType: "application/json";
            readonly additionalProperties: true;
            readonly $schema: "https://json-schema.org/draft/2020-12/schema";
        };
    };
};
export { AddDependency, AddGuestToFolder, AddGuestToList, AddGuestToTask, AddTagToTask, AddTaskLink, AddTaskToList, Addtagsfromtimeentries, Changetagnamesfromtimeentries, CreateChatViewComment, CreateChecklist, CreateChecklistItem, CreateDoc, CreateFolder, CreateFolderFromTemplate, CreateFolderListFromTemplate, CreateFolderView, CreateFolderlessList, CreateGoal, CreateKeyResult, CreateList, CreateListComment, CreateListView, CreatePage, CreateSpace, CreateSpaceListFromTemplate, CreateSpaceTag, CreateSpaceView, CreateTask, CreateTaskAttachment, CreateTaskComment, CreateTaskFromTemplate, CreateTeamView, CreateThreadedComment, CreateUserGroup, CreateWebhook, CreateWorkspaceAuditLog, Createatimeentry, DeleteChecklist, DeleteChecklistItem, DeleteComment, DeleteDependency, DeleteFolder, DeleteGoal, DeleteKeyResult, DeleteList, DeleteSpace, DeleteSpaceTag, DeleteTask, DeleteTaskLink, DeleteTeam, DeleteView, DeleteWebhook, DeleteatimeEntry, Deletetimetracked, EditChecklist, EditChecklistItem, EditGuestOnWorkspace, EditKeyResult, EditPage, EditSpaceTag, EditUserOnWorkspace, Edittimetracked, GetAccessToken, GetAccessibleCustomFields, GetAuthorizedTeams, GetAuthorizedUser, GetBulkTasksTimeinStatus, GetChatViewComments, GetCustomItems, GetCustomRoles, GetDoc, GetDocPageListing, GetDocPages, GetFilteredTeamTasks, GetFolder, GetFolderAvailableFields, GetFolderViews, GetFolderlessLists, GetFolders, GetGoal, GetGoals, GetGuest, GetList, GetListComments, GetListMembers, GetListViews, GetLists, GetPage, GetSpace, GetSpaceAvailableFields, GetSpaceTags, GetSpaceViews, GetSpaces, GetTask, GetTaskComments, GetTaskMembers, GetTaskSTimeinStatus, GetTaskTemplates, GetTasks, GetTeamAvailableFields, GetTeamViews, GetTeams1, GetThreadedComments, GetUser, GetView, GetViewTasks, GetWebhooks, GetWorkspaceplan, GetWorkspaceseats, Getalltagsfromtimeentries, Getrunningtimeentry, Getsingulartimeentry, Gettimeentrieswithinadaterange, Gettimeentryhistory, Gettrackedtime, InviteGuestToWorkspace, InviteUserToWorkspace, RemoveCustomFieldValue, RemoveGuestFromFolder, RemoveGuestFromList, RemoveGuestFromTask, RemoveGuestFromWorkspace, RemoveTagFromTask, RemoveTaskFromList, RemoveUserFromWorkspace, Removetagsfromtimeentries, SearchDocs, SetCustomFieldValue, SharedHierarchy, StartatimeEntry, StopatimeEntry, Tracktime, UpdateComment, UpdateFolder, UpdateGoal, UpdateList, UpdatePrivacyAndAccess, UpdateSpace, UpdateTask, UpdateTeam, UpdateView, UpdateWebhook, UpdateatimeEntry };
